
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b8  00800060  00002c44  00002cd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  00800118  00800118  00002d90  2**0
                  ALLOC
  3 .stab         000029dc  00000000  00000000  00002d90  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011a0  00000000  00000000  0000576c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000690c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008805  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000096f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a4a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a600  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a88d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b05b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 81 13 	jmp	0x2702	; 0x2702 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e4       	ldi	r30, 0x44	; 68
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 31       	cpi	r26, 0x18	; 24
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e1       	ldi	r26, 0x18	; 24
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 33       	cpi	r26, 0x35	; 53
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cf 09 	call	0x139e	; 0x139e <main>
      8a:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e0       	ldi	r26, 0x04	; 4
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b0 15 	jmp	0x2b60	; 0x2b60 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cc 15 	jmp	0x2b98	; 0x2b98 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b0 15 	jmp	0x2b60	; 0x2b60 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cc 15 	jmp	0x2b98	; 0x2b98 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e0       	ldi	r24, 0x04	; 4
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b0 15 	jmp	0x2b60	; 0x2b60 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 cc 15 	jmp	0x2b98	; 0x2b98 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b0 15 	jmp	0x2b60	; 0x2b60 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 cc 15 	jmp	0x2b98	; 0x2b98 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b0 15 	jmp	0x2b60	; 0x2b60 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 cc 15 	jmp	0x2b98	; 0x2b98 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b4 15 	jmp	0x2b68	; 0x2b68 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Count>:
 * Call back function
 * 1. called when the timer gets a compare match to increment the counter
 */

void Count(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* increments the counter after getting a compare match */
	timer_counter++;
     b4e:	80 91 23 01 	lds	r24, 0x0123
     b52:	90 91 24 01 	lds	r25, 0x0124
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	90 93 24 01 	sts	0x0124, r25
     b5c:	80 93 23 01 	sts	0x0123, r24
}
     b60:	cf 91       	pop	r28
     b62:	df 91       	pop	r29
     b64:	08 95       	ret

00000b66 <Wrong_Password_Message>:
 * Description :
 * used when the user enters a wrong password
 * to display try again for 1 minute
 */
void Wrong_Password_Message(void)
{
     b66:	df 93       	push	r29
     b68:	cf 93       	push	r28
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
     b6e:	2e 97       	sbiw	r28, 0x0e	; 14
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	f8 94       	cli
     b74:	de bf       	out	0x3e, r29	; 62
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	cd bf       	out	0x3d, r28	; 61
	/* Display string "wrong Password" on LCD at the first row
	 * then display string "Please Try Again" on LCD at the second row
	 * for a minute to let the user know about his wrong password */
	LCD_displayString("Wrong Password");
     b7a:	80 e6       	ldi	r24, 0x60	; 96
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_displayString>
	LCD_moveCursor(1,0);
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	60 e0       	ldi	r22, 0x00	; 0
     b86:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <LCD_moveCursor>
	LCD_displayString("Please Try Again");
     b8a:	8f e6       	ldi	r24, 0x6F	; 111
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_displayString>
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	aa e7       	ldi	r26, 0x7A	; 122
     b98:	b4 e4       	ldi	r27, 0x44	; 68
     b9a:	8b 87       	std	Y+11, r24	; 0x0b
     b9c:	9c 87       	std	Y+12, r25	; 0x0c
     b9e:	ad 87       	std	Y+13, r26	; 0x0d
     ba0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ba2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ba4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ba6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ba8:	9e 85       	ldd	r25, Y+14	; 0x0e
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	4a ef       	ldi	r20, 0xFA	; 250
     bb0:	54 e4       	ldi	r21, 0x44	; 68
     bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bb6:	dc 01       	movw	r26, r24
     bb8:	cb 01       	movw	r24, r22
     bba:	8f 83       	std	Y+7, r24	; 0x07
     bbc:	98 87       	std	Y+8, r25	; 0x08
     bbe:	a9 87       	std	Y+9, r26	; 0x09
     bc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bc2:	6f 81       	ldd	r22, Y+7	; 0x07
     bc4:	78 85       	ldd	r23, Y+8	; 0x08
     bc6:	89 85       	ldd	r24, Y+9	; 0x09
     bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	40 e8       	ldi	r20, 0x80	; 128
     bd0:	5f e3       	ldi	r21, 0x3F	; 63
     bd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bd6:	88 23       	and	r24, r24
     bd8:	2c f4       	brge	.+10     	; 0xbe4 <Wrong_Password_Message+0x7e>
		__ticks = 1;
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	9e 83       	std	Y+6, r25	; 0x06
     be0:	8d 83       	std	Y+5, r24	; 0x05
     be2:	3f c0       	rjmp	.+126    	; 0xc62 <Wrong_Password_Message+0xfc>
	else if (__tmp > 65535)
     be4:	6f 81       	ldd	r22, Y+7	; 0x07
     be6:	78 85       	ldd	r23, Y+8	; 0x08
     be8:	89 85       	ldd	r24, Y+9	; 0x09
     bea:	9a 85       	ldd	r25, Y+10	; 0x0a
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	3f ef       	ldi	r19, 0xFF	; 255
     bf0:	4f e7       	ldi	r20, 0x7F	; 127
     bf2:	57 e4       	ldi	r21, 0x47	; 71
     bf4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bf8:	18 16       	cp	r1, r24
     bfa:	4c f5       	brge	.+82     	; 0xc4e <Wrong_Password_Message+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bfc:	6b 85       	ldd	r22, Y+11	; 0x0b
     bfe:	7c 85       	ldd	r23, Y+12	; 0x0c
     c00:	8d 85       	ldd	r24, Y+13	; 0x0d
     c02:	9e 85       	ldd	r25, Y+14	; 0x0e
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	40 e2       	ldi	r20, 0x20	; 32
     c0a:	51 e4       	ldi	r21, 0x41	; 65
     c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c10:	dc 01       	movw	r26, r24
     c12:	cb 01       	movw	r24, r22
     c14:	bc 01       	movw	r22, r24
     c16:	cd 01       	movw	r24, r26
     c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c1c:	dc 01       	movw	r26, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	9e 83       	std	Y+6, r25	; 0x06
     c22:	8d 83       	std	Y+5, r24	; 0x05
     c24:	0f c0       	rjmp	.+30     	; 0xc44 <Wrong_Password_Message+0xde>
     c26:	88 ec       	ldi	r24, 0xC8	; 200
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	9c 83       	std	Y+4, r25	; 0x04
     c2c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c2e:	8b 81       	ldd	r24, Y+3	; 0x03
     c30:	9c 81       	ldd	r25, Y+4	; 0x04
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	f1 f7       	brne	.-4      	; 0xc32 <Wrong_Password_Message+0xcc>
     c36:	9c 83       	std	Y+4, r25	; 0x04
     c38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c3a:	8d 81       	ldd	r24, Y+5	; 0x05
     c3c:	9e 81       	ldd	r25, Y+6	; 0x06
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	9e 83       	std	Y+6, r25	; 0x06
     c42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c44:	8d 81       	ldd	r24, Y+5	; 0x05
     c46:	9e 81       	ldd	r25, Y+6	; 0x06
     c48:	00 97       	sbiw	r24, 0x00	; 0
     c4a:	69 f7       	brne	.-38     	; 0xc26 <Wrong_Password_Message+0xc0>
     c4c:	14 c0       	rjmp	.+40     	; 0xc76 <Wrong_Password_Message+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c4e:	6f 81       	ldd	r22, Y+7	; 0x07
     c50:	78 85       	ldd	r23, Y+8	; 0x08
     c52:	89 85       	ldd	r24, Y+9	; 0x09
     c54:	9a 85       	ldd	r25, Y+10	; 0x0a
     c56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c5a:	dc 01       	movw	r26, r24
     c5c:	cb 01       	movw	r24, r22
     c5e:	9e 83       	std	Y+6, r25	; 0x06
     c60:	8d 83       	std	Y+5, r24	; 0x05
     c62:	8d 81       	ldd	r24, Y+5	; 0x05
     c64:	9e 81       	ldd	r25, Y+6	; 0x06
     c66:	9a 83       	std	Y+2, r25	; 0x02
     c68:	89 83       	std	Y+1, r24	; 0x01
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	9a 81       	ldd	r25, Y+2	; 0x02
     c6e:	01 97       	sbiw	r24, 0x01	; 1
     c70:	f1 f7       	brne	.-4      	; 0xc6e <Wrong_Password_Message+0x108>
     c72:	9a 83       	std	Y+2, r25	; 0x02
     c74:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_clearScreen();
     c76:	0e 94 77 13 	call	0x26ee	; 0x26ee <LCD_clearScreen>
}
     c7a:	2e 96       	adiw	r28, 0x0e	; 14
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	cd bf       	out	0x3d, r28	; 61
     c86:	cf 91       	pop	r28
     c88:	df 91       	pop	r29
     c8a:	08 95       	ret

00000c8c <Error_Message>:
 * used to display error message when the user enters a wrong password 3 consecutive times
 * 1. display error message for 1 second
 * 2. after the required time it clears the screen and stops the timer
 */
void Error_Message(void)
{
     c8c:	df 93       	push	r29
     c8e:	cf 93       	push	r28
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(BUZZER_ON); /* sends a message to MC2 to start the buzzer*/
     c94:	86 e0       	ldi	r24, 0x06	; 6
     c96:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <UART_sendByte>
	LCD_displayString("ERROR !!!"); /* Display error message on LCD at the first row */
     c9a:	80 e8       	ldi	r24, 0x80	; 128
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_displayString>
	Timer1_init(&TIMER1_Config);  /* initialize Timer1 driver by sending configuration structure*/
     ca2:	8c e0       	ldi	r24, 0x0C	; 12
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	0e 94 e7 13 	call	0x27ce	; 0x27ce <Timer1_init>
	while(timer_counter!=20){} /* 60 seconds */
     caa:	80 91 23 01 	lds	r24, 0x0123
     cae:	90 91 24 01 	lds	r25, 0x0124
     cb2:	84 31       	cpi	r24, 0x14	; 20
     cb4:	91 05       	cpc	r25, r1
     cb6:	c9 f7       	brne	.-14     	; 0xcaa <Error_Message+0x1e>
	LCD_clearScreen();
     cb8:	0e 94 77 13 	call	0x26ee	; 0x26ee <LCD_clearScreen>
	Timer1_deInit();  /* disable the Timer1 */
     cbc:	0e 94 3d 14 	call	0x287a	; 0x287a <Timer1_deInit>
	mismatches=0;     /* clear number of mismatches */
     cc0:	10 92 19 01 	sts	0x0119, r1
	timer_counter=0;  /* reset counter to be ready for the next timer call */
     cc4:	10 92 24 01 	sts	0x0124, r1
     cc8:	10 92 23 01 	sts	0x0123, r1
}
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <Take_Password>:
 * 1. move the cursor to required place
 * 2. display message
 * 3. gets the password number by number from the keypad
 */
void Take_Password(void)
{
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	2e 97       	sbiw	r28, 0x0e	; 14
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
     ce6:	0e 94 77 13 	call	0x26ee	; 0x26ee <LCD_clearScreen>
	/* Display this string "plz enter pass :" on LCD at the first row */
	LCD_displayString("plz enter pass :");
     cea:	8a e8       	ldi	r24, 0x8A	; 138
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_displayString>

	/* move cursor to the second line to get password from user */
	LCD_moveCursor(1,0);
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <LCD_moveCursor>

	for(counter=0;counter<5;counter++)
     cfa:	10 92 2c 01 	sts	0x012C, r1
     cfe:	9d c0       	rjmp	.+314    	; 0xe3a <Take_Password+0x168>
	{
		/* take any input from user except '+' , '-' and ENTER to avoid wrong character input */
		while((KEYPAD_getPressedKey()==13) || (KEYPAD_getPressedKey()=='+') || (KEYPAD_getPressedKey()=='-')){}
     d00:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <KEYPAD_getPressedKey>
     d04:	8d 30       	cpi	r24, 0x0D	; 13
     d06:	e1 f3       	breq	.-8      	; 0xd00 <Take_Password+0x2e>
     d08:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <KEYPAD_getPressedKey>
     d0c:	8b 32       	cpi	r24, 0x2B	; 43
     d0e:	c1 f3       	breq	.-16     	; 0xd00 <Take_Password+0x2e>
     d10:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <KEYPAD_getPressedKey>
     d14:	8d 32       	cpi	r24, 0x2D	; 45
     d16:	a1 f3       	breq	.-24     	; 0xd00 <Take_Password+0x2e>

		/* Get the pressed key number, if any switch pressed for more than 500 ms it will considered more than one press */
		key = KEYPAD_getPressedKey();
     d18:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <KEYPAD_getPressedKey>
     d1c:	80 93 2d 01 	sts	0x012D, r24
		if((key <= 9) && (key >= 0))
     d20:	80 91 2d 01 	lds	r24, 0x012D
     d24:	8a 30       	cpi	r24, 0x0A	; 10
     d26:	20 f4       	brcc	.+8      	; 0xd30 <Take_Password+0x5e>
		{
			LCD_displayCharacter('*');   /* display the pressed keypad switch hashed using '*' */
     d28:	8a e2       	ldi	r24, 0x2A	; 42
     d2a:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <LCD_displayCharacter>
     d2e:	04 c0       	rjmp	.+8      	; 0xd38 <Take_Password+0x66>
		}
		else
		{
			LCD_displayCharacter(key); /* display the pressed keypad switch */
     d30:	80 91 2d 01 	lds	r24, 0x012D
     d34:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <LCD_displayCharacter>
		}
		password[counter] = key;  /* store the password at its array */
     d38:	80 91 2c 01 	lds	r24, 0x012C
     d3c:	88 2f       	mov	r24, r24
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	20 91 2d 01 	lds	r18, 0x012D
     d44:	fc 01       	movw	r30, r24
     d46:	e4 5e       	subi	r30, 0xE4	; 228
     d48:	fe 4f       	sbci	r31, 0xFE	; 254
     d4a:	20 83       	st	Z, r18
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	aa ef       	ldi	r26, 0xFA	; 250
     d52:	b3 e4       	ldi	r27, 0x43	; 67
     d54:	8b 87       	std	Y+11, r24	; 0x0b
     d56:	9c 87       	std	Y+12, r25	; 0x0c
     d58:	ad 87       	std	Y+13, r26	; 0x0d
     d5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d5c:	6b 85       	ldd	r22, Y+11	; 0x0b
     d5e:	7c 85       	ldd	r23, Y+12	; 0x0c
     d60:	8d 85       	ldd	r24, Y+13	; 0x0d
     d62:	9e 85       	ldd	r25, Y+14	; 0x0e
     d64:	20 e0       	ldi	r18, 0x00	; 0
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	4a ef       	ldi	r20, 0xFA	; 250
     d6a:	54 e4       	ldi	r21, 0x44	; 68
     d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d70:	dc 01       	movw	r26, r24
     d72:	cb 01       	movw	r24, r22
     d74:	8f 83       	std	Y+7, r24	; 0x07
     d76:	98 87       	std	Y+8, r25	; 0x08
     d78:	a9 87       	std	Y+9, r26	; 0x09
     d7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d7c:	6f 81       	ldd	r22, Y+7	; 0x07
     d7e:	78 85       	ldd	r23, Y+8	; 0x08
     d80:	89 85       	ldd	r24, Y+9	; 0x09
     d82:	9a 85       	ldd	r25, Y+10	; 0x0a
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	40 e8       	ldi	r20, 0x80	; 128
     d8a:	5f e3       	ldi	r21, 0x3F	; 63
     d8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d90:	88 23       	and	r24, r24
     d92:	2c f4       	brge	.+10     	; 0xd9e <Take_Password+0xcc>
		__ticks = 1;
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	9e 83       	std	Y+6, r25	; 0x06
     d9a:	8d 83       	std	Y+5, r24	; 0x05
     d9c:	3f c0       	rjmp	.+126    	; 0xe1c <Take_Password+0x14a>
	else if (__tmp > 65535)
     d9e:	6f 81       	ldd	r22, Y+7	; 0x07
     da0:	78 85       	ldd	r23, Y+8	; 0x08
     da2:	89 85       	ldd	r24, Y+9	; 0x09
     da4:	9a 85       	ldd	r25, Y+10	; 0x0a
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	3f ef       	ldi	r19, 0xFF	; 255
     daa:	4f e7       	ldi	r20, 0x7F	; 127
     dac:	57 e4       	ldi	r21, 0x47	; 71
     dae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     db2:	18 16       	cp	r1, r24
     db4:	4c f5       	brge	.+82     	; 0xe08 <Take_Password+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db6:	6b 85       	ldd	r22, Y+11	; 0x0b
     db8:	7c 85       	ldd	r23, Y+12	; 0x0c
     dba:	8d 85       	ldd	r24, Y+13	; 0x0d
     dbc:	9e 85       	ldd	r25, Y+14	; 0x0e
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	40 e2       	ldi	r20, 0x20	; 32
     dc4:	51 e4       	ldi	r21, 0x41	; 65
     dc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dca:	dc 01       	movw	r26, r24
     dcc:	cb 01       	movw	r24, r22
     dce:	bc 01       	movw	r22, r24
     dd0:	cd 01       	movw	r24, r26
     dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	9e 83       	std	Y+6, r25	; 0x06
     ddc:	8d 83       	std	Y+5, r24	; 0x05
     dde:	0f c0       	rjmp	.+30     	; 0xdfe <Take_Password+0x12c>
     de0:	88 ec       	ldi	r24, 0xC8	; 200
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	9c 83       	std	Y+4, r25	; 0x04
     de6:	8b 83       	std	Y+3, r24	; 0x03
     de8:	8b 81       	ldd	r24, Y+3	; 0x03
     dea:	9c 81       	ldd	r25, Y+4	; 0x04
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	f1 f7       	brne	.-4      	; 0xdec <Take_Password+0x11a>
     df0:	9c 83       	std	Y+4, r25	; 0x04
     df2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df4:	8d 81       	ldd	r24, Y+5	; 0x05
     df6:	9e 81       	ldd	r25, Y+6	; 0x06
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	9e 83       	std	Y+6, r25	; 0x06
     dfc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dfe:	8d 81       	ldd	r24, Y+5	; 0x05
     e00:	9e 81       	ldd	r25, Y+6	; 0x06
     e02:	00 97       	sbiw	r24, 0x00	; 0
     e04:	69 f7       	brne	.-38     	; 0xde0 <Take_Password+0x10e>
     e06:	14 c0       	rjmp	.+40     	; 0xe30 <Take_Password+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e08:	6f 81       	ldd	r22, Y+7	; 0x07
     e0a:	78 85       	ldd	r23, Y+8	; 0x08
     e0c:	89 85       	ldd	r24, Y+9	; 0x09
     e0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e14:	dc 01       	movw	r26, r24
     e16:	cb 01       	movw	r24, r22
     e18:	9e 83       	std	Y+6, r25	; 0x06
     e1a:	8d 83       	std	Y+5, r24	; 0x05
     e1c:	8d 81       	ldd	r24, Y+5	; 0x05
     e1e:	9e 81       	ldd	r25, Y+6	; 0x06
     e20:	9a 83       	std	Y+2, r25	; 0x02
     e22:	89 83       	std	Y+1, r24	; 0x01
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	9a 81       	ldd	r25, Y+2	; 0x02
     e28:	01 97       	sbiw	r24, 0x01	; 1
     e2a:	f1 f7       	brne	.-4      	; 0xe28 <Take_Password+0x156>
     e2c:	9a 83       	std	Y+2, r25	; 0x02
     e2e:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayString("plz enter pass :");

	/* move cursor to the second line to get password from user */
	LCD_moveCursor(1,0);

	for(counter=0;counter<5;counter++)
     e30:	80 91 2c 01 	lds	r24, 0x012C
     e34:	8f 5f       	subi	r24, 0xFF	; 255
     e36:	80 93 2c 01 	sts	0x012C, r24
     e3a:	80 91 2c 01 	lds	r24, 0x012C
     e3e:	85 30       	cpi	r24, 0x05	; 5
     e40:	08 f4       	brcc	.+2      	; 0xe44 <Take_Password+0x172>
     e42:	5e cf       	rjmp	.-324    	; 0xd00 <Take_Password+0x2e>
		}
		password[counter] = key;  /* store the password at its array */
		_delay_ms(500); /* Press time */
	}

	password[5] = '#';  /* put hash sign in the end of the array to send it with Uart*/
     e44:	83 e2       	ldi	r24, 0x23	; 35
     e46:	80 93 21 01 	sts	0x0121, r24
	password[6] = '\0'; /* end of string */
     e4a:	10 92 22 01 	sts	0x0122, r1

	/* any key rather than ENTER will not be accepted after entering the password which is 5 numbers */
	while(KEYPAD_getPressedKey()!=13){}
     e4e:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <KEYPAD_getPressedKey>
     e52:	8d 30       	cpi	r24, 0x0D	; 13
     e54:	e1 f7       	brne	.-8      	; 0xe4e <Take_Password+0x17c>

	LCD_clearScreen();
     e56:	0e 94 77 13 	call	0x26ee	; 0x26ee <LCD_clearScreen>
}
     e5a:	2e 96       	adiw	r28, 0x0e	; 14
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	cf 91       	pop	r28
     e68:	df 91       	pop	r29
     e6a:	08 95       	ret

00000e6c <Door_Unlocking>:
 * 1. starts the timer
 * 2. shows the state of the door
 * 3. after the required time it clears the screen and stops the timer
 */
void Door_Unlocking(void)
{
     e6c:	df 93       	push	r29
     e6e:	cf 93       	push	r28
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
	/* Display this string "Door Unlocking" on LCD at the first row */
	LCD_displayString("Door Unlocking");
     e74:	8b e9       	ldi	r24, 0x9B	; 155
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_displayString>
	Timer1_init(&TIMER1_Config); /* initialize Timer1 driver by sending configuration structure*/
     e7c:	8c e0       	ldi	r24, 0x0C	; 12
     e7e:	91 e0       	ldi	r25, 0x01	; 1
     e80:	0e 94 e7 13 	call	0x27ce	; 0x27ce <Timer1_init>
	while(timer_counter!=5){} /* 15 seconds */
     e84:	80 91 23 01 	lds	r24, 0x0123
     e88:	90 91 24 01 	lds	r25, 0x0124
     e8c:	85 30       	cpi	r24, 0x05	; 5
     e8e:	91 05       	cpc	r25, r1
     e90:	c9 f7       	brne	.-14     	; 0xe84 <Door_Unlocking+0x18>
	LCD_clearScreen();
     e92:	0e 94 77 13 	call	0x26ee	; 0x26ee <LCD_clearScreen>
	Timer1_deInit(); /* disable the Timer1 */
     e96:	0e 94 3d 14 	call	0x287a	; 0x287a <Timer1_deInit>
	timer_counter=0; /* reset counter to be ready for the next timer call */
     e9a:	10 92 24 01 	sts	0x0124, r1
     e9e:	10 92 23 01 	sts	0x0123, r1

	/* Display this string "Door is Opened" on LCD at the first row */
	LCD_displayString("Door is Opened");
     ea2:	8a ea       	ldi	r24, 0xAA	; 170
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_displayString>
	Timer1_init(&TIMER1_Config); /* initialize Timer1 driver by sending configuration structure*/
     eaa:	8c e0       	ldi	r24, 0x0C	; 12
     eac:	91 e0       	ldi	r25, 0x01	; 1
     eae:	0e 94 e7 13 	call	0x27ce	; 0x27ce <Timer1_init>
	while(timer_counter!=1){} /* 3 seconds */
     eb2:	80 91 23 01 	lds	r24, 0x0123
     eb6:	90 91 24 01 	lds	r25, 0x0124
     eba:	81 30       	cpi	r24, 0x01	; 1
     ebc:	91 05       	cpc	r25, r1
     ebe:	c9 f7       	brne	.-14     	; 0xeb2 <Door_Unlocking+0x46>
	LCD_clearScreen();
     ec0:	0e 94 77 13 	call	0x26ee	; 0x26ee <LCD_clearScreen>
	Timer1_deInit(); /* disable the Timer1 */
     ec4:	0e 94 3d 14 	call	0x287a	; 0x287a <Timer1_deInit>
	timer_counter=0; /* reset counter to be ready for the next timer call */
     ec8:	10 92 24 01 	sts	0x0124, r1
     ecc:	10 92 23 01 	sts	0x0123, r1

	/* Display this string "Door is Locking" on LCD at the first row */
	LCD_displayString("Door is Locking");
     ed0:	89 eb       	ldi	r24, 0xB9	; 185
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_displayString>
	Timer1_init(&TIMER1_Config);
     ed8:	8c e0       	ldi	r24, 0x0C	; 12
     eda:	91 e0       	ldi	r25, 0x01	; 1
     edc:	0e 94 e7 13 	call	0x27ce	; 0x27ce <Timer1_init>
	while(timer_counter!=5){} /* 15 seconds */
     ee0:	80 91 23 01 	lds	r24, 0x0123
     ee4:	90 91 24 01 	lds	r25, 0x0124
     ee8:	85 30       	cpi	r24, 0x05	; 5
     eea:	91 05       	cpc	r25, r1
     eec:	c9 f7       	brne	.-14     	; 0xee0 <Door_Unlocking+0x74>

	LCD_clearScreen();
     eee:	0e 94 77 13 	call	0x26ee	; 0x26ee <LCD_clearScreen>
	Timer1_deInit(); /* disable the Timer1 */
     ef2:	0e 94 3d 14 	call	0x287a	; 0x287a <Timer1_deInit>
	timer_counter=0; /* reset counter to be ready for the next timer call */
     ef6:	10 92 24 01 	sts	0x0124, r1
     efa:	10 92 23 01 	sts	0x0123, r1
	mismatches=0;    /* clear number of mismatches */
     efe:	10 92 19 01 	sts	0x0119, r1
}
     f02:	cf 91       	pop	r28
     f04:	df 91       	pop	r29
     f06:	08 95       	ret

00000f08 <First_Menu>:
 * 3. gets the password number by number from the keypad
 * 4. sends the first password to the control ECU through UART
 * 5. asks for entering the password again then sends it to the control ECU
 */
void First_Menu(void)
{
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	6c 97       	sbiw	r28, 0x1c	; 28
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
	/* Display this string "plz enter pass :" on LCD at the first row */
	LCD_displayString("plz enter pass :");
     f1c:	8a e8       	ldi	r24, 0x8A	; 138
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_displayString>

	/* move cursor to the second line to get password from user */
	LCD_moveCursor(1,0);
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	60 e0       	ldi	r22, 0x00	; 0
     f28:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <LCD_moveCursor>

	for(counter=0;counter<5;counter++)
     f2c:	10 92 2c 01 	sts	0x012C, r1
     f30:	95 c0       	rjmp	.+298    	; 0x105c <First_Menu+0x154>
	{
		/* take any input from user except ENTER to avoid wrong character input */
		while(KEYPAD_getPressedKey()==13){}
     f32:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <KEYPAD_getPressedKey>
     f36:	8d 30       	cpi	r24, 0x0D	; 13
     f38:	e1 f3       	breq	.-8      	; 0xf32 <First_Menu+0x2a>

		/* Get the pressed key number, if any switch pressed for more than 500 ms it will considered more than one press */
		key = KEYPAD_getPressedKey();
     f3a:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <KEYPAD_getPressedKey>
     f3e:	80 93 2d 01 	sts	0x012D, r24
		if((key <= 9) && (key >= 0))
     f42:	80 91 2d 01 	lds	r24, 0x012D
     f46:	8a 30       	cpi	r24, 0x0A	; 10
     f48:	20 f4       	brcc	.+8      	; 0xf52 <First_Menu+0x4a>
		{
			LCD_displayCharacter('*');   /* display the pressed keypad switch hashed using '*' */
     f4a:	8a e2       	ldi	r24, 0x2A	; 42
     f4c:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <LCD_displayCharacter>
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <First_Menu+0x52>
		}
		else
		{
			LCD_displayCharacter(key);   /* display the pressed keypad switch */
     f52:	80 91 2d 01 	lds	r24, 0x012D
     f56:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <LCD_displayCharacter>
		}
		first_password[counter] = key;   /* store the first password at its array */
     f5a:	80 91 2c 01 	lds	r24, 0x012C
     f5e:	88 2f       	mov	r24, r24
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	20 91 2d 01 	lds	r18, 0x012D
     f66:	fc 01       	movw	r30, r24
     f68:	e2 5d       	subi	r30, 0xD2	; 210
     f6a:	fe 4f       	sbci	r31, 0xFE	; 254
     f6c:	20 83       	st	Z, r18
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	aa ef       	ldi	r26, 0xFA	; 250
     f74:	b3 e4       	ldi	r27, 0x43	; 67
     f76:	89 8f       	std	Y+25, r24	; 0x19
     f78:	9a 8f       	std	Y+26, r25	; 0x1a
     f7a:	ab 8f       	std	Y+27, r26	; 0x1b
     f7c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f7e:	69 8d       	ldd	r22, Y+25	; 0x19
     f80:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f82:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f84:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	4a ef       	ldi	r20, 0xFA	; 250
     f8c:	54 e4       	ldi	r21, 0x44	; 68
     f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	8d 8b       	std	Y+21, r24	; 0x15
     f98:	9e 8b       	std	Y+22, r25	; 0x16
     f9a:	af 8b       	std	Y+23, r26	; 0x17
     f9c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f9e:	6d 89       	ldd	r22, Y+21	; 0x15
     fa0:	7e 89       	ldd	r23, Y+22	; 0x16
     fa2:	8f 89       	ldd	r24, Y+23	; 0x17
     fa4:	98 8d       	ldd	r25, Y+24	; 0x18
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	40 e8       	ldi	r20, 0x80	; 128
     fac:	5f e3       	ldi	r21, 0x3F	; 63
     fae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fb2:	88 23       	and	r24, r24
     fb4:	2c f4       	brge	.+10     	; 0xfc0 <First_Menu+0xb8>
		__ticks = 1;
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	9c 8b       	std	Y+20, r25	; 0x14
     fbc:	8b 8b       	std	Y+19, r24	; 0x13
     fbe:	3f c0       	rjmp	.+126    	; 0x103e <First_Menu+0x136>
	else if (__tmp > 65535)
     fc0:	6d 89       	ldd	r22, Y+21	; 0x15
     fc2:	7e 89       	ldd	r23, Y+22	; 0x16
     fc4:	8f 89       	ldd	r24, Y+23	; 0x17
     fc6:	98 8d       	ldd	r25, Y+24	; 0x18
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	3f ef       	ldi	r19, 0xFF	; 255
     fcc:	4f e7       	ldi	r20, 0x7F	; 127
     fce:	57 e4       	ldi	r21, 0x47	; 71
     fd0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fd4:	18 16       	cp	r1, r24
     fd6:	4c f5       	brge	.+82     	; 0x102a <First_Menu+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd8:	69 8d       	ldd	r22, Y+25	; 0x19
     fda:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fdc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fde:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	40 e2       	ldi	r20, 0x20	; 32
     fe6:	51 e4       	ldi	r21, 0x41	; 65
     fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fec:	dc 01       	movw	r26, r24
     fee:	cb 01       	movw	r24, r22
     ff0:	bc 01       	movw	r22, r24
     ff2:	cd 01       	movw	r24, r26
     ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	9c 8b       	std	Y+20, r25	; 0x14
     ffe:	8b 8b       	std	Y+19, r24	; 0x13
    1000:	0f c0       	rjmp	.+30     	; 0x1020 <First_Menu+0x118>
    1002:	88 ec       	ldi	r24, 0xC8	; 200
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	9a 8b       	std	Y+18, r25	; 0x12
    1008:	89 8b       	std	Y+17, r24	; 0x11
    100a:	89 89       	ldd	r24, Y+17	; 0x11
    100c:	9a 89       	ldd	r25, Y+18	; 0x12
    100e:	01 97       	sbiw	r24, 0x01	; 1
    1010:	f1 f7       	brne	.-4      	; 0x100e <First_Menu+0x106>
    1012:	9a 8b       	std	Y+18, r25	; 0x12
    1014:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1016:	8b 89       	ldd	r24, Y+19	; 0x13
    1018:	9c 89       	ldd	r25, Y+20	; 0x14
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	9c 8b       	std	Y+20, r25	; 0x14
    101e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1020:	8b 89       	ldd	r24, Y+19	; 0x13
    1022:	9c 89       	ldd	r25, Y+20	; 0x14
    1024:	00 97       	sbiw	r24, 0x00	; 0
    1026:	69 f7       	brne	.-38     	; 0x1002 <First_Menu+0xfa>
    1028:	14 c0       	rjmp	.+40     	; 0x1052 <First_Menu+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    102a:	6d 89       	ldd	r22, Y+21	; 0x15
    102c:	7e 89       	ldd	r23, Y+22	; 0x16
    102e:	8f 89       	ldd	r24, Y+23	; 0x17
    1030:	98 8d       	ldd	r25, Y+24	; 0x18
    1032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	9c 8b       	std	Y+20, r25	; 0x14
    103c:	8b 8b       	std	Y+19, r24	; 0x13
    103e:	8b 89       	ldd	r24, Y+19	; 0x13
    1040:	9c 89       	ldd	r25, Y+20	; 0x14
    1042:	98 8b       	std	Y+16, r25	; 0x10
    1044:	8f 87       	std	Y+15, r24	; 0x0f
    1046:	8f 85       	ldd	r24, Y+15	; 0x0f
    1048:	98 89       	ldd	r25, Y+16	; 0x10
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	f1 f7       	brne	.-4      	; 0x104a <First_Menu+0x142>
    104e:	98 8b       	std	Y+16, r25	; 0x10
    1050:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_displayString("plz enter pass :");

	/* move cursor to the second line to get password from user */
	LCD_moveCursor(1,0);

	for(counter=0;counter<5;counter++)
    1052:	80 91 2c 01 	lds	r24, 0x012C
    1056:	8f 5f       	subi	r24, 0xFF	; 255
    1058:	80 93 2c 01 	sts	0x012C, r24
    105c:	80 91 2c 01 	lds	r24, 0x012C
    1060:	85 30       	cpi	r24, 0x05	; 5
    1062:	08 f4       	brcc	.+2      	; 0x1066 <First_Menu+0x15e>
    1064:	66 cf       	rjmp	.-308    	; 0xf32 <First_Menu+0x2a>
		}
		first_password[counter] = key;   /* store the first password at its array */
		_delay_ms(500); /* Press time */
	}

	first_password[5] = '#';   /* put hash sign in the end of the array to send it with Uart*/
    1066:	83 e2       	ldi	r24, 0x23	; 35
    1068:	80 93 33 01 	sts	0x0133, r24
	first_password[6] = '\0';  /* end of string */
    106c:	10 92 34 01 	sts	0x0134, r1

	UART_sendByte(ADD_PASS);   /* send message to control ECu to ask it to add password */
    1070:	84 e0       	ldi	r24, 0x04	; 4
    1072:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <UART_sendByte>
	for(counter=0;counter<5;counter++)
    1076:	10 92 2c 01 	sts	0x012C, r1
    107a:	0f c0       	rjmp	.+30     	; 0x109a <First_Menu+0x192>
	{
		UART_sendByte(first_password[counter]); /* send the first password to control ECU byte by byte */
    107c:	80 91 2c 01 	lds	r24, 0x012C
    1080:	88 2f       	mov	r24, r24
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	fc 01       	movw	r30, r24
    1086:	e2 5d       	subi	r30, 0xD2	; 210
    1088:	fe 4f       	sbci	r31, 0xFE	; 254
    108a:	80 81       	ld	r24, Z
    108c:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <UART_sendByte>

	first_password[5] = '#';   /* put hash sign in the end of the array to send it with Uart*/
	first_password[6] = '\0';  /* end of string */

	UART_sendByte(ADD_PASS);   /* send message to control ECu to ask it to add password */
	for(counter=0;counter<5;counter++)
    1090:	80 91 2c 01 	lds	r24, 0x012C
    1094:	8f 5f       	subi	r24, 0xFF	; 255
    1096:	80 93 2c 01 	sts	0x012C, r24
    109a:	80 91 2c 01 	lds	r24, 0x012C
    109e:	85 30       	cpi	r24, 0x05	; 5
    10a0:	68 f3       	brcs	.-38     	; 0x107c <First_Menu+0x174>
	{
		UART_sendByte(first_password[counter]); /* send the first password to control ECU byte by byte */
	}

	/* any key rather than ENTER will not be accepted after entering the password which is 5 numbers */
	while(KEYPAD_getPressedKey()!=13){}
    10a2:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <KEYPAD_getPressedKey>
    10a6:	8d 30       	cpi	r24, 0x0D	; 13
    10a8:	e1 f7       	brne	.-8      	; 0x10a2 <First_Menu+0x19a>

	LCD_clearScreen();
    10aa:	0e 94 77 13 	call	0x26ee	; 0x26ee <LCD_clearScreen>

	/* Display this string "plz re-enter the" on LCD at the first row */
	LCD_displayString("plz re-enter the");
    10ae:	89 ec       	ldi	r24, 0xC9	; 201
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_displayString>

	/* move cursor to the second line to get password from user */
	LCD_moveCursor(1,0);
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	60 e0       	ldi	r22, 0x00	; 0
    10ba:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <LCD_moveCursor>

	/* Display this string "same pass: " on LCD at the first row */
	LCD_displayString("same pass: ");
    10be:	8a ed       	ldi	r24, 0xDA	; 218
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_displayString>

	for(counter=0;counter<5;counter++)
    10c6:	10 92 2c 01 	sts	0x012C, r1
    10ca:	95 c0       	rjmp	.+298    	; 0x11f6 <First_Menu+0x2ee>
	{
		/* take any input from user except ENTER to avoid wrong character input */
		while(KEYPAD_getPressedKey()==13){}
    10cc:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <KEYPAD_getPressedKey>
    10d0:	8d 30       	cpi	r24, 0x0D	; 13
    10d2:	e1 f3       	breq	.-8      	; 0x10cc <First_Menu+0x1c4>

		/* Get the pressed key number, if any switch pressed for more than 500 ms it will considered more than one press */
		key = KEYPAD_getPressedKey();
    10d4:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <KEYPAD_getPressedKey>
    10d8:	80 93 2d 01 	sts	0x012D, r24

		if((key <= 9) && (key >= 0))
    10dc:	80 91 2d 01 	lds	r24, 0x012D
    10e0:	8a 30       	cpi	r24, 0x0A	; 10
    10e2:	20 f4       	brcc	.+8      	; 0x10ec <First_Menu+0x1e4>
		{
			LCD_displayCharacter('*');   /* display the pressed keypad switch hashed using '*' */
    10e4:	8a e2       	ldi	r24, 0x2A	; 42
    10e6:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <LCD_displayCharacter>
    10ea:	04 c0       	rjmp	.+8      	; 0x10f4 <First_Menu+0x1ec>
		}
		else
		{
			LCD_displayCharacter(key); /* display the pressed keypad switch */
    10ec:	80 91 2d 01 	lds	r24, 0x012D
    10f0:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <LCD_displayCharacter>
		}

		second_password[counter] = key;  /* store the second password at its array */
    10f4:	80 91 2c 01 	lds	r24, 0x012C
    10f8:	88 2f       	mov	r24, r24
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	20 91 2d 01 	lds	r18, 0x012D
    1100:	fc 01       	movw	r30, r24
    1102:	eb 5d       	subi	r30, 0xDB	; 219
    1104:	fe 4f       	sbci	r31, 0xFE	; 254
    1106:	20 83       	st	Z, r18
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	aa ef       	ldi	r26, 0xFA	; 250
    110e:	b3 e4       	ldi	r27, 0x43	; 67
    1110:	8b 87       	std	Y+11, r24	; 0x0b
    1112:	9c 87       	std	Y+12, r25	; 0x0c
    1114:	ad 87       	std	Y+13, r26	; 0x0d
    1116:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1118:	6b 85       	ldd	r22, Y+11	; 0x0b
    111a:	7c 85       	ldd	r23, Y+12	; 0x0c
    111c:	8d 85       	ldd	r24, Y+13	; 0x0d
    111e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	4a ef       	ldi	r20, 0xFA	; 250
    1126:	54 e4       	ldi	r21, 0x44	; 68
    1128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	8f 83       	std	Y+7, r24	; 0x07
    1132:	98 87       	std	Y+8, r25	; 0x08
    1134:	a9 87       	std	Y+9, r26	; 0x09
    1136:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1138:	6f 81       	ldd	r22, Y+7	; 0x07
    113a:	78 85       	ldd	r23, Y+8	; 0x08
    113c:	89 85       	ldd	r24, Y+9	; 0x09
    113e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e8       	ldi	r20, 0x80	; 128
    1146:	5f e3       	ldi	r21, 0x3F	; 63
    1148:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    114c:	88 23       	and	r24, r24
    114e:	2c f4       	brge	.+10     	; 0x115a <First_Menu+0x252>
		__ticks = 1;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	9e 83       	std	Y+6, r25	; 0x06
    1156:	8d 83       	std	Y+5, r24	; 0x05
    1158:	3f c0       	rjmp	.+126    	; 0x11d8 <First_Menu+0x2d0>
	else if (__tmp > 65535)
    115a:	6f 81       	ldd	r22, Y+7	; 0x07
    115c:	78 85       	ldd	r23, Y+8	; 0x08
    115e:	89 85       	ldd	r24, Y+9	; 0x09
    1160:	9a 85       	ldd	r25, Y+10	; 0x0a
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	3f ef       	ldi	r19, 0xFF	; 255
    1166:	4f e7       	ldi	r20, 0x7F	; 127
    1168:	57 e4       	ldi	r21, 0x47	; 71
    116a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    116e:	18 16       	cp	r1, r24
    1170:	4c f5       	brge	.+82     	; 0x11c4 <First_Menu+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1172:	6b 85       	ldd	r22, Y+11	; 0x0b
    1174:	7c 85       	ldd	r23, Y+12	; 0x0c
    1176:	8d 85       	ldd	r24, Y+13	; 0x0d
    1178:	9e 85       	ldd	r25, Y+14	; 0x0e
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	40 e2       	ldi	r20, 0x20	; 32
    1180:	51 e4       	ldi	r21, 0x41	; 65
    1182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	bc 01       	movw	r22, r24
    118c:	cd 01       	movw	r24, r26
    118e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	9e 83       	std	Y+6, r25	; 0x06
    1198:	8d 83       	std	Y+5, r24	; 0x05
    119a:	0f c0       	rjmp	.+30     	; 0x11ba <First_Menu+0x2b2>
    119c:	88 ec       	ldi	r24, 0xC8	; 200
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	9c 83       	std	Y+4, r25	; 0x04
    11a2:	8b 83       	std	Y+3, r24	; 0x03
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	9c 81       	ldd	r25, Y+4	; 0x04
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	f1 f7       	brne	.-4      	; 0x11a8 <First_Menu+0x2a0>
    11ac:	9c 83       	std	Y+4, r25	; 0x04
    11ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b0:	8d 81       	ldd	r24, Y+5	; 0x05
    11b2:	9e 81       	ldd	r25, Y+6	; 0x06
    11b4:	01 97       	sbiw	r24, 0x01	; 1
    11b6:	9e 83       	std	Y+6, r25	; 0x06
    11b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ba:	8d 81       	ldd	r24, Y+5	; 0x05
    11bc:	9e 81       	ldd	r25, Y+6	; 0x06
    11be:	00 97       	sbiw	r24, 0x00	; 0
    11c0:	69 f7       	brne	.-38     	; 0x119c <First_Menu+0x294>
    11c2:	14 c0       	rjmp	.+40     	; 0x11ec <First_Menu+0x2e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c4:	6f 81       	ldd	r22, Y+7	; 0x07
    11c6:	78 85       	ldd	r23, Y+8	; 0x08
    11c8:	89 85       	ldd	r24, Y+9	; 0x09
    11ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    11cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	9e 83       	std	Y+6, r25	; 0x06
    11d6:	8d 83       	std	Y+5, r24	; 0x05
    11d8:	8d 81       	ldd	r24, Y+5	; 0x05
    11da:	9e 81       	ldd	r25, Y+6	; 0x06
    11dc:	9a 83       	std	Y+2, r25	; 0x02
    11de:	89 83       	std	Y+1, r24	; 0x01
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	9a 81       	ldd	r25, Y+2	; 0x02
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <First_Menu+0x2dc>
    11e8:	9a 83       	std	Y+2, r25	; 0x02
    11ea:	89 83       	std	Y+1, r24	; 0x01
	LCD_moveCursor(1,0);

	/* Display this string "same pass: " on LCD at the first row */
	LCD_displayString("same pass: ");

	for(counter=0;counter<5;counter++)
    11ec:	80 91 2c 01 	lds	r24, 0x012C
    11f0:	8f 5f       	subi	r24, 0xFF	; 255
    11f2:	80 93 2c 01 	sts	0x012C, r24
    11f6:	80 91 2c 01 	lds	r24, 0x012C
    11fa:	85 30       	cpi	r24, 0x05	; 5
    11fc:	08 f4       	brcc	.+2      	; 0x1200 <First_Menu+0x2f8>
    11fe:	66 cf       	rjmp	.-308    	; 0x10cc <First_Menu+0x1c4>

		second_password[counter] = key;  /* store the second password at its array */
		_delay_ms(500); /* Press time */
	}

	second_password[5] = '#';   /* put hash sign in the end of the array to send it with Uart*/
    1200:	83 e2       	ldi	r24, 0x23	; 35
    1202:	80 93 2a 01 	sts	0x012A, r24
	second_password[6] = '\0';  /* end of string */
    1206:	10 92 2b 01 	sts	0x012B, r1

	for(counter=0;counter<5;counter++)
    120a:	10 92 2c 01 	sts	0x012C, r1
    120e:	0f c0       	rjmp	.+30     	; 0x122e <First_Menu+0x326>
	{
		UART_sendByte(second_password[counter]); /* send the second password to control ECU byte by byte */
    1210:	80 91 2c 01 	lds	r24, 0x012C
    1214:	88 2f       	mov	r24, r24
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	fc 01       	movw	r30, r24
    121a:	eb 5d       	subi	r30, 0xDB	; 219
    121c:	fe 4f       	sbci	r31, 0xFE	; 254
    121e:	80 81       	ld	r24, Z
    1220:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <UART_sendByte>
	}

	second_password[5] = '#';   /* put hash sign in the end of the array to send it with Uart*/
	second_password[6] = '\0';  /* end of string */

	for(counter=0;counter<5;counter++)
    1224:	80 91 2c 01 	lds	r24, 0x012C
    1228:	8f 5f       	subi	r24, 0xFF	; 255
    122a:	80 93 2c 01 	sts	0x012C, r24
    122e:	80 91 2c 01 	lds	r24, 0x012C
    1232:	85 30       	cpi	r24, 0x05	; 5
    1234:	68 f3       	brcs	.-38     	; 0x1210 <First_Menu+0x308>
	{
		UART_sendByte(second_password[counter]); /* send the second password to control ECU byte by byte */
	}

	/* any key rather than ENTER will not be accepted after entering the password which is 5 numbers */
	while(KEYPAD_getPressedKey()!=13){}
    1236:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <KEYPAD_getPressedKey>
    123a:	8d 30       	cpi	r24, 0x0D	; 13
    123c:	e1 f7       	brne	.-8      	; 0x1236 <First_Menu+0x32e>
	LCD_clearScreen();
    123e:	0e 94 77 13 	call	0x26ee	; 0x26ee <LCD_clearScreen>
}
    1242:	6c 96       	adiw	r28, 0x1c	; 28
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	f8 94       	cli
    1248:	de bf       	out	0x3e, r29	; 62
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	cd bf       	out	0x3d, r28	; 61
    124e:	cf 91       	pop	r28
    1250:	df 91       	pop	r29
    1252:	08 95       	ret

00001254 <Main_Menu>:
 * 4. if the password matched another function will be called depending on user choice in number 1.
 * 5. if the passwords unmatched the user will be asked to enter the correct password
 * 6. if number of mismatches = 3 the buzzer will ring and error message will be shown on LCD
 */
void Main_Menu(void)
{
    1254:	df 93       	push	r29
    1256:	cf 93       	push	r28
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
	LCD_moveCursor(0,0);
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	60 e0       	ldi	r22, 0x00	; 0
    1260:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <LCD_moveCursor>
	/* Display this string "+ : Open Door" on LCD at the first row */
	LCD_displayString("+ : Open Door");
    1264:	86 ee       	ldi	r24, 0xE6	; 230
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_displayString>

	LCD_moveCursor(1,0);
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	60 e0       	ldi	r22, 0x00	; 0
    1270:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <LCD_moveCursor>

	/* Display this string "- : Change Pass" on LCD at the first row */
	LCD_displayString("- : Change Pass");
    1274:	84 ef       	ldi	r24, 0xF4	; 244
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_displayString>

	/* take any input from user except '+' and '-' to avoid wrong character input */
	while((KEYPAD_getPressedKey()!='+') && (KEYPAD_getPressedKey()!='-')){}
    127c:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <KEYPAD_getPressedKey>
    1280:	8b 32       	cpi	r24, 0x2B	; 43
    1282:	21 f0       	breq	.+8      	; 0x128c <Main_Menu+0x38>
    1284:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <KEYPAD_getPressedKey>
    1288:	8d 32       	cpi	r24, 0x2D	; 45
    128a:	c1 f7       	brne	.-16     	; 0x127c <Main_Menu+0x28>

	/* Get the pressed key number, if any switch pressed for more than 500 ms it will considered more than one press */
	key = KEYPAD_getPressedKey();
    128c:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <KEYPAD_getPressedKey>
    1290:	80 93 2d 01 	sts	0x012D, r24

	if(key == '+')
    1294:	80 91 2d 01 	lds	r24, 0x012D
    1298:	8b 32       	cpi	r24, 0x2B	; 43
    129a:	e9 f4       	brne	.+58     	; 0x12d6 <Main_Menu+0x82>
	{
		/* call the function that controls door opening */
		Open_Door();
    129c:	0e 94 8b 09 	call	0x1316	; 0x1316 <Open_Door>
    12a0:	10 c0       	rjmp	.+32     	; 0x12c2 <Main_Menu+0x6e>

		/* check if the password does not match with the one stored at EEPROM */
		while(UART_recieveByte()==REDO)
		{
			/* increments number of mismatches */
			mismatches++;
    12a2:	80 91 19 01 	lds	r24, 0x0119
    12a6:	8f 5f       	subi	r24, 0xFF	; 255
    12a8:	80 93 19 01 	sts	0x0119, r24

			/* when number of mismatches reach 3, the buzzer will ring and error message will be displayed on LCD */
			if (mismatches == 3)
    12ac:	80 91 19 01 	lds	r24, 0x0119
    12b0:	83 30       	cpi	r24, 0x03	; 3
    12b2:	19 f4       	brne	.+6      	; 0x12ba <Main_Menu+0x66>
			{
				Error_Message();
    12b4:	0e 94 46 06 	call	0xc8c	; 0xc8c <Error_Message>
    12b8:	2b c0       	rjmp	.+86     	; 0x1310 <Main_Menu+0xbc>

			else
			{
				/* if number of mismatches is still less than 3, then the user will be
				 * asked again to enter correct password */
				Wrong_Password_Message();
    12ba:	0e 94 b3 05 	call	0xb66	; 0xb66 <Wrong_Password_Message>
				Open_Door();
    12be:	0e 94 8b 09 	call	0x1316	; 0x1316 <Open_Door>
	{
		/* call the function that controls door opening */
		Open_Door();

		/* check if the password does not match with the one stored at EEPROM */
		while(UART_recieveByte()==REDO)
    12c2:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <UART_recieveByte>
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	61 f3       	breq	.-40     	; 0x12a2 <Main_Menu+0x4e>

		}

		/* when the user enters the correct password and number of mismatches
		 * is still less than 3 the door will be unlocked*/
		UART_sendByte(OPEN_DOOR);
    12ca:	82 e0       	ldi	r24, 0x02	; 2
    12cc:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <UART_sendByte>
		Door_Unlocking();
    12d0:	0e 94 36 07 	call	0xe6c	; 0xe6c <Door_Unlocking>
    12d4:	1d c0       	rjmp	.+58     	; 0x1310 <Main_Menu+0xbc>
	}

	else if (key == '-')
    12d6:	80 91 2d 01 	lds	r24, 0x012D
    12da:	8d 32       	cpi	r24, 0x2D	; 45
    12dc:	c9 f4       	brne	.+50     	; 0x1310 <Main_Menu+0xbc>
	{
		/* call the function that controls password changing */
		Change_Password();
    12de:	0e 94 ad 09 	call	0x135a	; 0x135a <Change_Password>
    12e2:	10 c0       	rjmp	.+32     	; 0x1304 <Main_Menu+0xb0>

		/* check if the password does not match with the one stored at EEPROM */
		while(UART_recieveByte()==REDO)
		{
			/* increments number of mismatches */
			mismatches++;
    12e4:	80 91 19 01 	lds	r24, 0x0119
    12e8:	8f 5f       	subi	r24, 0xFF	; 255
    12ea:	80 93 19 01 	sts	0x0119, r24

			/* when number of mismatches reach 3, the buzzer will ring and error message will be displayed on LCD */
			if (mismatches == 3)
    12ee:	80 91 19 01 	lds	r24, 0x0119
    12f2:	83 30       	cpi	r24, 0x03	; 3
    12f4:	19 f4       	brne	.+6      	; 0x12fc <Main_Menu+0xa8>
			{
				Error_Message();
    12f6:	0e 94 46 06 	call	0xc8c	; 0xc8c <Error_Message>
    12fa:	0a c0       	rjmp	.+20     	; 0x1310 <Main_Menu+0xbc>

			else
			{
				/* if number of mismatches is still less than 3, then the user will be
				 * asked again to enter correct password */
				Wrong_Password_Message();
    12fc:	0e 94 b3 05 	call	0xb66	; 0xb66 <Wrong_Password_Message>
				Change_Password();
    1300:	0e 94 ad 09 	call	0x135a	; 0x135a <Change_Password>
	{
		/* call the function that controls password changing */
		Change_Password();

		/* check if the password does not match with the one stored at EEPROM */
		while(UART_recieveByte()==REDO)
    1304:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <UART_recieveByte>
    1308:	81 30       	cpi	r24, 0x01	; 1
    130a:	61 f3       	breq	.-40     	; 0x12e4 <Main_Menu+0x90>
		}

		/* when the user enters the correct password and number of mismatches
		 * is still less than 3 the first menu will be displayed to get
		 * the password which the user wants to add*/
		flag = 0;
    130c:	10 92 18 01 	sts	0x0118, r1
	}
}
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	08 95       	ret

00001316 <Open_Door>:
 * Description :
 * used to get the password from user after choosing open door from main menu
 * then sends it to control ECU byte by byte through UART
 */
void Open_Door(void)
{
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
	/* gets the password number by number from the keypad */
	Take_Password();
    131e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Take_Password>

	/* sends a message to control ECU to get ready for comparing passwords */
	UART_sendByte(CHECK_PASS);
    1322:	85 e0       	ldi	r24, 0x05	; 5
    1324:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <UART_sendByte>

	for(counter=0;counter<5;counter++)
    1328:	10 92 2c 01 	sts	0x012C, r1
    132c:	0f c0       	rjmp	.+30     	; 0x134c <Open_Door+0x36>
	{
		/* sends the password entered byte by byte to control ECU through UART */
		UART_sendByte(password[counter]);
    132e:	80 91 2c 01 	lds	r24, 0x012C
    1332:	88 2f       	mov	r24, r24
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	fc 01       	movw	r30, r24
    1338:	e4 5e       	subi	r30, 0xE4	; 228
    133a:	fe 4f       	sbci	r31, 0xFE	; 254
    133c:	80 81       	ld	r24, Z
    133e:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <UART_sendByte>
	Take_Password();

	/* sends a message to control ECU to get ready for comparing passwords */
	UART_sendByte(CHECK_PASS);

	for(counter=0;counter<5;counter++)
    1342:	80 91 2c 01 	lds	r24, 0x012C
    1346:	8f 5f       	subi	r24, 0xFF	; 255
    1348:	80 93 2c 01 	sts	0x012C, r24
    134c:	80 91 2c 01 	lds	r24, 0x012C
    1350:	85 30       	cpi	r24, 0x05	; 5
    1352:	68 f3       	brcs	.-38     	; 0x132e <Open_Door+0x18>
	{
		/* sends the password entered byte by byte to control ECU through UART */
		UART_sendByte(password[counter]);
	}
}
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <Change_Password>:
 * Description :
 * used to get the password from user after choosing change password from main menu
 * then sends it to control ECU byte by byte through UART
 */
void Change_Password(void)
{
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
	/* gets the password number by number from the keypad */
	Take_Password();
    1362:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Take_Password>

	/* sends a message to control ECU to get ready for comparing passwords */
	UART_sendByte(CHANGE_PASS);
    1366:	83 e0       	ldi	r24, 0x03	; 3
    1368:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <UART_sendByte>

	for(counter=0;counter<5;counter++)
    136c:	10 92 2c 01 	sts	0x012C, r1
    1370:	0f c0       	rjmp	.+30     	; 0x1390 <Change_Password+0x36>
	{
		/* sends the password entered byte by byte to control ECU through UART */
		UART_sendByte(password[counter]);
    1372:	80 91 2c 01 	lds	r24, 0x012C
    1376:	88 2f       	mov	r24, r24
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	fc 01       	movw	r30, r24
    137c:	e4 5e       	subi	r30, 0xE4	; 228
    137e:	fe 4f       	sbci	r31, 0xFE	; 254
    1380:	80 81       	ld	r24, Z
    1382:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <UART_sendByte>
	Take_Password();

	/* sends a message to control ECU to get ready for comparing passwords */
	UART_sendByte(CHANGE_PASS);

	for(counter=0;counter<5;counter++)
    1386:	80 91 2c 01 	lds	r24, 0x012C
    138a:	8f 5f       	subi	r24, 0xFF	; 255
    138c:	80 93 2c 01 	sts	0x012C, r24
    1390:	80 91 2c 01 	lds	r24, 0x012C
    1394:	85 30       	cpi	r24, 0x05	; 5
    1396:	68 f3       	brcs	.-38     	; 0x1372 <Change_Password+0x18>
	{
		/* sends the password entered byte by byte to control ECU through UART */
		UART_sendByte(password[counter]);
	}
}
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	08 95       	ret

0000139e <main>:

/*******************************************************************************
 *                              Main Function                                  *
 *******************************************************************************/
int main(void)
{
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	2a 97       	sbiw	r28, 0x0a	; 10
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	f8 94       	cli
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	cd bf       	out	0x3d, r28	; 61

	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
    13b2:	af e5       	ldi	r26, 0x5F	; 95
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	ef e5       	ldi	r30, 0x5F	; 95
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	80 68       	ori	r24, 0x80	; 128
    13be:	8c 93       	st	X, r24

	/* make count function as a call back function to be called after the timer gets a compare match*/
	Timer1_setCallBack(Count);
    13c0:	83 ea       	ldi	r24, 0xA3	; 163
    13c2:	95 e0       	ldi	r25, 0x05	; 5
    13c4:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <Timer1_setCallBack>

	/* giving values to UART configuration structure*/
	UART_ConfigType Uart_Config = {EIGHT_BITS,NONE,ONE_BIT,9600};
    13c8:	ce 01       	movw	r24, r28
    13ca:	01 96       	adiw	r24, 0x01	; 1
    13cc:	9f 83       	std	Y+7, r25	; 0x07
    13ce:	8e 83       	std	Y+6, r24	; 0x06
    13d0:	e2 e1       	ldi	r30, 0x12	; 18
    13d2:	f1 e0       	ldi	r31, 0x01	; 1
    13d4:	f9 87       	std	Y+9, r31	; 0x09
    13d6:	e8 87       	std	Y+8, r30	; 0x08
    13d8:	f5 e0       	ldi	r31, 0x05	; 5
    13da:	fa 87       	std	Y+10, r31	; 0x0a
    13dc:	e8 85       	ldd	r30, Y+8	; 0x08
    13de:	f9 85       	ldd	r31, Y+9	; 0x09
    13e0:	00 80       	ld	r0, Z
    13e2:	88 85       	ldd	r24, Y+8	; 0x08
    13e4:	99 85       	ldd	r25, Y+9	; 0x09
    13e6:	01 96       	adiw	r24, 0x01	; 1
    13e8:	99 87       	std	Y+9, r25	; 0x09
    13ea:	88 87       	std	Y+8, r24	; 0x08
    13ec:	ee 81       	ldd	r30, Y+6	; 0x06
    13ee:	ff 81       	ldd	r31, Y+7	; 0x07
    13f0:	00 82       	st	Z, r0
    13f2:	8e 81       	ldd	r24, Y+6	; 0x06
    13f4:	9f 81       	ldd	r25, Y+7	; 0x07
    13f6:	01 96       	adiw	r24, 0x01	; 1
    13f8:	9f 83       	std	Y+7, r25	; 0x07
    13fa:	8e 83       	std	Y+6, r24	; 0x06
    13fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    13fe:	91 50       	subi	r25, 0x01	; 1
    1400:	9a 87       	std	Y+10, r25	; 0x0a
    1402:	ea 85       	ldd	r30, Y+10	; 0x0a
    1404:	ee 23       	and	r30, r30
    1406:	51 f7       	brne	.-44     	; 0x13dc <main+0x3e>

	/* initialize UART driver by sending configuration structure*/
	UART_init(&Uart_Config);
    1408:	ce 01       	movw	r24, r28
    140a:	01 96       	adiw	r24, 0x01	; 1
    140c:	0e 94 6e 14 	call	0x28dc	; 0x28dc <UART_init>

	/* Initialize the LCD driver */
	LCD_init();
    1410:	0e 94 56 0e 	call	0x1cac	; 0x1cac <LCD_init>
    1414:	0e c0       	rjmp	.+28     	; 0x1432 <main+0x94>
	while(1)
	{
		while(flag==0)
		{
			/* display the first menu to enter the password twice */
			First_Menu();
    1416:	0e 94 84 07 	call	0xf08	; 0xf08 <First_Menu>

			if(UART_recieveByte()==REDO)
    141a:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <UART_recieveByte>
    141e:	81 30       	cpi	r24, 0x01	; 1
    1420:	29 f4       	brne	.+10     	; 0x142c <main+0x8e>
			{
				/* if the control ECU returned a message of unmatched passwords
            	  then wrong message will be displayed then the first menu will be displayed again */
				Wrong_Password_Message();
    1422:	0e 94 b3 05 	call	0xb66	; 0xb66 <Wrong_Password_Message>
				flag = 0;
    1426:	10 92 18 01 	sts	0x0118, r1
    142a:	03 c0       	rjmp	.+6      	; 0x1432 <main+0x94>

			else
			{
				/* in case of matched passwords then the flag value will be changed to
				 * move from the first menu to main menu */
				flag = 1;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	80 93 18 01 	sts	0x0118, r24
	/* Initialize the LCD driver */
	LCD_init();

	while(1)
	{
		while(flag==0)
    1432:	80 91 18 01 	lds	r24, 0x0118
    1436:	88 23       	and	r24, r24
    1438:	71 f3       	breq	.-36     	; 0x1416 <main+0x78>
				flag = 1;
			}
		}

		/* display the main menu to ask user if he wants to open door or change password */
		Main_Menu();
    143a:	0e 94 2a 09 	call	0x1254	; 0x1254 <Main_Menu>
    143e:	f9 cf       	rjmp	.-14     	; 0x1432 <main+0x94>

00001440 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	00 d0       	rcall	.+0      	; 0x1446 <GPIO_setupPinDirection+0x6>
    1446:	00 d0       	rcall	.+0      	; 0x1448 <GPIO_setupPinDirection+0x8>
    1448:	0f 92       	push	r0
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	89 83       	std	Y+1, r24	; 0x01
    1450:	6a 83       	std	Y+2, r22	; 0x02
    1452:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	88 30       	cpi	r24, 0x08	; 8
    1458:	08 f0       	brcs	.+2      	; 0x145c <GPIO_setupPinDirection+0x1c>
    145a:	d5 c0       	rjmp	.+426    	; 0x1606 <GPIO_setupPinDirection+0x1c6>
    145c:	89 81       	ldd	r24, Y+1	; 0x01
    145e:	84 30       	cpi	r24, 0x04	; 4
    1460:	08 f0       	brcs	.+2      	; 0x1464 <GPIO_setupPinDirection+0x24>
    1462:	d1 c0       	rjmp	.+418    	; 0x1606 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	3d 83       	std	Y+5, r19	; 0x05
    146c:	2c 83       	std	Y+4, r18	; 0x04
    146e:	8c 81       	ldd	r24, Y+4	; 0x04
    1470:	9d 81       	ldd	r25, Y+5	; 0x05
    1472:	81 30       	cpi	r24, 0x01	; 1
    1474:	91 05       	cpc	r25, r1
    1476:	09 f4       	brne	.+2      	; 0x147a <GPIO_setupPinDirection+0x3a>
    1478:	43 c0       	rjmp	.+134    	; 0x1500 <GPIO_setupPinDirection+0xc0>
    147a:	2c 81       	ldd	r18, Y+4	; 0x04
    147c:	3d 81       	ldd	r19, Y+5	; 0x05
    147e:	22 30       	cpi	r18, 0x02	; 2
    1480:	31 05       	cpc	r19, r1
    1482:	2c f4       	brge	.+10     	; 0x148e <GPIO_setupPinDirection+0x4e>
    1484:	8c 81       	ldd	r24, Y+4	; 0x04
    1486:	9d 81       	ldd	r25, Y+5	; 0x05
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	71 f0       	breq	.+28     	; 0x14a8 <GPIO_setupPinDirection+0x68>
    148c:	bc c0       	rjmp	.+376    	; 0x1606 <GPIO_setupPinDirection+0x1c6>
    148e:	2c 81       	ldd	r18, Y+4	; 0x04
    1490:	3d 81       	ldd	r19, Y+5	; 0x05
    1492:	22 30       	cpi	r18, 0x02	; 2
    1494:	31 05       	cpc	r19, r1
    1496:	09 f4       	brne	.+2      	; 0x149a <GPIO_setupPinDirection+0x5a>
    1498:	5f c0       	rjmp	.+190    	; 0x1558 <GPIO_setupPinDirection+0x118>
    149a:	8c 81       	ldd	r24, Y+4	; 0x04
    149c:	9d 81       	ldd	r25, Y+5	; 0x05
    149e:	83 30       	cpi	r24, 0x03	; 3
    14a0:	91 05       	cpc	r25, r1
    14a2:	09 f4       	brne	.+2      	; 0x14a6 <GPIO_setupPinDirection+0x66>
    14a4:	85 c0       	rjmp	.+266    	; 0x15b0 <GPIO_setupPinDirection+0x170>
    14a6:	af c0       	rjmp	.+350    	; 0x1606 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	81 30       	cpi	r24, 0x01	; 1
    14ac:	a1 f4       	brne	.+40     	; 0x14d6 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    14ae:	aa e3       	ldi	r26, 0x3A	; 58
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	ea e3       	ldi	r30, 0x3A	; 58
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	48 2f       	mov	r20, r24
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	02 2e       	mov	r0, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <GPIO_setupPinDirection+0x8c>
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	0a 94       	dec	r0
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <GPIO_setupPinDirection+0x88>
    14d0:	84 2b       	or	r24, r20
    14d2:	8c 93       	st	X, r24
    14d4:	98 c0       	rjmp	.+304    	; 0x1606 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    14d6:	aa e3       	ldi	r26, 0x3A	; 58
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	ea e3       	ldi	r30, 0x3A	; 58
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	48 2f       	mov	r20, r24
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 2e       	mov	r0, r18
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <GPIO_setupPinDirection+0xb4>
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	0a 94       	dec	r0
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <GPIO_setupPinDirection+0xb0>
    14f8:	80 95       	com	r24
    14fa:	84 23       	and	r24, r20
    14fc:	8c 93       	st	X, r24
    14fe:	83 c0       	rjmp	.+262    	; 0x1606 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	81 30       	cpi	r24, 0x01	; 1
    1504:	a1 f4       	brne	.+40     	; 0x152e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1506:	a7 e3       	ldi	r26, 0x37	; 55
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e7 e3       	ldi	r30, 0x37	; 55
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	48 2f       	mov	r20, r24
    1512:	8a 81       	ldd	r24, Y+2	; 0x02
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	02 2e       	mov	r0, r18
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <GPIO_setupPinDirection+0xe4>
    1520:	88 0f       	add	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	0a 94       	dec	r0
    1526:	e2 f7       	brpl	.-8      	; 0x1520 <GPIO_setupPinDirection+0xe0>
    1528:	84 2b       	or	r24, r20
    152a:	8c 93       	st	X, r24
    152c:	6c c0       	rjmp	.+216    	; 0x1606 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    152e:	a7 e3       	ldi	r26, 0x37	; 55
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	e7 e3       	ldi	r30, 0x37	; 55
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	48 2f       	mov	r20, r24
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	02 2e       	mov	r0, r18
    1546:	02 c0       	rjmp	.+4      	; 0x154c <GPIO_setupPinDirection+0x10c>
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	0a 94       	dec	r0
    154e:	e2 f7       	brpl	.-8      	; 0x1548 <GPIO_setupPinDirection+0x108>
    1550:	80 95       	com	r24
    1552:	84 23       	and	r24, r20
    1554:	8c 93       	st	X, r24
    1556:	57 c0       	rjmp	.+174    	; 0x1606 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	a1 f4       	brne	.+40     	; 0x1586 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    155e:	a4 e3       	ldi	r26, 0x34	; 52
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e4 e3       	ldi	r30, 0x34	; 52
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	48 2f       	mov	r20, r24
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	02 2e       	mov	r0, r18
    1576:	02 c0       	rjmp	.+4      	; 0x157c <GPIO_setupPinDirection+0x13c>
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	0a 94       	dec	r0
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <GPIO_setupPinDirection+0x138>
    1580:	84 2b       	or	r24, r20
    1582:	8c 93       	st	X, r24
    1584:	40 c0       	rjmp	.+128    	; 0x1606 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1586:	a4 e3       	ldi	r26, 0x34	; 52
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e4 e3       	ldi	r30, 0x34	; 52
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	48 2f       	mov	r20, r24
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	02 2e       	mov	r0, r18
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <GPIO_setupPinDirection+0x164>
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	0a 94       	dec	r0
    15a6:	e2 f7       	brpl	.-8      	; 0x15a0 <GPIO_setupPinDirection+0x160>
    15a8:	80 95       	com	r24
    15aa:	84 23       	and	r24, r20
    15ac:	8c 93       	st	X, r24
    15ae:	2b c0       	rjmp	.+86     	; 0x1606 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	81 30       	cpi	r24, 0x01	; 1
    15b4:	a1 f4       	brne	.+40     	; 0x15de <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    15b6:	a1 e3       	ldi	r26, 0x31	; 49
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	e1 e3       	ldi	r30, 0x31	; 49
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	48 2f       	mov	r20, r24
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	02 2e       	mov	r0, r18
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <GPIO_setupPinDirection+0x194>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	0a 94       	dec	r0
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <GPIO_setupPinDirection+0x190>
    15d8:	84 2b       	or	r24, r20
    15da:	8c 93       	st	X, r24
    15dc:	14 c0       	rjmp	.+40     	; 0x1606 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    15de:	a1 e3       	ldi	r26, 0x31	; 49
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e1 e3       	ldi	r30, 0x31	; 49
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	48 2f       	mov	r20, r24
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	28 2f       	mov	r18, r24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	02 2e       	mov	r0, r18
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <GPIO_setupPinDirection+0x1bc>
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	0a 94       	dec	r0
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <GPIO_setupPinDirection+0x1b8>
    1600:	80 95       	com	r24
    1602:	84 23       	and	r24, r20
    1604:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	08 95       	ret

00001616 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	00 d0       	rcall	.+0      	; 0x161c <GPIO_writePin+0x6>
    161c:	00 d0       	rcall	.+0      	; 0x161e <GPIO_writePin+0x8>
    161e:	0f 92       	push	r0
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	89 83       	std	Y+1, r24	; 0x01
    1626:	6a 83       	std	Y+2, r22	; 0x02
    1628:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	88 30       	cpi	r24, 0x08	; 8
    162e:	08 f0       	brcs	.+2      	; 0x1632 <GPIO_writePin+0x1c>
    1630:	d5 c0       	rjmp	.+426    	; 0x17dc <GPIO_writePin+0x1c6>
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	84 30       	cpi	r24, 0x04	; 4
    1636:	08 f0       	brcs	.+2      	; 0x163a <GPIO_writePin+0x24>
    1638:	d1 c0       	rjmp	.+418    	; 0x17dc <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	3d 83       	std	Y+5, r19	; 0x05
    1642:	2c 83       	std	Y+4, r18	; 0x04
    1644:	8c 81       	ldd	r24, Y+4	; 0x04
    1646:	9d 81       	ldd	r25, Y+5	; 0x05
    1648:	81 30       	cpi	r24, 0x01	; 1
    164a:	91 05       	cpc	r25, r1
    164c:	09 f4       	brne	.+2      	; 0x1650 <GPIO_writePin+0x3a>
    164e:	43 c0       	rjmp	.+134    	; 0x16d6 <GPIO_writePin+0xc0>
    1650:	2c 81       	ldd	r18, Y+4	; 0x04
    1652:	3d 81       	ldd	r19, Y+5	; 0x05
    1654:	22 30       	cpi	r18, 0x02	; 2
    1656:	31 05       	cpc	r19, r1
    1658:	2c f4       	brge	.+10     	; 0x1664 <GPIO_writePin+0x4e>
    165a:	8c 81       	ldd	r24, Y+4	; 0x04
    165c:	9d 81       	ldd	r25, Y+5	; 0x05
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	71 f0       	breq	.+28     	; 0x167e <GPIO_writePin+0x68>
    1662:	bc c0       	rjmp	.+376    	; 0x17dc <GPIO_writePin+0x1c6>
    1664:	2c 81       	ldd	r18, Y+4	; 0x04
    1666:	3d 81       	ldd	r19, Y+5	; 0x05
    1668:	22 30       	cpi	r18, 0x02	; 2
    166a:	31 05       	cpc	r19, r1
    166c:	09 f4       	brne	.+2      	; 0x1670 <GPIO_writePin+0x5a>
    166e:	5f c0       	rjmp	.+190    	; 0x172e <GPIO_writePin+0x118>
    1670:	8c 81       	ldd	r24, Y+4	; 0x04
    1672:	9d 81       	ldd	r25, Y+5	; 0x05
    1674:	83 30       	cpi	r24, 0x03	; 3
    1676:	91 05       	cpc	r25, r1
    1678:	09 f4       	brne	.+2      	; 0x167c <GPIO_writePin+0x66>
    167a:	85 c0       	rjmp	.+266    	; 0x1786 <GPIO_writePin+0x170>
    167c:	af c0       	rjmp	.+350    	; 0x17dc <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	81 30       	cpi	r24, 0x01	; 1
    1682:	a1 f4       	brne	.+40     	; 0x16ac <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1684:	ab e3       	ldi	r26, 0x3B	; 59
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	eb e3       	ldi	r30, 0x3B	; 59
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	48 2f       	mov	r20, r24
    1690:	8a 81       	ldd	r24, Y+2	; 0x02
    1692:	28 2f       	mov	r18, r24
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	02 2e       	mov	r0, r18
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <GPIO_writePin+0x8c>
    169e:	88 0f       	add	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	0a 94       	dec	r0
    16a4:	e2 f7       	brpl	.-8      	; 0x169e <GPIO_writePin+0x88>
    16a6:	84 2b       	or	r24, r20
    16a8:	8c 93       	st	X, r24
    16aa:	98 c0       	rjmp	.+304    	; 0x17dc <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    16ac:	ab e3       	ldi	r26, 0x3B	; 59
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	eb e3       	ldi	r30, 0x3B	; 59
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	48 2f       	mov	r20, r24
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	02 2e       	mov	r0, r18
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <GPIO_writePin+0xb4>
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	0a 94       	dec	r0
    16cc:	e2 f7       	brpl	.-8      	; 0x16c6 <GPIO_writePin+0xb0>
    16ce:	80 95       	com	r24
    16d0:	84 23       	and	r24, r20
    16d2:	8c 93       	st	X, r24
    16d4:	83 c0       	rjmp	.+262    	; 0x17dc <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    16d6:	8b 81       	ldd	r24, Y+3	; 0x03
    16d8:	81 30       	cpi	r24, 0x01	; 1
    16da:	a1 f4       	brne	.+40     	; 0x1704 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    16dc:	a8 e3       	ldi	r26, 0x38	; 56
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e8 e3       	ldi	r30, 0x38	; 56
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	48 2f       	mov	r20, r24
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	02 2e       	mov	r0, r18
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <GPIO_writePin+0xe4>
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	0a 94       	dec	r0
    16fc:	e2 f7       	brpl	.-8      	; 0x16f6 <GPIO_writePin+0xe0>
    16fe:	84 2b       	or	r24, r20
    1700:	8c 93       	st	X, r24
    1702:	6c c0       	rjmp	.+216    	; 0x17dc <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1704:	a8 e3       	ldi	r26, 0x38	; 56
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e8 e3       	ldi	r30, 0x38	; 56
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	48 2f       	mov	r20, r24
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	02 2e       	mov	r0, r18
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <GPIO_writePin+0x10c>
    171e:	88 0f       	add	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	0a 94       	dec	r0
    1724:	e2 f7       	brpl	.-8      	; 0x171e <GPIO_writePin+0x108>
    1726:	80 95       	com	r24
    1728:	84 23       	and	r24, r20
    172a:	8c 93       	st	X, r24
    172c:	57 c0       	rjmp	.+174    	; 0x17dc <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	81 30       	cpi	r24, 0x01	; 1
    1732:	a1 f4       	brne	.+40     	; 0x175c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1734:	a5 e3       	ldi	r26, 0x35	; 53
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e5 e3       	ldi	r30, 0x35	; 53
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	48 2f       	mov	r20, r24
    1740:	8a 81       	ldd	r24, Y+2	; 0x02
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	02 2e       	mov	r0, r18
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <GPIO_writePin+0x13c>
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	0a 94       	dec	r0
    1754:	e2 f7       	brpl	.-8      	; 0x174e <GPIO_writePin+0x138>
    1756:	84 2b       	or	r24, r20
    1758:	8c 93       	st	X, r24
    175a:	40 c0       	rjmp	.+128    	; 0x17dc <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    175c:	a5 e3       	ldi	r26, 0x35	; 53
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e5 e3       	ldi	r30, 0x35	; 53
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	48 2f       	mov	r20, r24
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	02 2e       	mov	r0, r18
    1774:	02 c0       	rjmp	.+4      	; 0x177a <GPIO_writePin+0x164>
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	0a 94       	dec	r0
    177c:	e2 f7       	brpl	.-8      	; 0x1776 <GPIO_writePin+0x160>
    177e:	80 95       	com	r24
    1780:	84 23       	and	r24, r20
    1782:	8c 93       	st	X, r24
    1784:	2b c0       	rjmp	.+86     	; 0x17dc <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	81 30       	cpi	r24, 0x01	; 1
    178a:	a1 f4       	brne	.+40     	; 0x17b4 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    178c:	a2 e3       	ldi	r26, 0x32	; 50
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	e2 e3       	ldi	r30, 0x32	; 50
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	48 2f       	mov	r20, r24
    1798:	8a 81       	ldd	r24, Y+2	; 0x02
    179a:	28 2f       	mov	r18, r24
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	02 2e       	mov	r0, r18
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <GPIO_writePin+0x194>
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	0a 94       	dec	r0
    17ac:	e2 f7       	brpl	.-8      	; 0x17a6 <GPIO_writePin+0x190>
    17ae:	84 2b       	or	r24, r20
    17b0:	8c 93       	st	X, r24
    17b2:	14 c0       	rjmp	.+40     	; 0x17dc <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    17b4:	a2 e3       	ldi	r26, 0x32	; 50
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e2 e3       	ldi	r30, 0x32	; 50
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	48 2f       	mov	r20, r24
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	02 2e       	mov	r0, r18
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <GPIO_writePin+0x1bc>
    17ce:	88 0f       	add	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	0a 94       	dec	r0
    17d4:	e2 f7       	brpl	.-8      	; 0x17ce <GPIO_writePin+0x1b8>
    17d6:	80 95       	com	r24
    17d8:	84 23       	and	r24, r20
    17da:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    17dc:	0f 90       	pop	r0
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	08 95       	ret

000017ec <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <GPIO_readPin+0x6>
    17f2:	00 d0       	rcall	.+0      	; 0x17f4 <GPIO_readPin+0x8>
    17f4:	0f 92       	push	r0
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	8a 83       	std	Y+2, r24	; 0x02
    17fc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    17fe:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	88 30       	cpi	r24, 0x08	; 8
    1804:	08 f0       	brcs	.+2      	; 0x1808 <GPIO_readPin+0x1c>
    1806:	84 c0       	rjmp	.+264    	; 0x1910 <GPIO_readPin+0x124>
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	84 30       	cpi	r24, 0x04	; 4
    180c:	08 f0       	brcs	.+2      	; 0x1810 <GPIO_readPin+0x24>
    180e:	80 c0       	rjmp	.+256    	; 0x1910 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	28 2f       	mov	r18, r24
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	3d 83       	std	Y+5, r19	; 0x05
    1818:	2c 83       	std	Y+4, r18	; 0x04
    181a:	4c 81       	ldd	r20, Y+4	; 0x04
    181c:	5d 81       	ldd	r21, Y+5	; 0x05
    181e:	41 30       	cpi	r20, 0x01	; 1
    1820:	51 05       	cpc	r21, r1
    1822:	79 f1       	breq	.+94     	; 0x1882 <GPIO_readPin+0x96>
    1824:	8c 81       	ldd	r24, Y+4	; 0x04
    1826:	9d 81       	ldd	r25, Y+5	; 0x05
    1828:	82 30       	cpi	r24, 0x02	; 2
    182a:	91 05       	cpc	r25, r1
    182c:	34 f4       	brge	.+12     	; 0x183a <GPIO_readPin+0x4e>
    182e:	2c 81       	ldd	r18, Y+4	; 0x04
    1830:	3d 81       	ldd	r19, Y+5	; 0x05
    1832:	21 15       	cp	r18, r1
    1834:	31 05       	cpc	r19, r1
    1836:	69 f0       	breq	.+26     	; 0x1852 <GPIO_readPin+0x66>
    1838:	6b c0       	rjmp	.+214    	; 0x1910 <GPIO_readPin+0x124>
    183a:	4c 81       	ldd	r20, Y+4	; 0x04
    183c:	5d 81       	ldd	r21, Y+5	; 0x05
    183e:	42 30       	cpi	r20, 0x02	; 2
    1840:	51 05       	cpc	r21, r1
    1842:	b9 f1       	breq	.+110    	; 0x18b2 <GPIO_readPin+0xc6>
    1844:	8c 81       	ldd	r24, Y+4	; 0x04
    1846:	9d 81       	ldd	r25, Y+5	; 0x05
    1848:	83 30       	cpi	r24, 0x03	; 3
    184a:	91 05       	cpc	r25, r1
    184c:	09 f4       	brne	.+2      	; 0x1850 <GPIO_readPin+0x64>
    184e:	49 c0       	rjmp	.+146    	; 0x18e2 <GPIO_readPin+0xf6>
    1850:	5f c0       	rjmp	.+190    	; 0x1910 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1852:	e9 e3       	ldi	r30, 0x39	; 57
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	88 2f       	mov	r24, r24
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	a9 01       	movw	r20, r18
    1864:	02 c0       	rjmp	.+4      	; 0x186a <GPIO_readPin+0x7e>
    1866:	55 95       	asr	r21
    1868:	47 95       	ror	r20
    186a:	8a 95       	dec	r24
    186c:	e2 f7       	brpl	.-8      	; 0x1866 <GPIO_readPin+0x7a>
    186e:	ca 01       	movw	r24, r20
    1870:	81 70       	andi	r24, 0x01	; 1
    1872:	90 70       	andi	r25, 0x00	; 0
    1874:	88 23       	and	r24, r24
    1876:	19 f0       	breq	.+6      	; 0x187e <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	89 83       	std	Y+1, r24	; 0x01
    187c:	49 c0       	rjmp	.+146    	; 0x1910 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    187e:	19 82       	std	Y+1, r1	; 0x01
    1880:	47 c0       	rjmp	.+142    	; 0x1910 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1882:	e6 e3       	ldi	r30, 0x36	; 54
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	8b 81       	ldd	r24, Y+3	; 0x03
    188e:	88 2f       	mov	r24, r24
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	a9 01       	movw	r20, r18
    1894:	02 c0       	rjmp	.+4      	; 0x189a <GPIO_readPin+0xae>
    1896:	55 95       	asr	r21
    1898:	47 95       	ror	r20
    189a:	8a 95       	dec	r24
    189c:	e2 f7       	brpl	.-8      	; 0x1896 <GPIO_readPin+0xaa>
    189e:	ca 01       	movw	r24, r20
    18a0:	81 70       	andi	r24, 0x01	; 1
    18a2:	90 70       	andi	r25, 0x00	; 0
    18a4:	88 23       	and	r24, r24
    18a6:	19 f0       	breq	.+6      	; 0x18ae <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	31 c0       	rjmp	.+98     	; 0x1910 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18ae:	19 82       	std	Y+1, r1	; 0x01
    18b0:	2f c0       	rjmp	.+94     	; 0x1910 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    18b2:	e3 e3       	ldi	r30, 0x33	; 51
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	88 2f       	mov	r24, r24
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	a9 01       	movw	r20, r18
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <GPIO_readPin+0xde>
    18c6:	55 95       	asr	r21
    18c8:	47 95       	ror	r20
    18ca:	8a 95       	dec	r24
    18cc:	e2 f7       	brpl	.-8      	; 0x18c6 <GPIO_readPin+0xda>
    18ce:	ca 01       	movw	r24, r20
    18d0:	81 70       	andi	r24, 0x01	; 1
    18d2:	90 70       	andi	r25, 0x00	; 0
    18d4:	88 23       	and	r24, r24
    18d6:	19 f0       	breq	.+6      	; 0x18de <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	89 83       	std	Y+1, r24	; 0x01
    18dc:	19 c0       	rjmp	.+50     	; 0x1910 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18de:	19 82       	std	Y+1, r1	; 0x01
    18e0:	17 c0       	rjmp	.+46     	; 0x1910 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    18e2:	e0 e3       	ldi	r30, 0x30	; 48
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	88 2f       	mov	r24, r24
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	a9 01       	movw	r20, r18
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <GPIO_readPin+0x10e>
    18f6:	55 95       	asr	r21
    18f8:	47 95       	ror	r20
    18fa:	8a 95       	dec	r24
    18fc:	e2 f7       	brpl	.-8      	; 0x18f6 <GPIO_readPin+0x10a>
    18fe:	ca 01       	movw	r24, r20
    1900:	81 70       	andi	r24, 0x01	; 1
    1902:	90 70       	andi	r25, 0x00	; 0
    1904:	88 23       	and	r24, r24
    1906:	19 f0       	breq	.+6      	; 0x190e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	89 83       	std	Y+1, r24	; 0x01
    190c:	01 c0       	rjmp	.+2      	; 0x1910 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    190e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1910:	89 81       	ldd	r24, Y+1	; 0x01
}
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	08 95       	ret

00001922 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1922:	df 93       	push	r29
    1924:	cf 93       	push	r28
    1926:	00 d0       	rcall	.+0      	; 0x1928 <GPIO_setupPortDirection+0x6>
    1928:	00 d0       	rcall	.+0      	; 0x192a <GPIO_setupPortDirection+0x8>
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	89 83       	std	Y+1, r24	; 0x01
    1930:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	84 30       	cpi	r24, 0x04	; 4
    1936:	90 f5       	brcc	.+100    	; 0x199c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	28 2f       	mov	r18, r24
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	3c 83       	std	Y+4, r19	; 0x04
    1940:	2b 83       	std	Y+3, r18	; 0x03
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	9c 81       	ldd	r25, Y+4	; 0x04
    1946:	81 30       	cpi	r24, 0x01	; 1
    1948:	91 05       	cpc	r25, r1
    194a:	d1 f0       	breq	.+52     	; 0x1980 <GPIO_setupPortDirection+0x5e>
    194c:	2b 81       	ldd	r18, Y+3	; 0x03
    194e:	3c 81       	ldd	r19, Y+4	; 0x04
    1950:	22 30       	cpi	r18, 0x02	; 2
    1952:	31 05       	cpc	r19, r1
    1954:	2c f4       	brge	.+10     	; 0x1960 <GPIO_setupPortDirection+0x3e>
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	9c 81       	ldd	r25, Y+4	; 0x04
    195a:	00 97       	sbiw	r24, 0x00	; 0
    195c:	61 f0       	breq	.+24     	; 0x1976 <GPIO_setupPortDirection+0x54>
    195e:	1e c0       	rjmp	.+60     	; 0x199c <GPIO_setupPortDirection+0x7a>
    1960:	2b 81       	ldd	r18, Y+3	; 0x03
    1962:	3c 81       	ldd	r19, Y+4	; 0x04
    1964:	22 30       	cpi	r18, 0x02	; 2
    1966:	31 05       	cpc	r19, r1
    1968:	81 f0       	breq	.+32     	; 0x198a <GPIO_setupPortDirection+0x68>
    196a:	8b 81       	ldd	r24, Y+3	; 0x03
    196c:	9c 81       	ldd	r25, Y+4	; 0x04
    196e:	83 30       	cpi	r24, 0x03	; 3
    1970:	91 05       	cpc	r25, r1
    1972:	81 f0       	breq	.+32     	; 0x1994 <GPIO_setupPortDirection+0x72>
    1974:	13 c0       	rjmp	.+38     	; 0x199c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1976:	ea e3       	ldi	r30, 0x3A	; 58
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	80 83       	st	Z, r24
    197e:	0e c0       	rjmp	.+28     	; 0x199c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1980:	e7 e3       	ldi	r30, 0x37	; 55
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	80 83       	st	Z, r24
    1988:	09 c0       	rjmp	.+18     	; 0x199c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    198a:	e4 e3       	ldi	r30, 0x34	; 52
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	80 83       	st	Z, r24
    1992:	04 c0       	rjmp	.+8      	; 0x199c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1994:	e1 e3       	ldi	r30, 0x31	; 49
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	80 83       	st	Z, r24
			break;
		}
	}
}
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	08 95       	ret

000019aa <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <GPIO_writePort+0x6>
    19b0:	00 d0       	rcall	.+0      	; 0x19b2 <GPIO_writePort+0x8>
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
    19b6:	89 83       	std	Y+1, r24	; 0x01
    19b8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	84 30       	cpi	r24, 0x04	; 4
    19be:	90 f5       	brcc	.+100    	; 0x1a24 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	3c 83       	std	Y+4, r19	; 0x04
    19c8:	2b 83       	std	Y+3, r18	; 0x03
    19ca:	8b 81       	ldd	r24, Y+3	; 0x03
    19cc:	9c 81       	ldd	r25, Y+4	; 0x04
    19ce:	81 30       	cpi	r24, 0x01	; 1
    19d0:	91 05       	cpc	r25, r1
    19d2:	d1 f0       	breq	.+52     	; 0x1a08 <GPIO_writePort+0x5e>
    19d4:	2b 81       	ldd	r18, Y+3	; 0x03
    19d6:	3c 81       	ldd	r19, Y+4	; 0x04
    19d8:	22 30       	cpi	r18, 0x02	; 2
    19da:	31 05       	cpc	r19, r1
    19dc:	2c f4       	brge	.+10     	; 0x19e8 <GPIO_writePort+0x3e>
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	9c 81       	ldd	r25, Y+4	; 0x04
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	61 f0       	breq	.+24     	; 0x19fe <GPIO_writePort+0x54>
    19e6:	1e c0       	rjmp	.+60     	; 0x1a24 <GPIO_writePort+0x7a>
    19e8:	2b 81       	ldd	r18, Y+3	; 0x03
    19ea:	3c 81       	ldd	r19, Y+4	; 0x04
    19ec:	22 30       	cpi	r18, 0x02	; 2
    19ee:	31 05       	cpc	r19, r1
    19f0:	81 f0       	breq	.+32     	; 0x1a12 <GPIO_writePort+0x68>
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	9c 81       	ldd	r25, Y+4	; 0x04
    19f6:	83 30       	cpi	r24, 0x03	; 3
    19f8:	91 05       	cpc	r25, r1
    19fa:	81 f0       	breq	.+32     	; 0x1a1c <GPIO_writePort+0x72>
    19fc:	13 c0       	rjmp	.+38     	; 0x1a24 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    19fe:	eb e3       	ldi	r30, 0x3B	; 59
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	80 83       	st	Z, r24
    1a06:	0e c0       	rjmp	.+28     	; 0x1a24 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a08:	e8 e3       	ldi	r30, 0x38	; 56
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	80 83       	st	Z, r24
    1a10:	09 c0       	rjmp	.+18     	; 0x1a24 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1a12:	e5 e3       	ldi	r30, 0x35	; 53
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	80 83       	st	Z, r24
    1a1a:	04 c0       	rjmp	.+8      	; 0x1a24 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1a1c:	e2 e3       	ldi	r30, 0x32	; 50
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	08 95       	ret

00001a32 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <GPIO_readPort+0x6>
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <GPIO_readPort+0x8>
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1a40:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	84 30       	cpi	r24, 0x04	; 4
    1a46:	90 f5       	brcc	.+100    	; 0x1aac <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	3c 83       	std	Y+4, r19	; 0x04
    1a50:	2b 83       	std	Y+3, r18	; 0x03
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	9c 81       	ldd	r25, Y+4	; 0x04
    1a56:	81 30       	cpi	r24, 0x01	; 1
    1a58:	91 05       	cpc	r25, r1
    1a5a:	d1 f0       	breq	.+52     	; 0x1a90 <GPIO_readPort+0x5e>
    1a5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a60:	22 30       	cpi	r18, 0x02	; 2
    1a62:	31 05       	cpc	r19, r1
    1a64:	2c f4       	brge	.+10     	; 0x1a70 <GPIO_readPort+0x3e>
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	61 f0       	breq	.+24     	; 0x1a86 <GPIO_readPort+0x54>
    1a6e:	1e c0       	rjmp	.+60     	; 0x1aac <GPIO_readPort+0x7a>
    1a70:	2b 81       	ldd	r18, Y+3	; 0x03
    1a72:	3c 81       	ldd	r19, Y+4	; 0x04
    1a74:	22 30       	cpi	r18, 0x02	; 2
    1a76:	31 05       	cpc	r19, r1
    1a78:	81 f0       	breq	.+32     	; 0x1a9a <GPIO_readPort+0x68>
    1a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7e:	83 30       	cpi	r24, 0x03	; 3
    1a80:	91 05       	cpc	r25, r1
    1a82:	81 f0       	breq	.+32     	; 0x1aa4 <GPIO_readPort+0x72>
    1a84:	13 c0       	rjmp	.+38     	; 0x1aac <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1a86:	e9 e3       	ldi	r30, 0x39	; 57
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	89 83       	std	Y+1, r24	; 0x01
    1a8e:	0e c0       	rjmp	.+28     	; 0x1aac <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1a90:	e6 e3       	ldi	r30, 0x36	; 54
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	89 83       	std	Y+1, r24	; 0x01
    1a98:	09 c0       	rjmp	.+18     	; 0x1aac <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1a9a:	e3 e3       	ldi	r30, 0x33	; 51
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	89 83       	std	Y+1, r24	; 0x01
    1aa2:	04 c0       	rjmp	.+8      	; 0x1aac <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1aa4:	e0 e3       	ldi	r30, 0x30	; 48
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1aac:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	cf 91       	pop	r28
    1ab8:	df 91       	pop	r29
    1aba:	08 95       	ret

00001abc <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1abc:	df 93       	push	r29
    1abe:	cf 93       	push	r28
    1ac0:	00 d0       	rcall	.+0      	; 0x1ac2 <KEYPAD_getPressedKey+0x6>
    1ac2:	0f 92       	push	r0
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1ac8:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1aca:	1b 82       	std	Y+3, r1	; 0x03
    1acc:	43 c0       	rjmp	.+134    	; 0x1b54 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1ace:	82 e0       	ldi	r24, 0x02	; 2
    1ad0:	60 e0       	ldi	r22, 0x00	; 0
    1ad2:	0e 94 91 0c 	call	0x1922	; 0x1922 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col,PIN_OUTPUT);
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	98 2f       	mov	r25, r24
    1ada:	9c 5f       	subi	r25, 0xFC	; 252
    1adc:	82 e0       	ldi	r24, 0x02	; 2
    1ade:	69 2f       	mov	r22, r25
    1ae0:	41 e0       	ldi	r20, 0x01	; 1
    1ae2:	0e 94 20 0a 	call	0x1440	; 0x1440 <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COL_PIN_ID+col));
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	88 2f       	mov	r24, r24
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	9c 01       	movw	r18, r24
    1aee:	2c 5f       	subi	r18, 0xFC	; 252
    1af0:	3f 4f       	sbci	r19, 0xFF	; 255
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <KEYPAD_getPressedKey+0x40>
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	2a 95       	dec	r18
    1afe:	e2 f7       	brpl	.-8      	; 0x1af8 <KEYPAD_getPressedKey+0x3c>
    1b00:	80 95       	com	r24
    1b02:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1b04:	82 e0       	ldi	r24, 0x02	; 2
    1b06:	69 81       	ldd	r22, Y+1	; 0x01
    1b08:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1b0c:	1a 82       	std	Y+2, r1	; 0x02
    1b0e:	1c c0       	rjmp	.+56     	; 0x1b48 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1b10:	82 e0       	ldi	r24, 0x02	; 2
    1b12:	6a 81       	ldd	r22, Y+2	; 0x02
    1b14:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <GPIO_readPin>
    1b18:	88 23       	and	r24, r24
    1b1a:	99 f4       	brne	.+38     	; 0x1b42 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	88 2f       	mov	r24, r24
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	98 2f       	mov	r25, r24
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	89 0f       	add	r24, r25
    1b30:	8f 5f       	subi	r24, 0xFF	; 255
    1b32:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1b42:	8a 81       	ldd	r24, Y+2	; 0x02
    1b44:	8f 5f       	subi	r24, 0xFF	; 255
    1b46:	8a 83       	std	Y+2, r24	; 0x02
    1b48:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4a:	84 30       	cpi	r24, 0x04	; 4
    1b4c:	08 f3       	brcs	.-62     	; 0x1b10 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	8f 5f       	subi	r24, 0xFF	; 255
    1b52:	8b 83       	std	Y+3, r24	; 0x03
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	84 30       	cpi	r24, 0x04	; 4
    1b58:	08 f4       	brcc	.+2      	; 0x1b5c <KEYPAD_getPressedKey+0xa0>
    1b5a:	b9 cf       	rjmp	.-142    	; 0x1ace <KEYPAD_getPressedKey+0x12>
    1b5c:	b6 cf       	rjmp	.-148    	; 0x1aca <KEYPAD_getPressedKey+0xe>

00001b5e <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	00 d0       	rcall	.+0      	; 0x1b64 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
    1b6a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1b6c:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	3c 83       	std	Y+4, r19	; 0x04
    1b76:	2b 83       	std	Y+3, r18	; 0x03
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7c:	88 30       	cpi	r24, 0x08	; 8
    1b7e:	91 05       	cpc	r25, r1
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1b82:	70 c0       	rjmp	.+224    	; 0x1c64 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1b84:	2b 81       	ldd	r18, Y+3	; 0x03
    1b86:	3c 81       	ldd	r19, Y+4	; 0x04
    1b88:	29 30       	cpi	r18, 0x09	; 9
    1b8a:	31 05       	cpc	r19, r1
    1b8c:	5c f5       	brge	.+86     	; 0x1be4 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	9c 81       	ldd	r25, Y+4	; 0x04
    1b92:	84 30       	cpi	r24, 0x04	; 4
    1b94:	91 05       	cpc	r25, r1
    1b96:	09 f4       	brne	.+2      	; 0x1b9a <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1b98:	59 c0       	rjmp	.+178    	; 0x1c4c <KEYPAD_4x4_adjustKeyNumber+0xee>
    1b9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b9e:	25 30       	cpi	r18, 0x05	; 5
    1ba0:	31 05       	cpc	r19, r1
    1ba2:	9c f4       	brge	.+38     	; 0x1bca <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba8:	82 30       	cpi	r24, 0x02	; 2
    1baa:	91 05       	cpc	r25, r1
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1bae:	48 c0       	rjmp	.+144    	; 0x1c40 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1bb0:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb2:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb4:	23 30       	cpi	r18, 0x03	; 3
    1bb6:	31 05       	cpc	r19, r1
    1bb8:	0c f0       	brlt	.+2      	; 0x1bbc <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1bba:	45 c0       	rjmp	.+138    	; 0x1c46 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc0:	81 30       	cpi	r24, 0x01	; 1
    1bc2:	91 05       	cpc	r25, r1
    1bc4:	09 f4       	brne	.+2      	; 0x1bc8 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1bc6:	39 c0       	rjmp	.+114    	; 0x1c3a <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1bc8:	67 c0       	rjmp	.+206    	; 0x1c98 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1bca:	2b 81       	ldd	r18, Y+3	; 0x03
    1bcc:	3c 81       	ldd	r19, Y+4	; 0x04
    1bce:	26 30       	cpi	r18, 0x06	; 6
    1bd0:	31 05       	cpc	r19, r1
    1bd2:	09 f4       	brne	.+2      	; 0x1bd6 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1bd4:	41 c0       	rjmp	.+130    	; 0x1c58 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bda:	87 30       	cpi	r24, 0x07	; 7
    1bdc:	91 05       	cpc	r25, r1
    1bde:	0c f0       	brlt	.+2      	; 0x1be2 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1be0:	3e c0       	rjmp	.+124    	; 0x1c5e <KEYPAD_4x4_adjustKeyNumber+0x100>
    1be2:	37 c0       	rjmp	.+110    	; 0x1c52 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1be4:	2b 81       	ldd	r18, Y+3	; 0x03
    1be6:	3c 81       	ldd	r19, Y+4	; 0x04
    1be8:	2c 30       	cpi	r18, 0x0C	; 12
    1bea:	31 05       	cpc	r19, r1
    1bec:	09 f4       	brne	.+2      	; 0x1bf0 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1bee:	46 c0       	rjmp	.+140    	; 0x1c7c <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf4:	8d 30       	cpi	r24, 0x0D	; 13
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	5c f4       	brge	.+22     	; 0x1c10 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1bfa:	2b 81       	ldd	r18, Y+3	; 0x03
    1bfc:	3c 81       	ldd	r19, Y+4	; 0x04
    1bfe:	2a 30       	cpi	r18, 0x0A	; 10
    1c00:	31 05       	cpc	r19, r1
    1c02:	b1 f1       	breq	.+108    	; 0x1c70 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	9c 81       	ldd	r25, Y+4	; 0x04
    1c08:	8b 30       	cpi	r24, 0x0B	; 11
    1c0a:	91 05       	cpc	r25, r1
    1c0c:	a4 f5       	brge	.+104    	; 0x1c76 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1c0e:	2d c0       	rjmp	.+90     	; 0x1c6a <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1c10:	2b 81       	ldd	r18, Y+3	; 0x03
    1c12:	3c 81       	ldd	r19, Y+4	; 0x04
    1c14:	2e 30       	cpi	r18, 0x0E	; 14
    1c16:	31 05       	cpc	r19, r1
    1c18:	b9 f1       	breq	.+110    	; 0x1c88 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1e:	8e 30       	cpi	r24, 0x0E	; 14
    1c20:	91 05       	cpc	r25, r1
    1c22:	7c f1       	brlt	.+94     	; 0x1c82 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1c24:	2b 81       	ldd	r18, Y+3	; 0x03
    1c26:	3c 81       	ldd	r19, Y+4	; 0x04
    1c28:	2f 30       	cpi	r18, 0x0F	; 15
    1c2a:	31 05       	cpc	r19, r1
    1c2c:	79 f1       	breq	.+94     	; 0x1c8c <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c30:	9c 81       	ldd	r25, Y+4	; 0x04
    1c32:	80 31       	cpi	r24, 0x10	; 16
    1c34:	91 05       	cpc	r25, r1
    1c36:	69 f1       	breq	.+90     	; 0x1c92 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1c38:	2f c0       	rjmp	.+94     	; 0x1c98 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1c3a:	87 e0       	ldi	r24, 0x07	; 7
    1c3c:	89 83       	std	Y+1, r24	; 0x01
    1c3e:	2e c0       	rjmp	.+92     	; 0x1c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1c40:	88 e0       	ldi	r24, 0x08	; 8
    1c42:	89 83       	std	Y+1, r24	; 0x01
    1c44:	2b c0       	rjmp	.+86     	; 0x1c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1c46:	89 e0       	ldi	r24, 0x09	; 9
    1c48:	89 83       	std	Y+1, r24	; 0x01
    1c4a:	28 c0       	rjmp	.+80     	; 0x1c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1c4c:	85 e2       	ldi	r24, 0x25	; 37
    1c4e:	89 83       	std	Y+1, r24	; 0x01
    1c50:	25 c0       	rjmp	.+74     	; 0x1c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1c52:	84 e0       	ldi	r24, 0x04	; 4
    1c54:	89 83       	std	Y+1, r24	; 0x01
    1c56:	22 c0       	rjmp	.+68     	; 0x1c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1c58:	85 e0       	ldi	r24, 0x05	; 5
    1c5a:	89 83       	std	Y+1, r24	; 0x01
    1c5c:	1f c0       	rjmp	.+62     	; 0x1c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1c5e:	86 e0       	ldi	r24, 0x06	; 6
    1c60:	89 83       	std	Y+1, r24	; 0x01
    1c62:	1c c0       	rjmp	.+56     	; 0x1c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1c64:	8a e2       	ldi	r24, 0x2A	; 42
    1c66:	89 83       	std	Y+1, r24	; 0x01
    1c68:	19 c0       	rjmp	.+50     	; 0x1c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	89 83       	std	Y+1, r24	; 0x01
    1c6e:	16 c0       	rjmp	.+44     	; 0x1c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1c70:	82 e0       	ldi	r24, 0x02	; 2
    1c72:	89 83       	std	Y+1, r24	; 0x01
    1c74:	13 c0       	rjmp	.+38     	; 0x1c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1c76:	83 e0       	ldi	r24, 0x03	; 3
    1c78:	89 83       	std	Y+1, r24	; 0x01
    1c7a:	10 c0       	rjmp	.+32     	; 0x1c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1c7c:	8d e2       	ldi	r24, 0x2D	; 45
    1c7e:	89 83       	std	Y+1, r24	; 0x01
    1c80:	0d c0       	rjmp	.+26     	; 0x1c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1c82:	8d e0       	ldi	r24, 0x0D	; 13
    1c84:	89 83       	std	Y+1, r24	; 0x01
    1c86:	0a c0       	rjmp	.+20     	; 0x1c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1c88:	19 82       	std	Y+1, r1	; 0x01
    1c8a:	08 c0       	rjmp	.+16     	; 0x1c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1c8c:	8d e3       	ldi	r24, 0x3D	; 61
    1c8e:	89 83       	std	Y+1, r24	; 0x01
    1c90:	05 c0       	rjmp	.+10     	; 0x1c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1c92:	8b e2       	ldi	r24, 0x2B	; 43
    1c94:	89 83       	std	Y+1, r24	; 0x01
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1c98:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	08 95       	ret

00001cac <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
    1cb4:	2e 97       	sbiw	r28, 0x0e	; 14
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	f8 94       	cli
    1cba:	de bf       	out	0x3e, r29	; 62
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	60 e0       	ldi	r22, 0x00	; 0
    1cc4:	41 e0       	ldi	r20, 0x01	; 1
    1cc6:	0e 94 20 0a 	call	0x1440	; 0x1440 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	62 e0       	ldi	r22, 0x02	; 2
    1cce:	41 e0       	ldi	r20, 0x01	; 1
    1cd0:	0e 94 20 0a 	call	0x1440	; 0x1440 <GPIO_setupPinDirection>
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	a0 ea       	ldi	r26, 0xA0	; 160
    1cda:	b1 e4       	ldi	r27, 0x41	; 65
    1cdc:	8b 87       	std	Y+11, r24	; 0x0b
    1cde:	9c 87       	std	Y+12, r25	; 0x0c
    1ce0:	ad 87       	std	Y+13, r26	; 0x0d
    1ce2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	4a ef       	ldi	r20, 0xFA	; 250
    1cf2:	54 e4       	ldi	r21, 0x44	; 68
    1cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	8f 83       	std	Y+7, r24	; 0x07
    1cfe:	98 87       	std	Y+8, r25	; 0x08
    1d00:	a9 87       	std	Y+9, r26	; 0x09
    1d02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d04:	6f 81       	ldd	r22, Y+7	; 0x07
    1d06:	78 85       	ldd	r23, Y+8	; 0x08
    1d08:	89 85       	ldd	r24, Y+9	; 0x09
    1d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	40 e8       	ldi	r20, 0x80	; 128
    1d12:	5f e3       	ldi	r21, 0x3F	; 63
    1d14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d18:	88 23       	and	r24, r24
    1d1a:	2c f4       	brge	.+10     	; 0x1d26 <LCD_init+0x7a>
		__ticks = 1;
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	9e 83       	std	Y+6, r25	; 0x06
    1d22:	8d 83       	std	Y+5, r24	; 0x05
    1d24:	3f c0       	rjmp	.+126    	; 0x1da4 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1d26:	6f 81       	ldd	r22, Y+7	; 0x07
    1d28:	78 85       	ldd	r23, Y+8	; 0x08
    1d2a:	89 85       	ldd	r24, Y+9	; 0x09
    1d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	3f ef       	ldi	r19, 0xFF	; 255
    1d32:	4f e7       	ldi	r20, 0x7F	; 127
    1d34:	57 e4       	ldi	r21, 0x47	; 71
    1d36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d3a:	18 16       	cp	r1, r24
    1d3c:	4c f5       	brge	.+82     	; 0x1d90 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d40:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d42:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d44:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	40 e2       	ldi	r20, 0x20	; 32
    1d4c:	51 e4       	ldi	r21, 0x41	; 65
    1d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	bc 01       	movw	r22, r24
    1d58:	cd 01       	movw	r24, r26
    1d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	9e 83       	std	Y+6, r25	; 0x06
    1d64:	8d 83       	std	Y+5, r24	; 0x05
    1d66:	0f c0       	rjmp	.+30     	; 0x1d86 <LCD_init+0xda>
    1d68:	88 ec       	ldi	r24, 0xC8	; 200
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	9c 83       	std	Y+4, r25	; 0x04
    1d6e:	8b 83       	std	Y+3, r24	; 0x03
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	9c 81       	ldd	r25, Y+4	; 0x04
    1d74:	01 97       	sbiw	r24, 0x01	; 1
    1d76:	f1 f7       	brne	.-4      	; 0x1d74 <LCD_init+0xc8>
    1d78:	9c 83       	std	Y+4, r25	; 0x04
    1d7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d80:	01 97       	sbiw	r24, 0x01	; 1
    1d82:	9e 83       	std	Y+6, r25	; 0x06
    1d84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d86:	8d 81       	ldd	r24, Y+5	; 0x05
    1d88:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8a:	00 97       	sbiw	r24, 0x00	; 0
    1d8c:	69 f7       	brne	.-38     	; 0x1d68 <LCD_init+0xbc>
    1d8e:	14 c0       	rjmp	.+40     	; 0x1db8 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d90:	6f 81       	ldd	r22, Y+7	; 0x07
    1d92:	78 85       	ldd	r23, Y+8	; 0x08
    1d94:	89 85       	ldd	r24, Y+9	; 0x09
    1d96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	9e 83       	std	Y+6, r25	; 0x06
    1da2:	8d 83       	std	Y+5, r24	; 0x05
    1da4:	8d 81       	ldd	r24, Y+5	; 0x05
    1da6:	9e 81       	ldd	r25, Y+6	; 0x06
    1da8:	9a 83       	std	Y+2, r25	; 0x02
    1daa:	89 83       	std	Y+1, r24	; 0x01
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	9a 81       	ldd	r25, Y+2	; 0x02
    1db0:	01 97       	sbiw	r24, 0x01	; 1
    1db2:	f1 f7       	brne	.-4      	; 0x1db0 <LCD_init+0x104>
    1db4:	9a 83       	std	Y+2, r25	; 0x02
    1db6:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    1dba:	6f ef       	ldi	r22, 0xFF	; 255
    1dbc:	0e 94 91 0c 	call	0x1922	; 0x1922 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1dc0:	88 e3       	ldi	r24, 0x38	; 56
    1dc2:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1dc6:	8c e0       	ldi	r24, 0x0C	; 12
    1dc8:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <LCD_sendCommand>
}
    1dd2:	2e 96       	adiw	r28, 0x0e	; 14
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	f8 94       	cli
    1dd8:	de bf       	out	0x3e, r29	; 62
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	cd bf       	out	0x3d, r28	; 61
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	e9 97       	sbiw	r28, 0x39	; 57
    1dee:	0f b6       	in	r0, 0x3f	; 63
    1df0:	f8 94       	cli
    1df2:	de bf       	out	0x3e, r29	; 62
    1df4:	0f be       	out	0x3f, r0	; 63
    1df6:	cd bf       	out	0x3d, r28	; 61
    1df8:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	60 e0       	ldi	r22, 0x00	; 0
    1dfe:	40 e0       	ldi	r20, 0x00	; 0
    1e00:	0e 94 0b 0b 	call	0x1616	; 0x1616 <GPIO_writePin>
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	a0 e8       	ldi	r26, 0x80	; 128
    1e0a:	bf e3       	ldi	r27, 0x3F	; 63
    1e0c:	8d ab       	std	Y+53, r24	; 0x35
    1e0e:	9e ab       	std	Y+54, r25	; 0x36
    1e10:	af ab       	std	Y+55, r26	; 0x37
    1e12:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e14:	6d a9       	ldd	r22, Y+53	; 0x35
    1e16:	7e a9       	ldd	r23, Y+54	; 0x36
    1e18:	8f a9       	ldd	r24, Y+55	; 0x37
    1e1a:	98 ad       	ldd	r25, Y+56	; 0x38
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	4a ef       	ldi	r20, 0xFA	; 250
    1e22:	54 e4       	ldi	r21, 0x44	; 68
    1e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	89 ab       	std	Y+49, r24	; 0x31
    1e2e:	9a ab       	std	Y+50, r25	; 0x32
    1e30:	ab ab       	std	Y+51, r26	; 0x33
    1e32:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e34:	69 a9       	ldd	r22, Y+49	; 0x31
    1e36:	7a a9       	ldd	r23, Y+50	; 0x32
    1e38:	8b a9       	ldd	r24, Y+51	; 0x33
    1e3a:	9c a9       	ldd	r25, Y+52	; 0x34
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	40 e8       	ldi	r20, 0x80	; 128
    1e42:	5f e3       	ldi	r21, 0x3F	; 63
    1e44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e48:	88 23       	and	r24, r24
    1e4a:	2c f4       	brge	.+10     	; 0x1e56 <LCD_sendCommand+0x72>
		__ticks = 1;
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	98 ab       	std	Y+48, r25	; 0x30
    1e52:	8f a7       	std	Y+47, r24	; 0x2f
    1e54:	3f c0       	rjmp	.+126    	; 0x1ed4 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1e56:	69 a9       	ldd	r22, Y+49	; 0x31
    1e58:	7a a9       	ldd	r23, Y+50	; 0x32
    1e5a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e5c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	3f ef       	ldi	r19, 0xFF	; 255
    1e62:	4f e7       	ldi	r20, 0x7F	; 127
    1e64:	57 e4       	ldi	r21, 0x47	; 71
    1e66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e6a:	18 16       	cp	r1, r24
    1e6c:	4c f5       	brge	.+82     	; 0x1ec0 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e6e:	6d a9       	ldd	r22, Y+53	; 0x35
    1e70:	7e a9       	ldd	r23, Y+54	; 0x36
    1e72:	8f a9       	ldd	r24, Y+55	; 0x37
    1e74:	98 ad       	ldd	r25, Y+56	; 0x38
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	40 e2       	ldi	r20, 0x20	; 32
    1e7c:	51 e4       	ldi	r21, 0x41	; 65
    1e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	bc 01       	movw	r22, r24
    1e88:	cd 01       	movw	r24, r26
    1e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	98 ab       	std	Y+48, r25	; 0x30
    1e94:	8f a7       	std	Y+47, r24	; 0x2f
    1e96:	0f c0       	rjmp	.+30     	; 0x1eb6 <LCD_sendCommand+0xd2>
    1e98:	88 ec       	ldi	r24, 0xC8	; 200
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	9e a7       	std	Y+46, r25	; 0x2e
    1e9e:	8d a7       	std	Y+45, r24	; 0x2d
    1ea0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ea2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ea4:	01 97       	sbiw	r24, 0x01	; 1
    1ea6:	f1 f7       	brne	.-4      	; 0x1ea4 <LCD_sendCommand+0xc0>
    1ea8:	9e a7       	std	Y+46, r25	; 0x2e
    1eaa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eac:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eae:	98 a9       	ldd	r25, Y+48	; 0x30
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	98 ab       	std	Y+48, r25	; 0x30
    1eb4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eb8:	98 a9       	ldd	r25, Y+48	; 0x30
    1eba:	00 97       	sbiw	r24, 0x00	; 0
    1ebc:	69 f7       	brne	.-38     	; 0x1e98 <LCD_sendCommand+0xb4>
    1ebe:	14 c0       	rjmp	.+40     	; 0x1ee8 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ec2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ec4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ec6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	98 ab       	std	Y+48, r25	; 0x30
    1ed2:	8f a7       	std	Y+47, r24	; 0x2f
    1ed4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ed6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ed8:	9c a7       	std	Y+44, r25	; 0x2c
    1eda:	8b a7       	std	Y+43, r24	; 0x2b
    1edc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ede:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	f1 f7       	brne	.-4      	; 0x1ee0 <LCD_sendCommand+0xfc>
    1ee4:	9c a7       	std	Y+44, r25	; 0x2c
    1ee6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	62 e0       	ldi	r22, 0x02	; 2
    1eec:	41 e0       	ldi	r20, 0x01	; 1
    1eee:	0e 94 0b 0b 	call	0x1616	; 0x1616 <GPIO_writePin>
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	a0 e8       	ldi	r26, 0x80	; 128
    1ef8:	bf e3       	ldi	r27, 0x3F	; 63
    1efa:	8f a3       	std	Y+39, r24	; 0x27
    1efc:	98 a7       	std	Y+40, r25	; 0x28
    1efe:	a9 a7       	std	Y+41, r26	; 0x29
    1f00:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f02:	6f a1       	ldd	r22, Y+39	; 0x27
    1f04:	78 a5       	ldd	r23, Y+40	; 0x28
    1f06:	89 a5       	ldd	r24, Y+41	; 0x29
    1f08:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	4a ef       	ldi	r20, 0xFA	; 250
    1f10:	54 e4       	ldi	r21, 0x44	; 68
    1f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	8b a3       	std	Y+35, r24	; 0x23
    1f1c:	9c a3       	std	Y+36, r25	; 0x24
    1f1e:	ad a3       	std	Y+37, r26	; 0x25
    1f20:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f22:	6b a1       	ldd	r22, Y+35	; 0x23
    1f24:	7c a1       	ldd	r23, Y+36	; 0x24
    1f26:	8d a1       	ldd	r24, Y+37	; 0x25
    1f28:	9e a1       	ldd	r25, Y+38	; 0x26
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	40 e8       	ldi	r20, 0x80	; 128
    1f30:	5f e3       	ldi	r21, 0x3F	; 63
    1f32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f36:	88 23       	and	r24, r24
    1f38:	2c f4       	brge	.+10     	; 0x1f44 <LCD_sendCommand+0x160>
		__ticks = 1;
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	9a a3       	std	Y+34, r25	; 0x22
    1f40:	89 a3       	std	Y+33, r24	; 0x21
    1f42:	3f c0       	rjmp	.+126    	; 0x1fc2 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1f44:	6b a1       	ldd	r22, Y+35	; 0x23
    1f46:	7c a1       	ldd	r23, Y+36	; 0x24
    1f48:	8d a1       	ldd	r24, Y+37	; 0x25
    1f4a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	3f ef       	ldi	r19, 0xFF	; 255
    1f50:	4f e7       	ldi	r20, 0x7F	; 127
    1f52:	57 e4       	ldi	r21, 0x47	; 71
    1f54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f58:	18 16       	cp	r1, r24
    1f5a:	4c f5       	brge	.+82     	; 0x1fae <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f5c:	6f a1       	ldd	r22, Y+39	; 0x27
    1f5e:	78 a5       	ldd	r23, Y+40	; 0x28
    1f60:	89 a5       	ldd	r24, Y+41	; 0x29
    1f62:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	40 e2       	ldi	r20, 0x20	; 32
    1f6a:	51 e4       	ldi	r21, 0x41	; 65
    1f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	bc 01       	movw	r22, r24
    1f76:	cd 01       	movw	r24, r26
    1f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	9a a3       	std	Y+34, r25	; 0x22
    1f82:	89 a3       	std	Y+33, r24	; 0x21
    1f84:	0f c0       	rjmp	.+30     	; 0x1fa4 <LCD_sendCommand+0x1c0>
    1f86:	88 ec       	ldi	r24, 0xC8	; 200
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	98 a3       	std	Y+32, r25	; 0x20
    1f8c:	8f 8f       	std	Y+31, r24	; 0x1f
    1f8e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f90:	98 a1       	ldd	r25, Y+32	; 0x20
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	f1 f7       	brne	.-4      	; 0x1f92 <LCD_sendCommand+0x1ae>
    1f96:	98 a3       	std	Y+32, r25	; 0x20
    1f98:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f9a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f9c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	9a a3       	std	Y+34, r25	; 0x22
    1fa2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa4:	89 a1       	ldd	r24, Y+33	; 0x21
    1fa6:	9a a1       	ldd	r25, Y+34	; 0x22
    1fa8:	00 97       	sbiw	r24, 0x00	; 0
    1faa:	69 f7       	brne	.-38     	; 0x1f86 <LCD_sendCommand+0x1a2>
    1fac:	14 c0       	rjmp	.+40     	; 0x1fd6 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fae:	6b a1       	ldd	r22, Y+35	; 0x23
    1fb0:	7c a1       	ldd	r23, Y+36	; 0x24
    1fb2:	8d a1       	ldd	r24, Y+37	; 0x25
    1fb4:	9e a1       	ldd	r25, Y+38	; 0x26
    1fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	9a a3       	std	Y+34, r25	; 0x22
    1fc0:	89 a3       	std	Y+33, r24	; 0x21
    1fc2:	89 a1       	ldd	r24, Y+33	; 0x21
    1fc4:	9a a1       	ldd	r25, Y+34	; 0x22
    1fc6:	9e 8f       	std	Y+30, r25	; 0x1e
    1fc8:	8d 8f       	std	Y+29, r24	; 0x1d
    1fca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fcc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	f1 f7       	brne	.-4      	; 0x1fce <LCD_sendCommand+0x1ea>
    1fd2:	9e 8f       	std	Y+30, r25	; 0x1e
    1fd4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	69 ad       	ldd	r22, Y+57	; 0x39
    1fda:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_writePort>
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	a0 e8       	ldi	r26, 0x80	; 128
    1fe4:	bf e3       	ldi	r27, 0x3F	; 63
    1fe6:	89 8f       	std	Y+25, r24	; 0x19
    1fe8:	9a 8f       	std	Y+26, r25	; 0x1a
    1fea:	ab 8f       	std	Y+27, r26	; 0x1b
    1fec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fee:	69 8d       	ldd	r22, Y+25	; 0x19
    1ff0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ff2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ff4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	4a ef       	ldi	r20, 0xFA	; 250
    1ffc:	54 e4       	ldi	r21, 0x44	; 68
    1ffe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	8d 8b       	std	Y+21, r24	; 0x15
    2008:	9e 8b       	std	Y+22, r25	; 0x16
    200a:	af 8b       	std	Y+23, r26	; 0x17
    200c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    200e:	6d 89       	ldd	r22, Y+21	; 0x15
    2010:	7e 89       	ldd	r23, Y+22	; 0x16
    2012:	8f 89       	ldd	r24, Y+23	; 0x17
    2014:	98 8d       	ldd	r25, Y+24	; 0x18
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e8       	ldi	r20, 0x80	; 128
    201c:	5f e3       	ldi	r21, 0x3F	; 63
    201e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2022:	88 23       	and	r24, r24
    2024:	2c f4       	brge	.+10     	; 0x2030 <LCD_sendCommand+0x24c>
		__ticks = 1;
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	9c 8b       	std	Y+20, r25	; 0x14
    202c:	8b 8b       	std	Y+19, r24	; 0x13
    202e:	3f c0       	rjmp	.+126    	; 0x20ae <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2030:	6d 89       	ldd	r22, Y+21	; 0x15
    2032:	7e 89       	ldd	r23, Y+22	; 0x16
    2034:	8f 89       	ldd	r24, Y+23	; 0x17
    2036:	98 8d       	ldd	r25, Y+24	; 0x18
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	3f ef       	ldi	r19, 0xFF	; 255
    203c:	4f e7       	ldi	r20, 0x7F	; 127
    203e:	57 e4       	ldi	r21, 0x47	; 71
    2040:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2044:	18 16       	cp	r1, r24
    2046:	4c f5       	brge	.+82     	; 0x209a <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2048:	69 8d       	ldd	r22, Y+25	; 0x19
    204a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    204c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    204e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e2       	ldi	r20, 0x20	; 32
    2056:	51 e4       	ldi	r21, 0x41	; 65
    2058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	bc 01       	movw	r22, r24
    2062:	cd 01       	movw	r24, r26
    2064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	9c 8b       	std	Y+20, r25	; 0x14
    206e:	8b 8b       	std	Y+19, r24	; 0x13
    2070:	0f c0       	rjmp	.+30     	; 0x2090 <LCD_sendCommand+0x2ac>
    2072:	88 ec       	ldi	r24, 0xC8	; 200
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	9a 8b       	std	Y+18, r25	; 0x12
    2078:	89 8b       	std	Y+17, r24	; 0x11
    207a:	89 89       	ldd	r24, Y+17	; 0x11
    207c:	9a 89       	ldd	r25, Y+18	; 0x12
    207e:	01 97       	sbiw	r24, 0x01	; 1
    2080:	f1 f7       	brne	.-4      	; 0x207e <LCD_sendCommand+0x29a>
    2082:	9a 8b       	std	Y+18, r25	; 0x12
    2084:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2086:	8b 89       	ldd	r24, Y+19	; 0x13
    2088:	9c 89       	ldd	r25, Y+20	; 0x14
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	9c 8b       	std	Y+20, r25	; 0x14
    208e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2090:	8b 89       	ldd	r24, Y+19	; 0x13
    2092:	9c 89       	ldd	r25, Y+20	; 0x14
    2094:	00 97       	sbiw	r24, 0x00	; 0
    2096:	69 f7       	brne	.-38     	; 0x2072 <LCD_sendCommand+0x28e>
    2098:	14 c0       	rjmp	.+40     	; 0x20c2 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    209a:	6d 89       	ldd	r22, Y+21	; 0x15
    209c:	7e 89       	ldd	r23, Y+22	; 0x16
    209e:	8f 89       	ldd	r24, Y+23	; 0x17
    20a0:	98 8d       	ldd	r25, Y+24	; 0x18
    20a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	9c 8b       	std	Y+20, r25	; 0x14
    20ac:	8b 8b       	std	Y+19, r24	; 0x13
    20ae:	8b 89       	ldd	r24, Y+19	; 0x13
    20b0:	9c 89       	ldd	r25, Y+20	; 0x14
    20b2:	98 8b       	std	Y+16, r25	; 0x10
    20b4:	8f 87       	std	Y+15, r24	; 0x0f
    20b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    20b8:	98 89       	ldd	r25, Y+16	; 0x10
    20ba:	01 97       	sbiw	r24, 0x01	; 1
    20bc:	f1 f7       	brne	.-4      	; 0x20ba <LCD_sendCommand+0x2d6>
    20be:	98 8b       	std	Y+16, r25	; 0x10
    20c0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	62 e0       	ldi	r22, 0x02	; 2
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	0e 94 0b 0b 	call	0x1616	; 0x1616 <GPIO_writePin>
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	a0 e8       	ldi	r26, 0x80	; 128
    20d2:	bf e3       	ldi	r27, 0x3F	; 63
    20d4:	8b 87       	std	Y+11, r24	; 0x0b
    20d6:	9c 87       	std	Y+12, r25	; 0x0c
    20d8:	ad 87       	std	Y+13, r26	; 0x0d
    20da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20de:	7c 85       	ldd	r23, Y+12	; 0x0c
    20e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	4a ef       	ldi	r20, 0xFA	; 250
    20ea:	54 e4       	ldi	r21, 0x44	; 68
    20ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	8f 83       	std	Y+7, r24	; 0x07
    20f6:	98 87       	std	Y+8, r25	; 0x08
    20f8:	a9 87       	std	Y+9, r26	; 0x09
    20fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20fc:	6f 81       	ldd	r22, Y+7	; 0x07
    20fe:	78 85       	ldd	r23, Y+8	; 0x08
    2100:	89 85       	ldd	r24, Y+9	; 0x09
    2102:	9a 85       	ldd	r25, Y+10	; 0x0a
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e8       	ldi	r20, 0x80	; 128
    210a:	5f e3       	ldi	r21, 0x3F	; 63
    210c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2110:	88 23       	and	r24, r24
    2112:	2c f4       	brge	.+10     	; 0x211e <LCD_sendCommand+0x33a>
		__ticks = 1;
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	9e 83       	std	Y+6, r25	; 0x06
    211a:	8d 83       	std	Y+5, r24	; 0x05
    211c:	3f c0       	rjmp	.+126    	; 0x219c <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    211e:	6f 81       	ldd	r22, Y+7	; 0x07
    2120:	78 85       	ldd	r23, Y+8	; 0x08
    2122:	89 85       	ldd	r24, Y+9	; 0x09
    2124:	9a 85       	ldd	r25, Y+10	; 0x0a
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	3f ef       	ldi	r19, 0xFF	; 255
    212a:	4f e7       	ldi	r20, 0x7F	; 127
    212c:	57 e4       	ldi	r21, 0x47	; 71
    212e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2132:	18 16       	cp	r1, r24
    2134:	4c f5       	brge	.+82     	; 0x2188 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2136:	6b 85       	ldd	r22, Y+11	; 0x0b
    2138:	7c 85       	ldd	r23, Y+12	; 0x0c
    213a:	8d 85       	ldd	r24, Y+13	; 0x0d
    213c:	9e 85       	ldd	r25, Y+14	; 0x0e
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	40 e2       	ldi	r20, 0x20	; 32
    2144:	51 e4       	ldi	r21, 0x41	; 65
    2146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	bc 01       	movw	r22, r24
    2150:	cd 01       	movw	r24, r26
    2152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	9e 83       	std	Y+6, r25	; 0x06
    215c:	8d 83       	std	Y+5, r24	; 0x05
    215e:	0f c0       	rjmp	.+30     	; 0x217e <LCD_sendCommand+0x39a>
    2160:	88 ec       	ldi	r24, 0xC8	; 200
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	9c 83       	std	Y+4, r25	; 0x04
    2166:	8b 83       	std	Y+3, r24	; 0x03
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	9c 81       	ldd	r25, Y+4	; 0x04
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	f1 f7       	brne	.-4      	; 0x216c <LCD_sendCommand+0x388>
    2170:	9c 83       	std	Y+4, r25	; 0x04
    2172:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2174:	8d 81       	ldd	r24, Y+5	; 0x05
    2176:	9e 81       	ldd	r25, Y+6	; 0x06
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	9e 83       	std	Y+6, r25	; 0x06
    217c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    217e:	8d 81       	ldd	r24, Y+5	; 0x05
    2180:	9e 81       	ldd	r25, Y+6	; 0x06
    2182:	00 97       	sbiw	r24, 0x00	; 0
    2184:	69 f7       	brne	.-38     	; 0x2160 <LCD_sendCommand+0x37c>
    2186:	14 c0       	rjmp	.+40     	; 0x21b0 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2188:	6f 81       	ldd	r22, Y+7	; 0x07
    218a:	78 85       	ldd	r23, Y+8	; 0x08
    218c:	89 85       	ldd	r24, Y+9	; 0x09
    218e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	9e 83       	std	Y+6, r25	; 0x06
    219a:	8d 83       	std	Y+5, r24	; 0x05
    219c:	8d 81       	ldd	r24, Y+5	; 0x05
    219e:	9e 81       	ldd	r25, Y+6	; 0x06
    21a0:	9a 83       	std	Y+2, r25	; 0x02
    21a2:	89 83       	std	Y+1, r24	; 0x01
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	9a 81       	ldd	r25, Y+2	; 0x02
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	f1 f7       	brne	.-4      	; 0x21a8 <LCD_sendCommand+0x3c4>
    21ac:	9a 83       	std	Y+2, r25	; 0x02
    21ae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    21b0:	e9 96       	adiw	r28, 0x39	; 57
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	f8 94       	cli
    21b6:	de bf       	out	0x3e, r29	; 62
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	cd bf       	out	0x3d, r28	; 61
    21bc:	cf 91       	pop	r28
    21be:	df 91       	pop	r29
    21c0:	08 95       	ret

000021c2 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	cd b7       	in	r28, 0x3d	; 61
    21c8:	de b7       	in	r29, 0x3e	; 62
    21ca:	e9 97       	sbiw	r28, 0x39	; 57
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	f8 94       	cli
    21d0:	de bf       	out	0x3e, r29	; 62
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	cd bf       	out	0x3d, r28	; 61
    21d6:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	60 e0       	ldi	r22, 0x00	; 0
    21dc:	41 e0       	ldi	r20, 0x01	; 1
    21de:	0e 94 0b 0b 	call	0x1616	; 0x1616 <GPIO_writePin>
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	a0 e8       	ldi	r26, 0x80	; 128
    21e8:	bf e3       	ldi	r27, 0x3F	; 63
    21ea:	8d ab       	std	Y+53, r24	; 0x35
    21ec:	9e ab       	std	Y+54, r25	; 0x36
    21ee:	af ab       	std	Y+55, r26	; 0x37
    21f0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f2:	6d a9       	ldd	r22, Y+53	; 0x35
    21f4:	7e a9       	ldd	r23, Y+54	; 0x36
    21f6:	8f a9       	ldd	r24, Y+55	; 0x37
    21f8:	98 ad       	ldd	r25, Y+56	; 0x38
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	4a ef       	ldi	r20, 0xFA	; 250
    2200:	54 e4       	ldi	r21, 0x44	; 68
    2202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	89 ab       	std	Y+49, r24	; 0x31
    220c:	9a ab       	std	Y+50, r25	; 0x32
    220e:	ab ab       	std	Y+51, r26	; 0x33
    2210:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2212:	69 a9       	ldd	r22, Y+49	; 0x31
    2214:	7a a9       	ldd	r23, Y+50	; 0x32
    2216:	8b a9       	ldd	r24, Y+51	; 0x33
    2218:	9c a9       	ldd	r25, Y+52	; 0x34
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	40 e8       	ldi	r20, 0x80	; 128
    2220:	5f e3       	ldi	r21, 0x3F	; 63
    2222:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2226:	88 23       	and	r24, r24
    2228:	2c f4       	brge	.+10     	; 0x2234 <LCD_displayCharacter+0x72>
		__ticks = 1;
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	98 ab       	std	Y+48, r25	; 0x30
    2230:	8f a7       	std	Y+47, r24	; 0x2f
    2232:	3f c0       	rjmp	.+126    	; 0x22b2 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2234:	69 a9       	ldd	r22, Y+49	; 0x31
    2236:	7a a9       	ldd	r23, Y+50	; 0x32
    2238:	8b a9       	ldd	r24, Y+51	; 0x33
    223a:	9c a9       	ldd	r25, Y+52	; 0x34
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	3f ef       	ldi	r19, 0xFF	; 255
    2240:	4f e7       	ldi	r20, 0x7F	; 127
    2242:	57 e4       	ldi	r21, 0x47	; 71
    2244:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2248:	18 16       	cp	r1, r24
    224a:	4c f5       	brge	.+82     	; 0x229e <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    224c:	6d a9       	ldd	r22, Y+53	; 0x35
    224e:	7e a9       	ldd	r23, Y+54	; 0x36
    2250:	8f a9       	ldd	r24, Y+55	; 0x37
    2252:	98 ad       	ldd	r25, Y+56	; 0x38
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e2       	ldi	r20, 0x20	; 32
    225a:	51 e4       	ldi	r21, 0x41	; 65
    225c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	bc 01       	movw	r22, r24
    2266:	cd 01       	movw	r24, r26
    2268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	98 ab       	std	Y+48, r25	; 0x30
    2272:	8f a7       	std	Y+47, r24	; 0x2f
    2274:	0f c0       	rjmp	.+30     	; 0x2294 <LCD_displayCharacter+0xd2>
    2276:	88 ec       	ldi	r24, 0xC8	; 200
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	9e a7       	std	Y+46, r25	; 0x2e
    227c:	8d a7       	std	Y+45, r24	; 0x2d
    227e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2280:	9e a5       	ldd	r25, Y+46	; 0x2e
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	f1 f7       	brne	.-4      	; 0x2282 <LCD_displayCharacter+0xc0>
    2286:	9e a7       	std	Y+46, r25	; 0x2e
    2288:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228a:	8f a5       	ldd	r24, Y+47	; 0x2f
    228c:	98 a9       	ldd	r25, Y+48	; 0x30
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	98 ab       	std	Y+48, r25	; 0x30
    2292:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2294:	8f a5       	ldd	r24, Y+47	; 0x2f
    2296:	98 a9       	ldd	r25, Y+48	; 0x30
    2298:	00 97       	sbiw	r24, 0x00	; 0
    229a:	69 f7       	brne	.-38     	; 0x2276 <LCD_displayCharacter+0xb4>
    229c:	14 c0       	rjmp	.+40     	; 0x22c6 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229e:	69 a9       	ldd	r22, Y+49	; 0x31
    22a0:	7a a9       	ldd	r23, Y+50	; 0x32
    22a2:	8b a9       	ldd	r24, Y+51	; 0x33
    22a4:	9c a9       	ldd	r25, Y+52	; 0x34
    22a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	98 ab       	std	Y+48, r25	; 0x30
    22b0:	8f a7       	std	Y+47, r24	; 0x2f
    22b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    22b4:	98 a9       	ldd	r25, Y+48	; 0x30
    22b6:	9c a7       	std	Y+44, r25	; 0x2c
    22b8:	8b a7       	std	Y+43, r24	; 0x2b
    22ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    22bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	f1 f7       	brne	.-4      	; 0x22be <LCD_displayCharacter+0xfc>
    22c2:	9c a7       	std	Y+44, r25	; 0x2c
    22c4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	62 e0       	ldi	r22, 0x02	; 2
    22ca:	41 e0       	ldi	r20, 0x01	; 1
    22cc:	0e 94 0b 0b 	call	0x1616	; 0x1616 <GPIO_writePin>
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	a0 e8       	ldi	r26, 0x80	; 128
    22d6:	bf e3       	ldi	r27, 0x3F	; 63
    22d8:	8f a3       	std	Y+39, r24	; 0x27
    22da:	98 a7       	std	Y+40, r25	; 0x28
    22dc:	a9 a7       	std	Y+41, r26	; 0x29
    22de:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e0:	6f a1       	ldd	r22, Y+39	; 0x27
    22e2:	78 a5       	ldd	r23, Y+40	; 0x28
    22e4:	89 a5       	ldd	r24, Y+41	; 0x29
    22e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	4a ef       	ldi	r20, 0xFA	; 250
    22ee:	54 e4       	ldi	r21, 0x44	; 68
    22f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	8b a3       	std	Y+35, r24	; 0x23
    22fa:	9c a3       	std	Y+36, r25	; 0x24
    22fc:	ad a3       	std	Y+37, r26	; 0x25
    22fe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2300:	6b a1       	ldd	r22, Y+35	; 0x23
    2302:	7c a1       	ldd	r23, Y+36	; 0x24
    2304:	8d a1       	ldd	r24, Y+37	; 0x25
    2306:	9e a1       	ldd	r25, Y+38	; 0x26
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	40 e8       	ldi	r20, 0x80	; 128
    230e:	5f e3       	ldi	r21, 0x3F	; 63
    2310:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2314:	88 23       	and	r24, r24
    2316:	2c f4       	brge	.+10     	; 0x2322 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	9a a3       	std	Y+34, r25	; 0x22
    231e:	89 a3       	std	Y+33, r24	; 0x21
    2320:	3f c0       	rjmp	.+126    	; 0x23a0 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2322:	6b a1       	ldd	r22, Y+35	; 0x23
    2324:	7c a1       	ldd	r23, Y+36	; 0x24
    2326:	8d a1       	ldd	r24, Y+37	; 0x25
    2328:	9e a1       	ldd	r25, Y+38	; 0x26
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	3f ef       	ldi	r19, 0xFF	; 255
    232e:	4f e7       	ldi	r20, 0x7F	; 127
    2330:	57 e4       	ldi	r21, 0x47	; 71
    2332:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2336:	18 16       	cp	r1, r24
    2338:	4c f5       	brge	.+82     	; 0x238c <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    233a:	6f a1       	ldd	r22, Y+39	; 0x27
    233c:	78 a5       	ldd	r23, Y+40	; 0x28
    233e:	89 a5       	ldd	r24, Y+41	; 0x29
    2340:	9a a5       	ldd	r25, Y+42	; 0x2a
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	40 e2       	ldi	r20, 0x20	; 32
    2348:	51 e4       	ldi	r21, 0x41	; 65
    234a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234e:	dc 01       	movw	r26, r24
    2350:	cb 01       	movw	r24, r22
    2352:	bc 01       	movw	r22, r24
    2354:	cd 01       	movw	r24, r26
    2356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	9a a3       	std	Y+34, r25	; 0x22
    2360:	89 a3       	std	Y+33, r24	; 0x21
    2362:	0f c0       	rjmp	.+30     	; 0x2382 <LCD_displayCharacter+0x1c0>
    2364:	88 ec       	ldi	r24, 0xC8	; 200
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	98 a3       	std	Y+32, r25	; 0x20
    236a:	8f 8f       	std	Y+31, r24	; 0x1f
    236c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    236e:	98 a1       	ldd	r25, Y+32	; 0x20
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	f1 f7       	brne	.-4      	; 0x2370 <LCD_displayCharacter+0x1ae>
    2374:	98 a3       	std	Y+32, r25	; 0x20
    2376:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2378:	89 a1       	ldd	r24, Y+33	; 0x21
    237a:	9a a1       	ldd	r25, Y+34	; 0x22
    237c:	01 97       	sbiw	r24, 0x01	; 1
    237e:	9a a3       	std	Y+34, r25	; 0x22
    2380:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2382:	89 a1       	ldd	r24, Y+33	; 0x21
    2384:	9a a1       	ldd	r25, Y+34	; 0x22
    2386:	00 97       	sbiw	r24, 0x00	; 0
    2388:	69 f7       	brne	.-38     	; 0x2364 <LCD_displayCharacter+0x1a2>
    238a:	14 c0       	rjmp	.+40     	; 0x23b4 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    238c:	6b a1       	ldd	r22, Y+35	; 0x23
    238e:	7c a1       	ldd	r23, Y+36	; 0x24
    2390:	8d a1       	ldd	r24, Y+37	; 0x25
    2392:	9e a1       	ldd	r25, Y+38	; 0x26
    2394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	9a a3       	std	Y+34, r25	; 0x22
    239e:	89 a3       	std	Y+33, r24	; 0x21
    23a0:	89 a1       	ldd	r24, Y+33	; 0x21
    23a2:	9a a1       	ldd	r25, Y+34	; 0x22
    23a4:	9e 8f       	std	Y+30, r25	; 0x1e
    23a6:	8d 8f       	std	Y+29, r24	; 0x1d
    23a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	f1 f7       	brne	.-4      	; 0x23ac <LCD_displayCharacter+0x1ea>
    23b0:	9e 8f       	std	Y+30, r25	; 0x1e
    23b2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	69 ad       	ldd	r22, Y+57	; 0x39
    23b8:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_writePort>
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	a0 e8       	ldi	r26, 0x80	; 128
    23c2:	bf e3       	ldi	r27, 0x3F	; 63
    23c4:	89 8f       	std	Y+25, r24	; 0x19
    23c6:	9a 8f       	std	Y+26, r25	; 0x1a
    23c8:	ab 8f       	std	Y+27, r26	; 0x1b
    23ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23cc:	69 8d       	ldd	r22, Y+25	; 0x19
    23ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	4a ef       	ldi	r20, 0xFA	; 250
    23da:	54 e4       	ldi	r21, 0x44	; 68
    23dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	8d 8b       	std	Y+21, r24	; 0x15
    23e6:	9e 8b       	std	Y+22, r25	; 0x16
    23e8:	af 8b       	std	Y+23, r26	; 0x17
    23ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23ec:	6d 89       	ldd	r22, Y+21	; 0x15
    23ee:	7e 89       	ldd	r23, Y+22	; 0x16
    23f0:	8f 89       	ldd	r24, Y+23	; 0x17
    23f2:	98 8d       	ldd	r25, Y+24	; 0x18
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	40 e8       	ldi	r20, 0x80	; 128
    23fa:	5f e3       	ldi	r21, 0x3F	; 63
    23fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2400:	88 23       	and	r24, r24
    2402:	2c f4       	brge	.+10     	; 0x240e <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	9c 8b       	std	Y+20, r25	; 0x14
    240a:	8b 8b       	std	Y+19, r24	; 0x13
    240c:	3f c0       	rjmp	.+126    	; 0x248c <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    240e:	6d 89       	ldd	r22, Y+21	; 0x15
    2410:	7e 89       	ldd	r23, Y+22	; 0x16
    2412:	8f 89       	ldd	r24, Y+23	; 0x17
    2414:	98 8d       	ldd	r25, Y+24	; 0x18
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	3f ef       	ldi	r19, 0xFF	; 255
    241a:	4f e7       	ldi	r20, 0x7F	; 127
    241c:	57 e4       	ldi	r21, 0x47	; 71
    241e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2422:	18 16       	cp	r1, r24
    2424:	4c f5       	brge	.+82     	; 0x2478 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2426:	69 8d       	ldd	r22, Y+25	; 0x19
    2428:	7a 8d       	ldd	r23, Y+26	; 0x1a
    242a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    242c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	40 e2       	ldi	r20, 0x20	; 32
    2434:	51 e4       	ldi	r21, 0x41	; 65
    2436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	bc 01       	movw	r22, r24
    2440:	cd 01       	movw	r24, r26
    2442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	9c 8b       	std	Y+20, r25	; 0x14
    244c:	8b 8b       	std	Y+19, r24	; 0x13
    244e:	0f c0       	rjmp	.+30     	; 0x246e <LCD_displayCharacter+0x2ac>
    2450:	88 ec       	ldi	r24, 0xC8	; 200
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	9a 8b       	std	Y+18, r25	; 0x12
    2456:	89 8b       	std	Y+17, r24	; 0x11
    2458:	89 89       	ldd	r24, Y+17	; 0x11
    245a:	9a 89       	ldd	r25, Y+18	; 0x12
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	f1 f7       	brne	.-4      	; 0x245c <LCD_displayCharacter+0x29a>
    2460:	9a 8b       	std	Y+18, r25	; 0x12
    2462:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2464:	8b 89       	ldd	r24, Y+19	; 0x13
    2466:	9c 89       	ldd	r25, Y+20	; 0x14
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	9c 8b       	std	Y+20, r25	; 0x14
    246c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246e:	8b 89       	ldd	r24, Y+19	; 0x13
    2470:	9c 89       	ldd	r25, Y+20	; 0x14
    2472:	00 97       	sbiw	r24, 0x00	; 0
    2474:	69 f7       	brne	.-38     	; 0x2450 <LCD_displayCharacter+0x28e>
    2476:	14 c0       	rjmp	.+40     	; 0x24a0 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2478:	6d 89       	ldd	r22, Y+21	; 0x15
    247a:	7e 89       	ldd	r23, Y+22	; 0x16
    247c:	8f 89       	ldd	r24, Y+23	; 0x17
    247e:	98 8d       	ldd	r25, Y+24	; 0x18
    2480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	9c 8b       	std	Y+20, r25	; 0x14
    248a:	8b 8b       	std	Y+19, r24	; 0x13
    248c:	8b 89       	ldd	r24, Y+19	; 0x13
    248e:	9c 89       	ldd	r25, Y+20	; 0x14
    2490:	98 8b       	std	Y+16, r25	; 0x10
    2492:	8f 87       	std	Y+15, r24	; 0x0f
    2494:	8f 85       	ldd	r24, Y+15	; 0x0f
    2496:	98 89       	ldd	r25, Y+16	; 0x10
    2498:	01 97       	sbiw	r24, 0x01	; 1
    249a:	f1 f7       	brne	.-4      	; 0x2498 <LCD_displayCharacter+0x2d6>
    249c:	98 8b       	std	Y+16, r25	; 0x10
    249e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	62 e0       	ldi	r22, 0x02	; 2
    24a4:	40 e0       	ldi	r20, 0x00	; 0
    24a6:	0e 94 0b 0b 	call	0x1616	; 0x1616 <GPIO_writePin>
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	a0 e8       	ldi	r26, 0x80	; 128
    24b0:	bf e3       	ldi	r27, 0x3F	; 63
    24b2:	8b 87       	std	Y+11, r24	; 0x0b
    24b4:	9c 87       	std	Y+12, r25	; 0x0c
    24b6:	ad 87       	std	Y+13, r26	; 0x0d
    24b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    24bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    24be:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	4a ef       	ldi	r20, 0xFA	; 250
    24c8:	54 e4       	ldi	r21, 0x44	; 68
    24ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	8f 83       	std	Y+7, r24	; 0x07
    24d4:	98 87       	std	Y+8, r25	; 0x08
    24d6:	a9 87       	std	Y+9, r26	; 0x09
    24d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24da:	6f 81       	ldd	r22, Y+7	; 0x07
    24dc:	78 85       	ldd	r23, Y+8	; 0x08
    24de:	89 85       	ldd	r24, Y+9	; 0x09
    24e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	40 e8       	ldi	r20, 0x80	; 128
    24e8:	5f e3       	ldi	r21, 0x3F	; 63
    24ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ee:	88 23       	and	r24, r24
    24f0:	2c f4       	brge	.+10     	; 0x24fc <LCD_displayCharacter+0x33a>
		__ticks = 1;
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	9e 83       	std	Y+6, r25	; 0x06
    24f8:	8d 83       	std	Y+5, r24	; 0x05
    24fa:	3f c0       	rjmp	.+126    	; 0x257a <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    24fc:	6f 81       	ldd	r22, Y+7	; 0x07
    24fe:	78 85       	ldd	r23, Y+8	; 0x08
    2500:	89 85       	ldd	r24, Y+9	; 0x09
    2502:	9a 85       	ldd	r25, Y+10	; 0x0a
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	3f ef       	ldi	r19, 0xFF	; 255
    2508:	4f e7       	ldi	r20, 0x7F	; 127
    250a:	57 e4       	ldi	r21, 0x47	; 71
    250c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2510:	18 16       	cp	r1, r24
    2512:	4c f5       	brge	.+82     	; 0x2566 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2514:	6b 85       	ldd	r22, Y+11	; 0x0b
    2516:	7c 85       	ldd	r23, Y+12	; 0x0c
    2518:	8d 85       	ldd	r24, Y+13	; 0x0d
    251a:	9e 85       	ldd	r25, Y+14	; 0x0e
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	40 e2       	ldi	r20, 0x20	; 32
    2522:	51 e4       	ldi	r21, 0x41	; 65
    2524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	bc 01       	movw	r22, r24
    252e:	cd 01       	movw	r24, r26
    2530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	9e 83       	std	Y+6, r25	; 0x06
    253a:	8d 83       	std	Y+5, r24	; 0x05
    253c:	0f c0       	rjmp	.+30     	; 0x255c <LCD_displayCharacter+0x39a>
    253e:	88 ec       	ldi	r24, 0xC8	; 200
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	9c 83       	std	Y+4, r25	; 0x04
    2544:	8b 83       	std	Y+3, r24	; 0x03
    2546:	8b 81       	ldd	r24, Y+3	; 0x03
    2548:	9c 81       	ldd	r25, Y+4	; 0x04
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	f1 f7       	brne	.-4      	; 0x254a <LCD_displayCharacter+0x388>
    254e:	9c 83       	std	Y+4, r25	; 0x04
    2550:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2552:	8d 81       	ldd	r24, Y+5	; 0x05
    2554:	9e 81       	ldd	r25, Y+6	; 0x06
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	9e 83       	std	Y+6, r25	; 0x06
    255a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255c:	8d 81       	ldd	r24, Y+5	; 0x05
    255e:	9e 81       	ldd	r25, Y+6	; 0x06
    2560:	00 97       	sbiw	r24, 0x00	; 0
    2562:	69 f7       	brne	.-38     	; 0x253e <LCD_displayCharacter+0x37c>
    2564:	14 c0       	rjmp	.+40     	; 0x258e <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2566:	6f 81       	ldd	r22, Y+7	; 0x07
    2568:	78 85       	ldd	r23, Y+8	; 0x08
    256a:	89 85       	ldd	r24, Y+9	; 0x09
    256c:	9a 85       	ldd	r25, Y+10	; 0x0a
    256e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	9e 83       	std	Y+6, r25	; 0x06
    2578:	8d 83       	std	Y+5, r24	; 0x05
    257a:	8d 81       	ldd	r24, Y+5	; 0x05
    257c:	9e 81       	ldd	r25, Y+6	; 0x06
    257e:	9a 83       	std	Y+2, r25	; 0x02
    2580:	89 83       	std	Y+1, r24	; 0x01
    2582:	89 81       	ldd	r24, Y+1	; 0x01
    2584:	9a 81       	ldd	r25, Y+2	; 0x02
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	f1 f7       	brne	.-4      	; 0x2586 <LCD_displayCharacter+0x3c4>
    258a:	9a 83       	std	Y+2, r25	; 0x02
    258c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    258e:	e9 96       	adiw	r28, 0x39	; 57
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	f8 94       	cli
    2594:	de bf       	out	0x3e, r29	; 62
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	cd bf       	out	0x3d, r28	; 61
    259a:	cf 91       	pop	r28
    259c:	df 91       	pop	r29
    259e:	08 95       	ret

000025a0 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    25a0:	df 93       	push	r29
    25a2:	cf 93       	push	r28
    25a4:	00 d0       	rcall	.+0      	; 0x25a6 <LCD_displayString+0x6>
    25a6:	0f 92       	push	r0
    25a8:	cd b7       	in	r28, 0x3d	; 61
    25aa:	de b7       	in	r29, 0x3e	; 62
    25ac:	9b 83       	std	Y+3, r25	; 0x03
    25ae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    25b0:	19 82       	std	Y+1, r1	; 0x01
    25b2:	0e c0       	rjmp	.+28     	; 0x25d0 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    25b4:	89 81       	ldd	r24, Y+1	; 0x01
    25b6:	28 2f       	mov	r18, r24
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	8a 81       	ldd	r24, Y+2	; 0x02
    25bc:	9b 81       	ldd	r25, Y+3	; 0x03
    25be:	fc 01       	movw	r30, r24
    25c0:	e2 0f       	add	r30, r18
    25c2:	f3 1f       	adc	r31, r19
    25c4:	80 81       	ld	r24, Z
    25c6:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <LCD_displayCharacter>
		i++;
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	8f 5f       	subi	r24, 0xFF	; 255
    25ce:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	28 2f       	mov	r18, r24
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	8a 81       	ldd	r24, Y+2	; 0x02
    25d8:	9b 81       	ldd	r25, Y+3	; 0x03
    25da:	fc 01       	movw	r30, r24
    25dc:	e2 0f       	add	r30, r18
    25de:	f3 1f       	adc	r31, r19
    25e0:	80 81       	ld	r24, Z
    25e2:	88 23       	and	r24, r24
    25e4:	39 f7       	brne	.-50     	; 0x25b4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    25e6:	0f 90       	pop	r0
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	cf 91       	pop	r28
    25ee:	df 91       	pop	r29
    25f0:	08 95       	ret

000025f2 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    25f2:	df 93       	push	r29
    25f4:	cf 93       	push	r28
    25f6:	00 d0       	rcall	.+0      	; 0x25f8 <LCD_moveCursor+0x6>
    25f8:	00 d0       	rcall	.+0      	; 0x25fa <LCD_moveCursor+0x8>
    25fa:	0f 92       	push	r0
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62
    2600:	8a 83       	std	Y+2, r24	; 0x02
    2602:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2604:	8a 81       	ldd	r24, Y+2	; 0x02
    2606:	28 2f       	mov	r18, r24
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	3d 83       	std	Y+5, r19	; 0x05
    260c:	2c 83       	std	Y+4, r18	; 0x04
    260e:	8c 81       	ldd	r24, Y+4	; 0x04
    2610:	9d 81       	ldd	r25, Y+5	; 0x05
    2612:	81 30       	cpi	r24, 0x01	; 1
    2614:	91 05       	cpc	r25, r1
    2616:	c1 f0       	breq	.+48     	; 0x2648 <LCD_moveCursor+0x56>
    2618:	2c 81       	ldd	r18, Y+4	; 0x04
    261a:	3d 81       	ldd	r19, Y+5	; 0x05
    261c:	22 30       	cpi	r18, 0x02	; 2
    261e:	31 05       	cpc	r19, r1
    2620:	2c f4       	brge	.+10     	; 0x262c <LCD_moveCursor+0x3a>
    2622:	8c 81       	ldd	r24, Y+4	; 0x04
    2624:	9d 81       	ldd	r25, Y+5	; 0x05
    2626:	00 97       	sbiw	r24, 0x00	; 0
    2628:	61 f0       	breq	.+24     	; 0x2642 <LCD_moveCursor+0x50>
    262a:	19 c0       	rjmp	.+50     	; 0x265e <LCD_moveCursor+0x6c>
    262c:	2c 81       	ldd	r18, Y+4	; 0x04
    262e:	3d 81       	ldd	r19, Y+5	; 0x05
    2630:	22 30       	cpi	r18, 0x02	; 2
    2632:	31 05       	cpc	r19, r1
    2634:	69 f0       	breq	.+26     	; 0x2650 <LCD_moveCursor+0x5e>
    2636:	8c 81       	ldd	r24, Y+4	; 0x04
    2638:	9d 81       	ldd	r25, Y+5	; 0x05
    263a:	83 30       	cpi	r24, 0x03	; 3
    263c:	91 05       	cpc	r25, r1
    263e:	61 f0       	breq	.+24     	; 0x2658 <LCD_moveCursor+0x66>
    2640:	0e c0       	rjmp	.+28     	; 0x265e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2642:	8b 81       	ldd	r24, Y+3	; 0x03
    2644:	89 83       	std	Y+1, r24	; 0x01
    2646:	0b c0       	rjmp	.+22     	; 0x265e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2648:	8b 81       	ldd	r24, Y+3	; 0x03
    264a:	80 5c       	subi	r24, 0xC0	; 192
    264c:	89 83       	std	Y+1, r24	; 0x01
    264e:	07 c0       	rjmp	.+14     	; 0x265e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2650:	8b 81       	ldd	r24, Y+3	; 0x03
    2652:	80 5f       	subi	r24, 0xF0	; 240
    2654:	89 83       	std	Y+1, r24	; 0x01
    2656:	03 c0       	rjmp	.+6      	; 0x265e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2658:	8b 81       	ldd	r24, Y+3	; 0x03
    265a:	80 5b       	subi	r24, 0xB0	; 176
    265c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    265e:	89 81       	ldd	r24, Y+1	; 0x01
    2660:	80 68       	ori	r24, 0x80	; 128
    2662:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <LCD_sendCommand>
}
    2666:	0f 90       	pop	r0
    2668:	0f 90       	pop	r0
    266a:	0f 90       	pop	r0
    266c:	0f 90       	pop	r0
    266e:	0f 90       	pop	r0
    2670:	cf 91       	pop	r28
    2672:	df 91       	pop	r29
    2674:	08 95       	ret

00002676 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2676:	df 93       	push	r29
    2678:	cf 93       	push	r28
    267a:	00 d0       	rcall	.+0      	; 0x267c <LCD_displayStringRowColumn+0x6>
    267c:	00 d0       	rcall	.+0      	; 0x267e <LCD_displayStringRowColumn+0x8>
    267e:	cd b7       	in	r28, 0x3d	; 61
    2680:	de b7       	in	r29, 0x3e	; 62
    2682:	89 83       	std	Y+1, r24	; 0x01
    2684:	6a 83       	std	Y+2, r22	; 0x02
    2686:	5c 83       	std	Y+4, r21	; 0x04
    2688:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	6a 81       	ldd	r22, Y+2	; 0x02
    268e:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2692:	8b 81       	ldd	r24, Y+3	; 0x03
    2694:	9c 81       	ldd	r25, Y+4	; 0x04
    2696:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_displayString>
}
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	0f 90       	pop	r0
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	08 95       	ret

000026a8 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    26a8:	df 93       	push	r29
    26aa:	cf 93       	push	r28
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
    26b0:	62 97       	sbiw	r28, 0x12	; 18
    26b2:	0f b6       	in	r0, 0x3f	; 63
    26b4:	f8 94       	cli
    26b6:	de bf       	out	0x3e, r29	; 62
    26b8:	0f be       	out	0x3f, r0	; 63
    26ba:	cd bf       	out	0x3d, r28	; 61
    26bc:	9a 8b       	std	Y+18, r25	; 0x12
    26be:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    26c0:	89 89       	ldd	r24, Y+17	; 0x11
    26c2:	9a 89       	ldd	r25, Y+18	; 0x12
    26c4:	9e 01       	movw	r18, r28
    26c6:	2f 5f       	subi	r18, 0xFF	; 255
    26c8:	3f 4f       	sbci	r19, 0xFF	; 255
    26ca:	b9 01       	movw	r22, r18
    26cc:	4a e0       	ldi	r20, 0x0A	; 10
    26ce:	50 e0       	ldi	r21, 0x00	; 0
    26d0:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <itoa>
   LCD_displayString(buff); /* Display the string */
    26d4:	ce 01       	movw	r24, r28
    26d6:	01 96       	adiw	r24, 0x01	; 1
    26d8:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_displayString>
}
    26dc:	62 96       	adiw	r28, 0x12	; 18
    26de:	0f b6       	in	r0, 0x3f	; 63
    26e0:	f8 94       	cli
    26e2:	de bf       	out	0x3e, r29	; 62
    26e4:	0f be       	out	0x3f, r0	; 63
    26e6:	cd bf       	out	0x3d, r28	; 61
    26e8:	cf 91       	pop	r28
    26ea:	df 91       	pop	r29
    26ec:	08 95       	ret

000026ee <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    26ee:	df 93       	push	r29
    26f0:	cf 93       	push	r28
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <LCD_sendCommand>
}
    26fc:	cf 91       	pop	r28
    26fe:	df 91       	pop	r29
    2700:	08 95       	ret

00002702 <__vector_7>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_COMPA_vect)
{
    2702:	1f 92       	push	r1
    2704:	0f 92       	push	r0
    2706:	0f b6       	in	r0, 0x3f	; 63
    2708:	0f 92       	push	r0
    270a:	11 24       	eor	r1, r1
    270c:	2f 93       	push	r18
    270e:	3f 93       	push	r19
    2710:	4f 93       	push	r20
    2712:	5f 93       	push	r21
    2714:	6f 93       	push	r22
    2716:	7f 93       	push	r23
    2718:	8f 93       	push	r24
    271a:	9f 93       	push	r25
    271c:	af 93       	push	r26
    271e:	bf 93       	push	r27
    2720:	ef 93       	push	r30
    2722:	ff 93       	push	r31
    2724:	df 93       	push	r29
    2726:	cf 93       	push	r28
    2728:	cd b7       	in	r28, 0x3d	; 61
    272a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    272c:	80 91 1a 01 	lds	r24, 0x011A
    2730:	90 91 1b 01 	lds	r25, 0x011B
    2734:	00 97       	sbiw	r24, 0x00	; 0
    2736:	29 f0       	breq	.+10     	; 0x2742 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after compare value is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2738:	e0 91 1a 01 	lds	r30, 0x011A
    273c:	f0 91 1b 01 	lds	r31, 0x011B
    2740:	09 95       	icall
	}
}
    2742:	cf 91       	pop	r28
    2744:	df 91       	pop	r29
    2746:	ff 91       	pop	r31
    2748:	ef 91       	pop	r30
    274a:	bf 91       	pop	r27
    274c:	af 91       	pop	r26
    274e:	9f 91       	pop	r25
    2750:	8f 91       	pop	r24
    2752:	7f 91       	pop	r23
    2754:	6f 91       	pop	r22
    2756:	5f 91       	pop	r21
    2758:	4f 91       	pop	r20
    275a:	3f 91       	pop	r19
    275c:	2f 91       	pop	r18
    275e:	0f 90       	pop	r0
    2760:	0f be       	out	0x3f, r0	; 63
    2762:	0f 90       	pop	r0
    2764:	1f 90       	pop	r1
    2766:	18 95       	reti

00002768 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    2768:	1f 92       	push	r1
    276a:	0f 92       	push	r0
    276c:	0f b6       	in	r0, 0x3f	; 63
    276e:	0f 92       	push	r0
    2770:	11 24       	eor	r1, r1
    2772:	2f 93       	push	r18
    2774:	3f 93       	push	r19
    2776:	4f 93       	push	r20
    2778:	5f 93       	push	r21
    277a:	6f 93       	push	r22
    277c:	7f 93       	push	r23
    277e:	8f 93       	push	r24
    2780:	9f 93       	push	r25
    2782:	af 93       	push	r26
    2784:	bf 93       	push	r27
    2786:	ef 93       	push	r30
    2788:	ff 93       	push	r31
    278a:	df 93       	push	r29
    278c:	cf 93       	push	r28
    278e:	cd b7       	in	r28, 0x3d	; 61
    2790:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2792:	80 91 1a 01 	lds	r24, 0x011A
    2796:	90 91 1b 01 	lds	r25, 0x011B
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	29 f0       	breq	.+10     	; 0x27a8 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after Overflow is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    279e:	e0 91 1a 01 	lds	r30, 0x011A
    27a2:	f0 91 1b 01 	lds	r31, 0x011B
    27a6:	09 95       	icall
	}
}
    27a8:	cf 91       	pop	r28
    27aa:	df 91       	pop	r29
    27ac:	ff 91       	pop	r31
    27ae:	ef 91       	pop	r30
    27b0:	bf 91       	pop	r27
    27b2:	af 91       	pop	r26
    27b4:	9f 91       	pop	r25
    27b6:	8f 91       	pop	r24
    27b8:	7f 91       	pop	r23
    27ba:	6f 91       	pop	r22
    27bc:	5f 91       	pop	r21
    27be:	4f 91       	pop	r20
    27c0:	3f 91       	pop	r19
    27c2:	2f 91       	pop	r18
    27c4:	0f 90       	pop	r0
    27c6:	0f be       	out	0x3f, r0	; 63
    27c8:	0f 90       	pop	r0
    27ca:	1f 90       	pop	r1
    27cc:	18 95       	reti

000027ce <Timer1_init>:
/*
 * Description :
 * Function to initialize the Timer1 driver
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    27ce:	df 93       	push	r29
    27d0:	cf 93       	push	r28
    27d2:	00 d0       	rcall	.+0      	; 0x27d4 <Timer1_init+0x6>
    27d4:	cd b7       	in	r28, 0x3d	; 61
    27d6:	de b7       	in	r29, 0x3e	; 62
    27d8:	9a 83       	std	Y+2, r25	; 0x02
    27da:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Config_Ptr->initial_value;		/* Set timer1 initial count to zero */
    27dc:	ac e4       	ldi	r26, 0x4C	; 76
    27de:	b0 e0       	ldi	r27, 0x00	; 0
    27e0:	e9 81       	ldd	r30, Y+1	; 0x01
    27e2:	fa 81       	ldd	r31, Y+2	; 0x02
    27e4:	80 81       	ld	r24, Z
    27e6:	91 81       	ldd	r25, Z+1	; 0x01
    27e8:	11 96       	adiw	r26, 0x01	; 1
    27ea:	9c 93       	st	X, r25
    27ec:	8e 93       	st	-X, r24
if (Config_Ptr->mode == 1)
    27ee:	e9 81       	ldd	r30, Y+1	; 0x01
    27f0:	fa 81       	ldd	r31, Y+2	; 0x02
    27f2:	85 81       	ldd	r24, Z+5	; 0x05
    27f4:	81 30       	cpi	r24, 0x01	; 1
    27f6:	51 f4       	brne	.+20     	; 0x280c <Timer1_init+0x3e>
	{OCR1A = Config_Ptr->compare_value;}    /* Set the Compare value if compare mode */
    27f8:	ea e4       	ldi	r30, 0x4A	; 74
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	a9 81       	ldd	r26, Y+1	; 0x01
    27fe:	ba 81       	ldd	r27, Y+2	; 0x02
    2800:	12 96       	adiw	r26, 0x02	; 2
    2802:	8d 91       	ld	r24, X+
    2804:	9c 91       	ld	r25, X
    2806:	13 97       	sbiw	r26, 0x03	; 3
    2808:	91 83       	std	Z+1, r25	; 0x01
    280a:	80 83       	st	Z, r24

if (Config_Ptr->mode == 1)
    280c:	e9 81       	ldd	r30, Y+1	; 0x01
    280e:	fa 81       	ldd	r31, Y+2	; 0x02
    2810:	85 81       	ldd	r24, Z+5	; 0x05
    2812:	81 30       	cpi	r24, 0x01	; 1
    2814:	41 f4       	brne	.+16     	; 0x2826 <Timer1_init+0x58>
	{TIMSK |= (1<<OCIE1A);} /* Enable Timer1 Compare A Interrupt */
    2816:	a9 e5       	ldi	r26, 0x59	; 89
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	e9 e5       	ldi	r30, 0x59	; 89
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	80 61       	ori	r24, 0x10	; 16
    2822:	8c 93       	st	X, r24
    2824:	0c c0       	rjmp	.+24     	; 0x283e <Timer1_init+0x70>
else if (Config_Ptr->mode == 0)
    2826:	e9 81       	ldd	r30, Y+1	; 0x01
    2828:	fa 81       	ldd	r31, Y+2	; 0x02
    282a:	85 81       	ldd	r24, Z+5	; 0x05
    282c:	88 23       	and	r24, r24
    282e:	39 f4       	brne	.+14     	; 0x283e <Timer1_init+0x70>
	{TIMSK |= (1<<TOIE1);} /* Enable Timer1 Overflow Interrupt */
    2830:	a9 e5       	ldi	r26, 0x59	; 89
    2832:	b0 e0       	ldi	r27, 0x00	; 0
    2834:	e9 e5       	ldi	r30, 0x59	; 89
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	80 81       	ld	r24, Z
    283a:	84 60       	ori	r24, 0x04	; 4
    283c:	8c 93       	st	X, r24
	/* Configure timer control register TCCR1A
	 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
	 * 2. FOC1A=1 FOC1B=1
	 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
	 */
	TCCR1A = (1<<FOC1A);
    283e:	ef e4       	ldi	r30, 0x4F	; 79
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	88 e0       	ldi	r24, 0x08	; 8
    2844:	80 83       	st	Z, r24

	/* Configure timer control register TCCR1B
	 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
	 * 2. Prescaler = F_CPU/8 CS10=0 CS11=1 CS12=0
	 */
if (Config_Ptr->mode == 1)
    2846:	e9 81       	ldd	r30, Y+1	; 0x01
    2848:	fa 81       	ldd	r31, Y+2	; 0x02
    284a:	85 81       	ldd	r24, Z+5	; 0x05
    284c:	81 30       	cpi	r24, 0x01	; 1
    284e:	21 f4       	brne	.+8      	; 0x2858 <Timer1_init+0x8a>
	{TCCR1B = (1<<WGM12);}
    2850:	ee e4       	ldi	r30, 0x4E	; 78
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	88 e0       	ldi	r24, 0x08	; 8
    2856:	80 83       	st	Z, r24

    /* Set timer1 prescaler */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    2858:	ae e4       	ldi	r26, 0x4E	; 78
    285a:	b0 e0       	ldi	r27, 0x00	; 0
    285c:	ee e4       	ldi	r30, 0x4E	; 78
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	80 81       	ld	r24, Z
    2862:	98 2f       	mov	r25, r24
    2864:	98 7f       	andi	r25, 0xF8	; 248
    2866:	e9 81       	ldd	r30, Y+1	; 0x01
    2868:	fa 81       	ldd	r31, Y+2	; 0x02
    286a:	84 81       	ldd	r24, Z+4	; 0x04
    286c:	89 2b       	or	r24, r25
    286e:	8c 93       	st	X, r24

}
    2870:	0f 90       	pop	r0
    2872:	0f 90       	pop	r0
    2874:	cf 91       	pop	r28
    2876:	df 91       	pop	r29
    2878:	08 95       	ret

0000287a <Timer1_deInit>:
/*
 * Description:
 * Function to disable the Timer1.
 */
void Timer1_deInit(void)
{
    287a:	df 93       	push	r29
    287c:	cf 93       	push	r28
    287e:	cd b7       	in	r28, 0x3d	; 61
    2880:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    2882:	ef e4       	ldi	r30, 0x4F	; 79
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	10 82       	st	Z, r1
	TCCR1B = 0;
    2888:	ee e4       	ldi	r30, 0x4E	; 78
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	10 82       	st	Z, r1
	TCNT1 = 0;
    288e:	ec e4       	ldi	r30, 0x4C	; 76
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	11 82       	std	Z+1, r1	; 0x01
    2894:	10 82       	st	Z, r1

	TIMSK &= ~(1<<OCIE1A); /* Disable Timer1 Compare A Interrupt */
    2896:	a9 e5       	ldi	r26, 0x59	; 89
    2898:	b0 e0       	ldi	r27, 0x00	; 0
    289a:	e9 e5       	ldi	r30, 0x59	; 89
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	80 81       	ld	r24, Z
    28a0:	8f 7e       	andi	r24, 0xEF	; 239
    28a2:	8c 93       	st	X, r24

	TIMSK &= ~(1<<TOIE1); /* Disable Timer1 Overflow Interrupt */
    28a4:	a9 e5       	ldi	r26, 0x59	; 89
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	e9 e5       	ldi	r30, 0x59	; 89
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	80 81       	ld	r24, Z
    28ae:	8b 7f       	andi	r24, 0xFB	; 251
    28b0:	8c 93       	st	X, r24
}
    28b2:	cf 91       	pop	r28
    28b4:	df 91       	pop	r29
    28b6:	08 95       	ret

000028b8 <Timer1_setCallBack>:
/*
 * Description:
 * Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    28b8:	df 93       	push	r29
    28ba:	cf 93       	push	r28
    28bc:	00 d0       	rcall	.+0      	; 0x28be <Timer1_setCallBack+0x6>
    28be:	cd b7       	in	r28, 0x3d	; 61
    28c0:	de b7       	in	r29, 0x3e	; 62
    28c2:	9a 83       	std	Y+2, r25	; 0x02
    28c4:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    28c6:	89 81       	ldd	r24, Y+1	; 0x01
    28c8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ca:	90 93 1b 01 	sts	0x011B, r25
    28ce:	80 93 1a 01 	sts	0x011A, r24
}
    28d2:	0f 90       	pop	r0
    28d4:	0f 90       	pop	r0
    28d6:	cf 91       	pop	r28
    28d8:	df 91       	pop	r29
    28da:	08 95       	ret

000028dc <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    28dc:	df 93       	push	r29
    28de:	cf 93       	push	r28
    28e0:	00 d0       	rcall	.+0      	; 0x28e2 <UART_init+0x6>
    28e2:	00 d0       	rcall	.+0      	; 0x28e4 <UART_init+0x8>
    28e4:	cd b7       	in	r28, 0x3d	; 61
    28e6:	de b7       	in	r29, 0x3e	; 62
    28e8:	9c 83       	std	Y+4, r25	; 0x04
    28ea:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    28ec:	1a 82       	std	Y+2, r1	; 0x02
    28ee:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    28f0:	eb e2       	ldi	r30, 0x2B	; 43
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	82 e0       	ldi	r24, 0x02	; 2
    28f6:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    28f8:	ea e2       	ldi	r30, 0x2A	; 42
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	88 e1       	ldi	r24, 0x18	; 24
    28fe:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    2900:	e0 e4       	ldi	r30, 0x40	; 64
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	80 e8       	ldi	r24, 0x80	; 128
    2906:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity)<<4);
    2908:	a0 e4       	ldi	r26, 0x40	; 64
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	e0 e4       	ldi	r30, 0x40	; 64
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	80 81       	ld	r24, Z
    2912:	28 2f       	mov	r18, r24
    2914:	2f 7c       	andi	r18, 0xCF	; 207
    2916:	eb 81       	ldd	r30, Y+3	; 0x03
    2918:	fc 81       	ldd	r31, Y+4	; 0x04
    291a:	81 81       	ldd	r24, Z+1	; 0x01
    291c:	88 2f       	mov	r24, r24
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	82 95       	swap	r24
    2922:	92 95       	swap	r25
    2924:	90 7f       	andi	r25, 0xF0	; 240
    2926:	98 27       	eor	r25, r24
    2928:	80 7f       	andi	r24, 0xF0	; 240
    292a:	98 27       	eor	r25, r24
    292c:	82 2b       	or	r24, r18
    292e:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_bit)<<3);
    2930:	a0 e4       	ldi	r26, 0x40	; 64
    2932:	b0 e0       	ldi	r27, 0x00	; 0
    2934:	e0 e4       	ldi	r30, 0x40	; 64
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	80 81       	ld	r24, Z
    293a:	28 2f       	mov	r18, r24
    293c:	27 7f       	andi	r18, 0xF7	; 247
    293e:	eb 81       	ldd	r30, Y+3	; 0x03
    2940:	fc 81       	ldd	r31, Y+4	; 0x04
    2942:	82 81       	ldd	r24, Z+2	; 0x02
    2944:	88 2f       	mov	r24, r24
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	88 0f       	add	r24, r24
    294a:	99 1f       	adc	r25, r25
    294c:	88 0f       	add	r24, r24
    294e:	99 1f       	adc	r25, r25
    2950:	88 0f       	add	r24, r24
    2952:	99 1f       	adc	r25, r25
    2954:	82 2b       	or	r24, r18
    2956:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->bit_data)<<1);
    2958:	a0 e4       	ldi	r26, 0x40	; 64
    295a:	b0 e0       	ldi	r27, 0x00	; 0
    295c:	e0 e4       	ldi	r30, 0x40	; 64
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	80 81       	ld	r24, Z
    2962:	28 2f       	mov	r18, r24
    2964:	29 7f       	andi	r18, 0xF9	; 249
    2966:	eb 81       	ldd	r30, Y+3	; 0x03
    2968:	fc 81       	ldd	r31, Y+4	; 0x04
    296a:	80 81       	ld	r24, Z
    296c:	88 2f       	mov	r24, r24
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	88 0f       	add	r24, r24
    2972:	99 1f       	adc	r25, r25
    2974:	82 2b       	or	r24, r18
    2976:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2978:	eb 81       	ldd	r30, Y+3	; 0x03
    297a:	fc 81       	ldd	r31, Y+4	; 0x04
    297c:	83 81       	ldd	r24, Z+3	; 0x03
    297e:	94 81       	ldd	r25, Z+4	; 0x04
    2980:	cc 01       	movw	r24, r24
    2982:	a0 e0       	ldi	r26, 0x00	; 0
    2984:	b0 e0       	ldi	r27, 0x00	; 0
    2986:	88 0f       	add	r24, r24
    2988:	99 1f       	adc	r25, r25
    298a:	aa 1f       	adc	r26, r26
    298c:	bb 1f       	adc	r27, r27
    298e:	88 0f       	add	r24, r24
    2990:	99 1f       	adc	r25, r25
    2992:	aa 1f       	adc	r26, r26
    2994:	bb 1f       	adc	r27, r27
    2996:	88 0f       	add	r24, r24
    2998:	99 1f       	adc	r25, r25
    299a:	aa 1f       	adc	r26, r26
    299c:	bb 1f       	adc	r27, r27
    299e:	9c 01       	movw	r18, r24
    29a0:	ad 01       	movw	r20, r26
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	92 e1       	ldi	r25, 0x12	; 18
    29a6:	aa e7       	ldi	r26, 0x7A	; 122
    29a8:	b0 e0       	ldi	r27, 0x00	; 0
    29aa:	bc 01       	movw	r22, r24
    29ac:	cd 01       	movw	r24, r26
    29ae:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__udivmodsi4>
    29b2:	da 01       	movw	r26, r20
    29b4:	c9 01       	movw	r24, r18
    29b6:	01 97       	sbiw	r24, 0x01	; 1
    29b8:	9a 83       	std	Y+2, r25	; 0x02
    29ba:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    29bc:	e0 e4       	ldi	r30, 0x40	; 64
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	89 81       	ldd	r24, Y+1	; 0x01
    29c2:	9a 81       	ldd	r25, Y+2	; 0x02
    29c4:	89 2f       	mov	r24, r25
    29c6:	99 27       	eor	r25, r25
    29c8:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    29ca:	e9 e2       	ldi	r30, 0x29	; 41
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	89 81       	ldd	r24, Y+1	; 0x01
    29d0:	80 83       	st	Z, r24
}
    29d2:	0f 90       	pop	r0
    29d4:	0f 90       	pop	r0
    29d6:	0f 90       	pop	r0
    29d8:	0f 90       	pop	r0
    29da:	cf 91       	pop	r28
    29dc:	df 91       	pop	r29
    29de:	08 95       	ret

000029e0 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    29e0:	df 93       	push	r29
    29e2:	cf 93       	push	r28
    29e4:	0f 92       	push	r0
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
    29ea:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    29ec:	eb e2       	ldi	r30, 0x2B	; 43
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	80 81       	ld	r24, Z
    29f2:	88 2f       	mov	r24, r24
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	80 72       	andi	r24, 0x20	; 32
    29f8:	90 70       	andi	r25, 0x00	; 0
    29fa:	00 97       	sbiw	r24, 0x00	; 0
    29fc:	b9 f3       	breq	.-18     	; 0x29ec <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    29fe:	ec e2       	ldi	r30, 0x2C	; 44
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2a06:	0f 90       	pop	r0
    2a08:	cf 91       	pop	r28
    2a0a:	df 91       	pop	r29
    2a0c:	08 95       	ret

00002a0e <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2a0e:	df 93       	push	r29
    2a10:	cf 93       	push	r28
    2a12:	cd b7       	in	r28, 0x3d	; 61
    2a14:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2a16:	eb e2       	ldi	r30, 0x2B	; 43
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	80 81       	ld	r24, Z
    2a1c:	88 23       	and	r24, r24
    2a1e:	dc f7       	brge	.-10     	; 0x2a16 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2a20:	ec e2       	ldi	r30, 0x2C	; 44
    2a22:	f0 e0       	ldi	r31, 0x00	; 0
    2a24:	80 81       	ld	r24, Z
}
    2a26:	cf 91       	pop	r28
    2a28:	df 91       	pop	r29
    2a2a:	08 95       	ret

00002a2c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2a2c:	df 93       	push	r29
    2a2e:	cf 93       	push	r28
    2a30:	00 d0       	rcall	.+0      	; 0x2a32 <UART_sendString+0x6>
    2a32:	0f 92       	push	r0
    2a34:	cd b7       	in	r28, 0x3d	; 61
    2a36:	de b7       	in	r29, 0x3e	; 62
    2a38:	9b 83       	std	Y+3, r25	; 0x03
    2a3a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a3c:	19 82       	std	Y+1, r1	; 0x01
    2a3e:	0e c0       	rjmp	.+28     	; 0x2a5c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2a40:	89 81       	ldd	r24, Y+1	; 0x01
    2a42:	28 2f       	mov	r18, r24
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	8a 81       	ldd	r24, Y+2	; 0x02
    2a48:	9b 81       	ldd	r25, Y+3	; 0x03
    2a4a:	fc 01       	movw	r30, r24
    2a4c:	e2 0f       	add	r30, r18
    2a4e:	f3 1f       	adc	r31, r19
    2a50:	80 81       	ld	r24, Z
    2a52:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <UART_sendByte>
		i++;
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
    2a58:	8f 5f       	subi	r24, 0xFF	; 255
    2a5a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2a5c:	89 81       	ldd	r24, Y+1	; 0x01
    2a5e:	28 2f       	mov	r18, r24
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	8a 81       	ldd	r24, Y+2	; 0x02
    2a64:	9b 81       	ldd	r25, Y+3	; 0x03
    2a66:	fc 01       	movw	r30, r24
    2a68:	e2 0f       	add	r30, r18
    2a6a:	f3 1f       	adc	r31, r19
    2a6c:	80 81       	ld	r24, Z
    2a6e:	88 23       	and	r24, r24
    2a70:	39 f7       	brne	.-50     	; 0x2a40 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2a72:	0f 90       	pop	r0
    2a74:	0f 90       	pop	r0
    2a76:	0f 90       	pop	r0
    2a78:	cf 91       	pop	r28
    2a7a:	df 91       	pop	r29
    2a7c:	08 95       	ret

00002a7e <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2a7e:	0f 93       	push	r16
    2a80:	1f 93       	push	r17
    2a82:	df 93       	push	r29
    2a84:	cf 93       	push	r28
    2a86:	00 d0       	rcall	.+0      	; 0x2a88 <UART_receiveString+0xa>
    2a88:	0f 92       	push	r0
    2a8a:	cd b7       	in	r28, 0x3d	; 61
    2a8c:	de b7       	in	r29, 0x3e	; 62
    2a8e:	9b 83       	std	Y+3, r25	; 0x03
    2a90:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a92:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	28 2f       	mov	r18, r24
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a9e:	8c 01       	movw	r16, r24
    2aa0:	02 0f       	add	r16, r18
    2aa2:	13 1f       	adc	r17, r19
    2aa4:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <UART_recieveByte>
    2aa8:	f8 01       	movw	r30, r16
    2aaa:	80 83       	st	Z, r24
    2aac:	0f c0       	rjmp	.+30     	; 0x2acc <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2aae:	89 81       	ldd	r24, Y+1	; 0x01
    2ab0:	8f 5f       	subi	r24, 0xFF	; 255
    2ab2:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2ab4:	89 81       	ldd	r24, Y+1	; 0x01
    2ab6:	28 2f       	mov	r18, r24
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	8a 81       	ldd	r24, Y+2	; 0x02
    2abc:	9b 81       	ldd	r25, Y+3	; 0x03
    2abe:	8c 01       	movw	r16, r24
    2ac0:	02 0f       	add	r16, r18
    2ac2:	13 1f       	adc	r17, r19
    2ac4:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <UART_recieveByte>
    2ac8:	f8 01       	movw	r30, r16
    2aca:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2acc:	89 81       	ldd	r24, Y+1	; 0x01
    2ace:	28 2f       	mov	r18, r24
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad6:	fc 01       	movw	r30, r24
    2ad8:	e2 0f       	add	r30, r18
    2ada:	f3 1f       	adc	r31, r19
    2adc:	80 81       	ld	r24, Z
    2ade:	83 32       	cpi	r24, 0x23	; 35
    2ae0:	31 f7       	brne	.-52     	; 0x2aae <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2ae2:	89 81       	ldd	r24, Y+1	; 0x01
    2ae4:	28 2f       	mov	r18, r24
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aea:	9b 81       	ldd	r25, Y+3	; 0x03
    2aec:	fc 01       	movw	r30, r24
    2aee:	e2 0f       	add	r30, r18
    2af0:	f3 1f       	adc	r31, r19
    2af2:	10 82       	st	Z, r1
}
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0
    2af8:	0f 90       	pop	r0
    2afa:	cf 91       	pop	r28
    2afc:	df 91       	pop	r29
    2afe:	1f 91       	pop	r17
    2b00:	0f 91       	pop	r16
    2b02:	08 95       	ret

00002b04 <__udivmodsi4>:
    2b04:	a1 e2       	ldi	r26, 0x21	; 33
    2b06:	1a 2e       	mov	r1, r26
    2b08:	aa 1b       	sub	r26, r26
    2b0a:	bb 1b       	sub	r27, r27
    2b0c:	fd 01       	movw	r30, r26
    2b0e:	0d c0       	rjmp	.+26     	; 0x2b2a <__udivmodsi4_ep>

00002b10 <__udivmodsi4_loop>:
    2b10:	aa 1f       	adc	r26, r26
    2b12:	bb 1f       	adc	r27, r27
    2b14:	ee 1f       	adc	r30, r30
    2b16:	ff 1f       	adc	r31, r31
    2b18:	a2 17       	cp	r26, r18
    2b1a:	b3 07       	cpc	r27, r19
    2b1c:	e4 07       	cpc	r30, r20
    2b1e:	f5 07       	cpc	r31, r21
    2b20:	20 f0       	brcs	.+8      	; 0x2b2a <__udivmodsi4_ep>
    2b22:	a2 1b       	sub	r26, r18
    2b24:	b3 0b       	sbc	r27, r19
    2b26:	e4 0b       	sbc	r30, r20
    2b28:	f5 0b       	sbc	r31, r21

00002b2a <__udivmodsi4_ep>:
    2b2a:	66 1f       	adc	r22, r22
    2b2c:	77 1f       	adc	r23, r23
    2b2e:	88 1f       	adc	r24, r24
    2b30:	99 1f       	adc	r25, r25
    2b32:	1a 94       	dec	r1
    2b34:	69 f7       	brne	.-38     	; 0x2b10 <__udivmodsi4_loop>
    2b36:	60 95       	com	r22
    2b38:	70 95       	com	r23
    2b3a:	80 95       	com	r24
    2b3c:	90 95       	com	r25
    2b3e:	9b 01       	movw	r18, r22
    2b40:	ac 01       	movw	r20, r24
    2b42:	bd 01       	movw	r22, r26
    2b44:	cf 01       	movw	r24, r30
    2b46:	08 95       	ret

00002b48 <__prologue_saves__>:
    2b48:	2f 92       	push	r2
    2b4a:	3f 92       	push	r3
    2b4c:	4f 92       	push	r4
    2b4e:	5f 92       	push	r5
    2b50:	6f 92       	push	r6
    2b52:	7f 92       	push	r7
    2b54:	8f 92       	push	r8
    2b56:	9f 92       	push	r9
    2b58:	af 92       	push	r10
    2b5a:	bf 92       	push	r11
    2b5c:	cf 92       	push	r12
    2b5e:	df 92       	push	r13
    2b60:	ef 92       	push	r14
    2b62:	ff 92       	push	r15
    2b64:	0f 93       	push	r16
    2b66:	1f 93       	push	r17
    2b68:	cf 93       	push	r28
    2b6a:	df 93       	push	r29
    2b6c:	cd b7       	in	r28, 0x3d	; 61
    2b6e:	de b7       	in	r29, 0x3e	; 62
    2b70:	ca 1b       	sub	r28, r26
    2b72:	db 0b       	sbc	r29, r27
    2b74:	0f b6       	in	r0, 0x3f	; 63
    2b76:	f8 94       	cli
    2b78:	de bf       	out	0x3e, r29	; 62
    2b7a:	0f be       	out	0x3f, r0	; 63
    2b7c:	cd bf       	out	0x3d, r28	; 61
    2b7e:	09 94       	ijmp

00002b80 <__epilogue_restores__>:
    2b80:	2a 88       	ldd	r2, Y+18	; 0x12
    2b82:	39 88       	ldd	r3, Y+17	; 0x11
    2b84:	48 88       	ldd	r4, Y+16	; 0x10
    2b86:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b88:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b8a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b8c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b8e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b90:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b92:	b9 84       	ldd	r11, Y+9	; 0x09
    2b94:	c8 84       	ldd	r12, Y+8	; 0x08
    2b96:	df 80       	ldd	r13, Y+7	; 0x07
    2b98:	ee 80       	ldd	r14, Y+6	; 0x06
    2b9a:	fd 80       	ldd	r15, Y+5	; 0x05
    2b9c:	0c 81       	ldd	r16, Y+4	; 0x04
    2b9e:	1b 81       	ldd	r17, Y+3	; 0x03
    2ba0:	aa 81       	ldd	r26, Y+2	; 0x02
    2ba2:	b9 81       	ldd	r27, Y+1	; 0x01
    2ba4:	ce 0f       	add	r28, r30
    2ba6:	d1 1d       	adc	r29, r1
    2ba8:	0f b6       	in	r0, 0x3f	; 63
    2baa:	f8 94       	cli
    2bac:	de bf       	out	0x3e, r29	; 62
    2bae:	0f be       	out	0x3f, r0	; 63
    2bb0:	cd bf       	out	0x3d, r28	; 61
    2bb2:	ed 01       	movw	r28, r26
    2bb4:	08 95       	ret

00002bb6 <itoa>:
    2bb6:	fb 01       	movw	r30, r22
    2bb8:	9f 01       	movw	r18, r30
    2bba:	e8 94       	clt
    2bbc:	42 30       	cpi	r20, 0x02	; 2
    2bbe:	c4 f0       	brlt	.+48     	; 0x2bf0 <itoa+0x3a>
    2bc0:	45 32       	cpi	r20, 0x25	; 37
    2bc2:	b4 f4       	brge	.+44     	; 0x2bf0 <itoa+0x3a>
    2bc4:	4a 30       	cpi	r20, 0x0A	; 10
    2bc6:	29 f4       	brne	.+10     	; 0x2bd2 <itoa+0x1c>
    2bc8:	97 fb       	bst	r25, 7
    2bca:	1e f4       	brtc	.+6      	; 0x2bd2 <itoa+0x1c>
    2bcc:	90 95       	com	r25
    2bce:	81 95       	neg	r24
    2bd0:	9f 4f       	sbci	r25, 0xFF	; 255
    2bd2:	64 2f       	mov	r22, r20
    2bd4:	77 27       	eor	r23, r23
    2bd6:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <__udivmodhi4>
    2bda:	80 5d       	subi	r24, 0xD0	; 208
    2bdc:	8a 33       	cpi	r24, 0x3A	; 58
    2bde:	0c f0       	brlt	.+2      	; 0x2be2 <itoa+0x2c>
    2be0:	89 5d       	subi	r24, 0xD9	; 217
    2be2:	81 93       	st	Z+, r24
    2be4:	cb 01       	movw	r24, r22
    2be6:	00 97       	sbiw	r24, 0x00	; 0
    2be8:	a1 f7       	brne	.-24     	; 0x2bd2 <itoa+0x1c>
    2bea:	16 f4       	brtc	.+4      	; 0x2bf0 <itoa+0x3a>
    2bec:	5d e2       	ldi	r21, 0x2D	; 45
    2bee:	51 93       	st	Z+, r21
    2bf0:	10 82       	st	Z, r1
    2bf2:	c9 01       	movw	r24, r18
    2bf4:	0c 94 fc 15 	jmp	0x2bf8	; 0x2bf8 <strrev>

00002bf8 <strrev>:
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	fc 01       	movw	r30, r24
    2bfc:	67 2f       	mov	r22, r23
    2bfe:	71 91       	ld	r23, Z+
    2c00:	77 23       	and	r23, r23
    2c02:	e1 f7       	brne	.-8      	; 0x2bfc <strrev+0x4>
    2c04:	32 97       	sbiw	r30, 0x02	; 2
    2c06:	04 c0       	rjmp	.+8      	; 0x2c10 <strrev+0x18>
    2c08:	7c 91       	ld	r23, X
    2c0a:	6d 93       	st	X+, r22
    2c0c:	70 83       	st	Z, r23
    2c0e:	62 91       	ld	r22, -Z
    2c10:	ae 17       	cp	r26, r30
    2c12:	bf 07       	cpc	r27, r31
    2c14:	c8 f3       	brcs	.-14     	; 0x2c08 <strrev+0x10>
    2c16:	08 95       	ret

00002c18 <__udivmodhi4>:
    2c18:	aa 1b       	sub	r26, r26
    2c1a:	bb 1b       	sub	r27, r27
    2c1c:	51 e1       	ldi	r21, 0x11	; 17
    2c1e:	07 c0       	rjmp	.+14     	; 0x2c2e <__udivmodhi4_ep>

00002c20 <__udivmodhi4_loop>:
    2c20:	aa 1f       	adc	r26, r26
    2c22:	bb 1f       	adc	r27, r27
    2c24:	a6 17       	cp	r26, r22
    2c26:	b7 07       	cpc	r27, r23
    2c28:	10 f0       	brcs	.+4      	; 0x2c2e <__udivmodhi4_ep>
    2c2a:	a6 1b       	sub	r26, r22
    2c2c:	b7 0b       	sbc	r27, r23

00002c2e <__udivmodhi4_ep>:
    2c2e:	88 1f       	adc	r24, r24
    2c30:	99 1f       	adc	r25, r25
    2c32:	5a 95       	dec	r21
    2c34:	a9 f7       	brne	.-22     	; 0x2c20 <__udivmodhi4_loop>
    2c36:	80 95       	com	r24
    2c38:	90 95       	com	r25
    2c3a:	bc 01       	movw	r22, r24
    2c3c:	cd 01       	movw	r24, r26
    2c3e:	08 95       	ret

00002c40 <_exit>:
    2c40:	f8 94       	cli

00002c42 <__stop_program>:
    2c42:	ff cf       	rjmp	.-2      	; 0x2c42 <__stop_program>
