
MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00001f06  00001f9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00800074  00800074  00001fae  2**0
                  ALLOC
  3 .stab         000022d4  00000000  00000000  00001fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000126c  00000000  00000000  00004284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000054f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005630  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000057a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000073e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000082d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009084  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000091e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009471  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009c3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 83 0c 	jmp	0x1906	; 0x1906 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e0       	ldi	r30, 0x06	; 6
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 39       	cpi	r26, 0x96	; 150
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 88 07 	call	0xf10	; 0xf10 <main>
      8a:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4a 0f 	jmp	0x1e94	; 0x1e94 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 56 0f 	jmp	0x1eac	; 0x1eac <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 56 0f 	jmp	0x1eac	; 0x1eac <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4a 0f 	jmp	0x1e94	; 0x1e94 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 56 0f 	jmp	0x1eac	; 0x1eac <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 56 0f 	jmp	0x1eac	; 0x1eac <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 56 0f 	jmp	0x1eac	; 0x1eac <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Count>:
 * Description :
 * Call back function
 * 1. called when the timer gets a compare match to increment the counter
 */
void Count(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* increments the counter after getting a compare match */
	timer_counter++;
     b4e:	80 91 74 00 	lds	r24, 0x0074
     b52:	90 91 75 00 	lds	r25, 0x0075
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	90 93 75 00 	sts	0x0075, r25
     b5c:	80 93 74 00 	sts	0x0074, r24
}
     b60:	cf 91       	pop	r28
     b62:	df 91       	pop	r29
     b64:	08 95       	ret

00000b66 <Buzzer_Ring>:
 * 1. turn on buzzer
 * 2. starts the timer
 * 3. after the required time it stops the buzzer and stops the timer
 */
void Buzzer_Ring(void)
{
     b66:	df 93       	push	r29
     b68:	cf 93       	push	r28
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
	Buzzer_on(); /* turn on the buzzer */
     b6e:	0e 94 05 08 	call	0x100a	; 0x100a <Buzzer_on>
	Timer1_init(&TIMER1_Config);  /* initialize Timer1 driver by sending configuration structure*/
     b72:	88 e6       	ldi	r24, 0x68	; 104
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <Timer1_init>
	while(timer_counter!=20){}    /* 60 seconds */
     b7a:	80 91 74 00 	lds	r24, 0x0074
     b7e:	90 91 75 00 	lds	r25, 0x0075
     b82:	84 31       	cpi	r24, 0x14	; 20
     b84:	91 05       	cpc	r25, r1
     b86:	c9 f7       	brne	.-14     	; 0xb7a <Buzzer_Ring+0x14>
	Buzzer_off();  /* turn off the buzzer */
     b88:	0e 94 11 08 	call	0x1022	; 0x1022 <Buzzer_off>
	Timer1_deInit();  /* disable the Timer1 */
     b8c:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <Timer1_deInit>
	condition=0;      /* clear the condition */
     b90:	10 92 7f 00 	sts	0x007F, r1
	timer_counter=0;  /* reset counter to be ready for the next timer call */
     b94:	10 92 75 00 	sts	0x0075, r1
     b98:	10 92 74 00 	sts	0x0074, r1
}
     b9c:	cf 91       	pop	r28
     b9e:	df 91       	pop	r29
     ba0:	08 95       	ret

00000ba2 <Verify_Password>:
 * used to get the password from the HMI ECU
 * 1. compare the new password with the password stored at EEPROM
 * 2. send message about the result to HMI ECU
 */
void Verify_Password(void)
{
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	df 93       	push	r29
     ba8:	cf 93       	push	r28
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
	for(counter=0;counter<5;counter++)
     bae:	10 92 8e 00 	sts	0x008E, r1
     bb2:	0f c0       	rjmp	.+30     	; 0xbd2 <Verify_Password+0x30>
	{
		/* store the received password byte by byte */
		new_password[counter]= UART_recieveByte();
     bb4:	80 91 8e 00 	lds	r24, 0x008E
     bb8:	08 2f       	mov	r16, r24
     bba:	10 e0       	ldi	r17, 0x00	; 0
     bbc:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <UART_recieveByte>
     bc0:	f8 01       	movw	r30, r16
     bc2:	e0 58       	subi	r30, 0x80	; 128
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	80 83       	st	Z, r24
 * 1. compare the new password with the password stored at EEPROM
 * 2. send message about the result to HMI ECU
 */
void Verify_Password(void)
{
	for(counter=0;counter<5;counter++)
     bc8:	80 91 8e 00 	lds	r24, 0x008E
     bcc:	8f 5f       	subi	r24, 0xFF	; 255
     bce:	80 93 8e 00 	sts	0x008E, r24
     bd2:	80 91 8e 00 	lds	r24, 0x008E
     bd6:	85 30       	cpi	r24, 0x05	; 5
     bd8:	68 f3       	brcs	.-38     	; 0xbb4 <Verify_Password+0x12>
	{
		/* store the received password byte by byte */
		new_password[counter]= UART_recieveByte();
	}

	for(counter=0;counter<5;counter++)
     bda:	10 92 8e 00 	sts	0x008E, r1
     bde:	1b c0       	rjmp	.+54     	; 0xc16 <Verify_Password+0x74>
	{
		if(new_password[counter] != password[counter])
     be0:	80 91 8e 00 	lds	r24, 0x008E
     be4:	88 2f       	mov	r24, r24
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	fc 01       	movw	r30, r24
     bea:	e0 58       	subi	r30, 0x80	; 128
     bec:	ff 4f       	sbci	r31, 0xFF	; 255
     bee:	20 81       	ld	r18, Z
     bf0:	80 91 8e 00 	lds	r24, 0x008E
     bf4:	88 2f       	mov	r24, r24
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	fc 01       	movw	r30, r24
     bfa:	e8 58       	subi	r30, 0x88	; 136
     bfc:	ff 4f       	sbci	r31, 0xFF	; 255
     bfe:	80 81       	ld	r24, Z
     c00:	28 17       	cp	r18, r24
     c02:	21 f0       	breq	.+8      	; 0xc0c <Verify_Password+0x6a>
		{
			/* if the received password does not match the one in EEPROM then
			   a message will be sent to HMI ECU with that result*/
			UART_sendByte(REDO);
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <UART_sendByte>
     c0a:	0e c0       	rjmp	.+28     	; 0xc28 <Verify_Password+0x86>
	{
		/* store the received password byte by byte */
		new_password[counter]= UART_recieveByte();
	}

	for(counter=0;counter<5;counter++)
     c0c:	80 91 8e 00 	lds	r24, 0x008E
     c10:	8f 5f       	subi	r24, 0xFF	; 255
     c12:	80 93 8e 00 	sts	0x008E, r24
     c16:	80 91 8e 00 	lds	r24, 0x008E
     c1a:	85 30       	cpi	r24, 0x05	; 5
     c1c:	08 f3       	brcs	.-62     	; 0xbe0 <Verify_Password+0x3e>
			return;
		}
	}

	/* if the two passwords are matched then a message with that result will be sent to HMI ECU */
	UART_sendByte(ALL_GOOD);
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <UART_sendByte>
	condition = 0;  /* clear the condition */
     c24:	10 92 7f 00 	sts	0x007F, r1
}
     c28:	cf 91       	pop	r28
     c2a:	df 91       	pop	r29
     c2c:	1f 91       	pop	r17
     c2e:	0f 91       	pop	r16
     c30:	08 95       	ret

00000c32 <Door_Unlocking>:
 * 1. starts the timer
 * 2. after the required time it stops the DC Motor then turn it to the other direction for the same time
 *    and stop it again and stops the timer
 */
void Door_Unlocking(void)
{
     c32:	df 93       	push	r29
     c34:	cf 93       	push	r28
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
	/* control the DC Motor to rotate clockwise with its max speed */
	DcMotor_Rotate(CW,100);
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	64 e6       	ldi	r22, 0x64	; 100
     c3e:	0e 94 38 08 	call	0x1070	; 0x1070 <DcMotor_Rotate>
	Timer1_init(&TIMER1_Config); /* initialize Timer1 driver by sending configuration structure*/
     c42:	88 e6       	ldi	r24, 0x68	; 104
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <Timer1_init>
	while(timer_counter!=5){}    /* 15 seconds */
     c4a:	80 91 74 00 	lds	r24, 0x0074
     c4e:	90 91 75 00 	lds	r25, 0x0075
     c52:	85 30       	cpi	r24, 0x05	; 5
     c54:	91 05       	cpc	r25, r1
     c56:	c9 f7       	brne	.-14     	; 0xc4a <Door_Unlocking+0x18>
	Timer1_deInit();             /* disable the Timer1 */
     c58:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <Timer1_deInit>
	timer_counter=0;             /* reset counter to be ready for the next timer call */
     c5c:	10 92 75 00 	sts	0x0075, r1
     c60:	10 92 74 00 	sts	0x0074, r1

	/* stop the DC Motor */
	DcMotor_Rotate(STOP,0);
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	60 e0       	ldi	r22, 0x00	; 0
     c68:	0e 94 38 08 	call	0x1070	; 0x1070 <DcMotor_Rotate>
	Timer1_init(&TIMER1_Config); /* initialize Timer1 driver by sending configuration structure*/
     c6c:	88 e6       	ldi	r24, 0x68	; 104
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <Timer1_init>
	while(timer_counter!=1){}    /* 3 seconds */
     c74:	80 91 74 00 	lds	r24, 0x0074
     c78:	90 91 75 00 	lds	r25, 0x0075
     c7c:	81 30       	cpi	r24, 0x01	; 1
     c7e:	91 05       	cpc	r25, r1
     c80:	c9 f7       	brne	.-14     	; 0xc74 <Door_Unlocking+0x42>
	Timer1_deInit();             /* disable the Timer1 */
     c82:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <Timer1_deInit>
	timer_counter=0;             /* reset counter to be ready for the next timer call */
     c86:	10 92 75 00 	sts	0x0075, r1
     c8a:	10 92 74 00 	sts	0x0074, r1

	/* control the DC Motor to rotate counter clockwise with its max speed */
	DcMotor_Rotate(A_CW,100);
     c8e:	82 e0       	ldi	r24, 0x02	; 2
     c90:	64 e6       	ldi	r22, 0x64	; 100
     c92:	0e 94 38 08 	call	0x1070	; 0x1070 <DcMotor_Rotate>
	Timer1_init(&TIMER1_Config); /* initialize Timer1 driver by sending configuration structure*/
     c96:	88 e6       	ldi	r24, 0x68	; 104
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <Timer1_init>
	while(timer_counter!=5){}    /* 15 seconds */
     c9e:	80 91 74 00 	lds	r24, 0x0074
     ca2:	90 91 75 00 	lds	r25, 0x0075
     ca6:	85 30       	cpi	r24, 0x05	; 5
     ca8:	91 05       	cpc	r25, r1
     caa:	c9 f7       	brne	.-14     	; 0xc9e <Door_Unlocking+0x6c>

	/* stop the DC Motor */
	DcMotor_Rotate(STOP,0);
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	0e 94 38 08 	call	0x1070	; 0x1070 <DcMotor_Rotate>
	Timer1_deInit();            /* disable the Timer1 */
     cb4:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <Timer1_deInit>
	timer_counter=0;            /* reset counter to be ready for the next timer call */
     cb8:	10 92 75 00 	sts	0x0075, r1
     cbc:	10 92 74 00 	sts	0x0074, r1

	condition = 0;              /* clear the condition */
     cc0:	10 92 7f 00 	sts	0x007F, r1
}
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	08 95       	ret

00000cca <Add_Password>:
/*
 * Description :
 * used to store password at EEPROM when the user enters a password in HMI ECU.
 */
void Add_Password(void)
{
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	2e 97       	sbiw	r28, 0x0e	; 14
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	f8 94       	cli
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	cd bf       	out	0x3d, r28	; 61
	for(counter=0;counter<5;counter++)
     cde:	10 92 8e 00 	sts	0x008E, r1
     ce2:	8a c0       	rjmp	.+276    	; 0xdf8 <Add_Password+0x12e>
	{
		/* store the password byte by byte at EEPROM */
		EEPROM_writeByte(0x0311+counter,password[counter]);
     ce4:	80 91 8e 00 	lds	r24, 0x008E
     ce8:	88 2f       	mov	r24, r24
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	8f 5e       	subi	r24, 0xEF	; 239
     cee:	9c 4f       	sbci	r25, 0xFC	; 252
     cf0:	ac 01       	movw	r20, r24
     cf2:	80 91 8e 00 	lds	r24, 0x008E
     cf6:	88 2f       	mov	r24, r24
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	fc 01       	movw	r30, r24
     cfc:	e8 58       	subi	r30, 0x88	; 136
     cfe:	ff 4f       	sbci	r31, 0xFF	; 255
     d00:	20 81       	ld	r18, Z
     d02:	ca 01       	movw	r24, r20
     d04:	62 2f       	mov	r22, r18
     d06:	0e 94 8a 08 	call	0x1114	; 0x1114 <EEPROM_writeByte>
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	a8 ec       	ldi	r26, 0xC8	; 200
     d10:	b2 e4       	ldi	r27, 0x42	; 66
     d12:	8b 87       	std	Y+11, r24	; 0x0b
     d14:	9c 87       	std	Y+12, r25	; 0x0c
     d16:	ad 87       	std	Y+13, r26	; 0x0d
     d18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d1a:	6b 85       	ldd	r22, Y+11	; 0x0b
     d1c:	7c 85       	ldd	r23, Y+12	; 0x0c
     d1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d20:	9e 85       	ldd	r25, Y+14	; 0x0e
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	4a ef       	ldi	r20, 0xFA	; 250
     d28:	54 e4       	ldi	r21, 0x44	; 68
     d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d2e:	dc 01       	movw	r26, r24
     d30:	cb 01       	movw	r24, r22
     d32:	8f 83       	std	Y+7, r24	; 0x07
     d34:	98 87       	std	Y+8, r25	; 0x08
     d36:	a9 87       	std	Y+9, r26	; 0x09
     d38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d3a:	6f 81       	ldd	r22, Y+7	; 0x07
     d3c:	78 85       	ldd	r23, Y+8	; 0x08
     d3e:	89 85       	ldd	r24, Y+9	; 0x09
     d40:	9a 85       	ldd	r25, Y+10	; 0x0a
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	40 e8       	ldi	r20, 0x80	; 128
     d48:	5f e3       	ldi	r21, 0x3F	; 63
     d4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d4e:	88 23       	and	r24, r24
     d50:	2c f4       	brge	.+10     	; 0xd5c <Add_Password+0x92>
		__ticks = 1;
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9e 83       	std	Y+6, r25	; 0x06
     d58:	8d 83       	std	Y+5, r24	; 0x05
     d5a:	3f c0       	rjmp	.+126    	; 0xdda <Add_Password+0x110>
	else if (__tmp > 65535)
     d5c:	6f 81       	ldd	r22, Y+7	; 0x07
     d5e:	78 85       	ldd	r23, Y+8	; 0x08
     d60:	89 85       	ldd	r24, Y+9	; 0x09
     d62:	9a 85       	ldd	r25, Y+10	; 0x0a
     d64:	20 e0       	ldi	r18, 0x00	; 0
     d66:	3f ef       	ldi	r19, 0xFF	; 255
     d68:	4f e7       	ldi	r20, 0x7F	; 127
     d6a:	57 e4       	ldi	r21, 0x47	; 71
     d6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d70:	18 16       	cp	r1, r24
     d72:	4c f5       	brge	.+82     	; 0xdc6 <Add_Password+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d74:	6b 85       	ldd	r22, Y+11	; 0x0b
     d76:	7c 85       	ldd	r23, Y+12	; 0x0c
     d78:	8d 85       	ldd	r24, Y+13	; 0x0d
     d7a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	40 e2       	ldi	r20, 0x20	; 32
     d82:	51 e4       	ldi	r21, 0x41	; 65
     d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d88:	dc 01       	movw	r26, r24
     d8a:	cb 01       	movw	r24, r22
     d8c:	bc 01       	movw	r22, r24
     d8e:	cd 01       	movw	r24, r26
     d90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d94:	dc 01       	movw	r26, r24
     d96:	cb 01       	movw	r24, r22
     d98:	9e 83       	std	Y+6, r25	; 0x06
     d9a:	8d 83       	std	Y+5, r24	; 0x05
     d9c:	0f c0       	rjmp	.+30     	; 0xdbc <Add_Password+0xf2>
     d9e:	88 ec       	ldi	r24, 0xC8	; 200
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	9c 83       	std	Y+4, r25	; 0x04
     da4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     da6:	8b 81       	ldd	r24, Y+3	; 0x03
     da8:	9c 81       	ldd	r25, Y+4	; 0x04
     daa:	01 97       	sbiw	r24, 0x01	; 1
     dac:	f1 f7       	brne	.-4      	; 0xdaa <Add_Password+0xe0>
     dae:	9c 83       	std	Y+4, r25	; 0x04
     db0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     db2:	8d 81       	ldd	r24, Y+5	; 0x05
     db4:	9e 81       	ldd	r25, Y+6	; 0x06
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	9e 83       	std	Y+6, r25	; 0x06
     dba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dbc:	8d 81       	ldd	r24, Y+5	; 0x05
     dbe:	9e 81       	ldd	r25, Y+6	; 0x06
     dc0:	00 97       	sbiw	r24, 0x00	; 0
     dc2:	69 f7       	brne	.-38     	; 0xd9e <Add_Password+0xd4>
     dc4:	14 c0       	rjmp	.+40     	; 0xdee <Add_Password+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dc6:	6f 81       	ldd	r22, Y+7	; 0x07
     dc8:	78 85       	ldd	r23, Y+8	; 0x08
     dca:	89 85       	ldd	r24, Y+9	; 0x09
     dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
     dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	9e 83       	std	Y+6, r25	; 0x06
     dd8:	8d 83       	std	Y+5, r24	; 0x05
     dda:	8d 81       	ldd	r24, Y+5	; 0x05
     ddc:	9e 81       	ldd	r25, Y+6	; 0x06
     dde:	9a 83       	std	Y+2, r25	; 0x02
     de0:	89 83       	std	Y+1, r24	; 0x01
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	9a 81       	ldd	r25, Y+2	; 0x02
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	f1 f7       	brne	.-4      	; 0xde6 <Add_Password+0x11c>
     dea:	9a 83       	std	Y+2, r25	; 0x02
     dec:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * used to store password at EEPROM when the user enters a password in HMI ECU.
 */
void Add_Password(void)
{
	for(counter=0;counter<5;counter++)
     dee:	80 91 8e 00 	lds	r24, 0x008E
     df2:	8f 5f       	subi	r24, 0xFF	; 255
     df4:	80 93 8e 00 	sts	0x008E, r24
     df8:	80 91 8e 00 	lds	r24, 0x008E
     dfc:	85 30       	cpi	r24, 0x05	; 5
     dfe:	08 f4       	brcc	.+2      	; 0xe02 <Add_Password+0x138>
     e00:	71 cf       	rjmp	.-286    	; 0xce4 <Add_Password+0x1a>
	{
		/* store the password byte by byte at EEPROM */
		EEPROM_writeByte(0x0311+counter,password[counter]);
		_delay_ms(100);
	}
	condition = 0;  /* clear the condition */
     e02:	10 92 7f 00 	sts	0x007F, r1
}
     e06:	2e 96       	adiw	r28, 0x0e	; 14
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	08 95       	ret

00000e18 <Password_Checking>:
 * 1. receives the two passwords
 * 2. if the passwords matched it will decide to store one of them in EEPROM
 * 3. if Passwords are unmatched it will decide to send a message of the result to HMI ECU.
 */
void Password_Checking(void)
{
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
	for(counter=0;counter<5;counter++)
     e24:	10 92 8e 00 	sts	0x008E, r1
     e28:	0f c0       	rjmp	.+30     	; 0xe48 <Password_Checking+0x30>
	{
		/* store the first password byte by byte */
		first_password[counter]= UART_recieveByte();
     e2a:	80 91 8e 00 	lds	r24, 0x008E
     e2e:	08 2f       	mov	r16, r24
     e30:	10 e0       	ldi	r17, 0x00	; 0
     e32:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <UART_recieveByte>
     e36:	f8 01       	movw	r30, r16
     e38:	e1 57       	subi	r30, 0x71	; 113
     e3a:	ff 4f       	sbci	r31, 0xFF	; 255
     e3c:	80 83       	st	Z, r24
 * 2. if the passwords matched it will decide to store one of them in EEPROM
 * 3. if Passwords are unmatched it will decide to send a message of the result to HMI ECU.
 */
void Password_Checking(void)
{
	for(counter=0;counter<5;counter++)
     e3e:	80 91 8e 00 	lds	r24, 0x008E
     e42:	8f 5f       	subi	r24, 0xFF	; 255
     e44:	80 93 8e 00 	sts	0x008E, r24
     e48:	80 91 8e 00 	lds	r24, 0x008E
     e4c:	85 30       	cpi	r24, 0x05	; 5
     e4e:	68 f3       	brcs	.-38     	; 0xe2a <Password_Checking+0x12>
	{
		/* store the first password byte by byte */
		first_password[counter]= UART_recieveByte();
	}

	for(counter=0;counter<5;counter++)
     e50:	10 92 8e 00 	sts	0x008E, r1
     e54:	0f c0       	rjmp	.+30     	; 0xe74 <Password_Checking+0x5c>
	{
		/* store the second password byte by byte */
		second_password[counter]= UART_recieveByte();
     e56:	80 91 8e 00 	lds	r24, 0x008E
     e5a:	08 2f       	mov	r16, r24
     e5c:	10 e0       	ldi	r17, 0x00	; 0
     e5e:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <UART_recieveByte>
     e62:	f8 01       	movw	r30, r16
     e64:	e9 57       	subi	r30, 0x79	; 121
     e66:	ff 4f       	sbci	r31, 0xFF	; 255
     e68:	80 83       	st	Z, r24
	{
		/* store the first password byte by byte */
		first_password[counter]= UART_recieveByte();
	}

	for(counter=0;counter<5;counter++)
     e6a:	80 91 8e 00 	lds	r24, 0x008E
     e6e:	8f 5f       	subi	r24, 0xFF	; 255
     e70:	80 93 8e 00 	sts	0x008E, r24
     e74:	80 91 8e 00 	lds	r24, 0x008E
     e78:	85 30       	cpi	r24, 0x05	; 5
     e7a:	68 f3       	brcs	.-38     	; 0xe56 <Password_Checking+0x3e>
	{
		/* store the second password byte by byte */
		second_password[counter]= UART_recieveByte();
	}

	for(counter=0;counter<5;counter++)
     e7c:	10 92 8e 00 	sts	0x008E, r1
     e80:	1b c0       	rjmp	.+54     	; 0xeb8 <Password_Checking+0xa0>
	{
		if(first_password[counter] != second_password[counter])
     e82:	80 91 8e 00 	lds	r24, 0x008E
     e86:	88 2f       	mov	r24, r24
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	fc 01       	movw	r30, r24
     e8c:	e1 57       	subi	r30, 0x71	; 113
     e8e:	ff 4f       	sbci	r31, 0xFF	; 255
     e90:	20 81       	ld	r18, Z
     e92:	80 91 8e 00 	lds	r24, 0x008E
     e96:	88 2f       	mov	r24, r24
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	fc 01       	movw	r30, r24
     e9c:	e9 57       	subi	r30, 0x79	; 121
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	80 81       	ld	r24, Z
     ea2:	28 17       	cp	r18, r24
     ea4:	21 f0       	breq	.+8      	; 0xeae <Password_Checking+0x96>
		{
			/* if the two passwords unmatched then a message will be sent to HMI ECU with that result*/
			UART_sendByte(REDO);
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <UART_sendByte>
     eac:	2c c0       	rjmp	.+88     	; 0xf06 <Password_Checking+0xee>
	{
		/* store the second password byte by byte */
		second_password[counter]= UART_recieveByte();
	}

	for(counter=0;counter<5;counter++)
     eae:	80 91 8e 00 	lds	r24, 0x008E
     eb2:	8f 5f       	subi	r24, 0xFF	; 255
     eb4:	80 93 8e 00 	sts	0x008E, r24
     eb8:	80 91 8e 00 	lds	r24, 0x008E
     ebc:	85 30       	cpi	r24, 0x05	; 5
     ebe:	08 f3       	brcs	.-62     	; 0xe82 <Password_Checking+0x6a>
			UART_sendByte(REDO);
			return;
		}
	}

	for(counter=0;counter<5;counter++)
     ec0:	10 92 8e 00 	sts	0x008E, r1
     ec4:	15 c0       	rjmp	.+42     	; 0xef0 <Password_Checking+0xd8>
	{
		/* if the two passwords are matched then one of them will be saved to store it in EEPROM */
		password[counter] = first_password[counter];
     ec6:	80 91 8e 00 	lds	r24, 0x008E
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	80 91 8e 00 	lds	r24, 0x008E
     ed2:	88 2f       	mov	r24, r24
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	fc 01       	movw	r30, r24
     ed8:	e1 57       	subi	r30, 0x71	; 113
     eda:	ff 4f       	sbci	r31, 0xFF	; 255
     edc:	80 81       	ld	r24, Z
     ede:	f9 01       	movw	r30, r18
     ee0:	e8 58       	subi	r30, 0x88	; 136
     ee2:	ff 4f       	sbci	r31, 0xFF	; 255
     ee4:	80 83       	st	Z, r24
			UART_sendByte(REDO);
			return;
		}
	}

	for(counter=0;counter<5;counter++)
     ee6:	80 91 8e 00 	lds	r24, 0x008E
     eea:	8f 5f       	subi	r24, 0xFF	; 255
     eec:	80 93 8e 00 	sts	0x008E, r24
     ef0:	80 91 8e 00 	lds	r24, 0x008E
     ef4:	85 30       	cpi	r24, 0x05	; 5
     ef6:	38 f3       	brcs	.-50     	; 0xec6 <Password_Checking+0xae>
		/* if the two passwords are matched then one of them will be saved to store it in EEPROM */
		password[counter] = first_password[counter];
	}

	/* store password in EEPROM */
	Add_Password();
     ef8:	0e 94 65 06 	call	0xcca	; 0xcca <Add_Password>

	/* if the two passwords are matched then a message with that result will be sent to HMI ECU */
	UART_sendByte(ALL_GOOD);
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <UART_sendByte>

	condition = 0;  /* clear the condition */
     f02:	10 92 7f 00 	sts	0x007F, r1
}
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	1f 91       	pop	r17
     f0c:	0f 91       	pop	r16
     f0e:	08 95       	ret

00000f10 <main>:
/*******************************************************************************
 *                              Main Function                                  *
 *******************************************************************************/

int main(void)
{
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	2c 97       	sbiw	r28, 0x0c	; 12
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	cd bf       	out	0x3d, r28	; 61

	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
     f24:	af e5       	ldi	r26, 0x5F	; 95
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	ef e5       	ldi	r30, 0x5F	; 95
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	80 68       	ori	r24, 0x80	; 128
     f30:	8c 93       	st	X, r24

	/* make count function as a call back function to be called after the timer gets a compare match*/
	Timer1_setCallBack(Count);
     f32:	83 ea       	ldi	r24, 0xA3	; 163
     f34:	95 e0       	ldi	r25, 0x05	; 5
     f36:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <Timer1_setCallBack>

	UART_ConfigType Uart_Config = {EIGHT_BITS,NONE,ONE_BIT,9600}; /* giving values to UART configuration structure*/
     f3a:	ce 01       	movw	r24, r28
     f3c:	01 96       	adiw	r24, 0x01	; 1
     f3e:	99 87       	std	Y+9, r25	; 0x09
     f40:	88 87       	std	Y+8, r24	; 0x08
     f42:	ee e6       	ldi	r30, 0x6E	; 110
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	fb 87       	std	Y+11, r31	; 0x0b
     f48:	ea 87       	std	Y+10, r30	; 0x0a
     f4a:	f5 e0       	ldi	r31, 0x05	; 5
     f4c:	fc 87       	std	Y+12, r31	; 0x0c
     f4e:	ea 85       	ldd	r30, Y+10	; 0x0a
     f50:	fb 85       	ldd	r31, Y+11	; 0x0b
     f52:	00 80       	ld	r0, Z
     f54:	8a 85       	ldd	r24, Y+10	; 0x0a
     f56:	9b 85       	ldd	r25, Y+11	; 0x0b
     f58:	01 96       	adiw	r24, 0x01	; 1
     f5a:	9b 87       	std	Y+11, r25	; 0x0b
     f5c:	8a 87       	std	Y+10, r24	; 0x0a
     f5e:	e8 85       	ldd	r30, Y+8	; 0x08
     f60:	f9 85       	ldd	r31, Y+9	; 0x09
     f62:	00 82       	st	Z, r0
     f64:	88 85       	ldd	r24, Y+8	; 0x08
     f66:	99 85       	ldd	r25, Y+9	; 0x09
     f68:	01 96       	adiw	r24, 0x01	; 1
     f6a:	99 87       	std	Y+9, r25	; 0x09
     f6c:	88 87       	std	Y+8, r24	; 0x08
     f6e:	9c 85       	ldd	r25, Y+12	; 0x0c
     f70:	91 50       	subi	r25, 0x01	; 1
     f72:	9c 87       	std	Y+12, r25	; 0x0c
     f74:	ec 85       	ldd	r30, Y+12	; 0x0c
     f76:	ee 23       	and	r30, r30
     f78:	51 f7       	brne	.-44     	; 0xf4e <main+0x3e>
	UART_init(&Uart_Config);  /* initialize UART driver by sending configuration structure*/
     f7a:	ce 01       	movw	r24, r28
     f7c:	01 96       	adiw	r24, 0x01	; 1
     f7e:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <UART_init>

	TWI_ConfigType Twi_Config = {0b00000010,0x02}; /* giving values to TWI configuration structure*/
     f82:	82 e0       	ldi	r24, 0x02	; 2
     f84:	8e 83       	std	Y+6, r24	; 0x06
     f86:	82 e0       	ldi	r24, 0x02	; 2
     f88:	8f 83       	std	Y+7, r24	; 0x07
	TWI_init(&Twi_Config); /* initialize TWI driver by sending configuration structure*/
     f8a:	ce 01       	movw	r24, r28
     f8c:	06 96       	adiw	r24, 0x06	; 6
     f8e:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <TWI_init>

	DcMotor_Init();  /* Initialize the DC Motor driver */
     f92:	0e 94 1d 08 	call	0x103a	; 0x103a <DcMotor_Init>
	Buzzer_init();   /* Initialize the Buzzer driver */
     f96:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <Buzzer_init>

	while(1)
	{
		/* store the order sent from HMI ECU */
		condition = UART_recieveByte();
     f9a:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <UART_recieveByte>
     f9e:	80 93 7f 00 	sts	0x007F, r24

		/* execute specific function depending on the received order */
		if(condition==ADD_PASS)
     fa2:	80 91 7f 00 	lds	r24, 0x007F
     fa6:	84 30       	cpi	r24, 0x04	; 4
     fa8:	19 f4       	brne	.+6      	; 0xfb0 <main+0xa0>
		{
			Password_Checking();
     faa:	0e 94 0c 07 	call	0xe18	; 0xe18 <Password_Checking>
     fae:	f5 cf       	rjmp	.-22     	; 0xf9a <main+0x8a>
		}

		else if (condition==OPEN_DOOR)
     fb0:	80 91 7f 00 	lds	r24, 0x007F
     fb4:	82 30       	cpi	r24, 0x02	; 2
     fb6:	19 f4       	brne	.+6      	; 0xfbe <main+0xae>
		{
			Door_Unlocking();
     fb8:	0e 94 19 06 	call	0xc32	; 0xc32 <Door_Unlocking>
     fbc:	ee cf       	rjmp	.-36     	; 0xf9a <main+0x8a>
		}

		else if (condition==CHANGE_PASS)
     fbe:	80 91 7f 00 	lds	r24, 0x007F
     fc2:	83 30       	cpi	r24, 0x03	; 3
     fc4:	19 f4       	brne	.+6      	; 0xfcc <main+0xbc>
		{
			Verify_Password();
     fc6:	0e 94 d1 05 	call	0xba2	; 0xba2 <Verify_Password>
     fca:	e7 cf       	rjmp	.-50     	; 0xf9a <main+0x8a>
		}

		else if (condition==CHECK_PASS)
     fcc:	80 91 7f 00 	lds	r24, 0x007F
     fd0:	85 30       	cpi	r24, 0x05	; 5
     fd2:	19 f4       	brne	.+6      	; 0xfda <main+0xca>
		{
			Verify_Password();
     fd4:	0e 94 d1 05 	call	0xba2	; 0xba2 <Verify_Password>
     fd8:	e0 cf       	rjmp	.-64     	; 0xf9a <main+0x8a>
		}

		else if(condition==BUZZER_ON)
     fda:	80 91 7f 00 	lds	r24, 0x007F
     fde:	86 30       	cpi	r24, 0x06	; 6
     fe0:	e1 f6       	brne	.-72     	; 0xf9a <main+0x8a>
		{
			Buzzer_Ring();
     fe2:	0e 94 b3 05 	call	0xb66	; 0xb66 <Buzzer_Ring>
     fe6:	d9 cf       	rjmp	.-78     	; 0xf9a <main+0x8a>

00000fe8 <Buzzer_init>:
 * Setup the direction for the buzzer pin as output pin through the
 * GPIO driver.
 * Turn off the buzzer through the GPIO.
 */
void Buzzer_init(void)
{
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for the buzzer pin */
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	60 e0       	ldi	r22, 0x00	; 0
     ff4:	41 e0       	ldi	r20, 0x01	; 1
     ff6:	0e 94 2b 09 	call	0x1256	; 0x1256 <GPIO_setupPinDirection>

	/* Buzzer is turned off at the beginning */
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	60 e0       	ldi	r22, 0x00	; 0
     ffe:	40 e0       	ldi	r20, 0x00	; 0
    1000:	0e 94 16 0a 	call	0x142c	; 0x142c <GPIO_writePin>
}
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	08 95       	ret

0000100a <Buzzer_on>:
/*
 * Description :
 * Function to enable the Buzzer through the GPIO.
 */
void Buzzer_on(void)
{
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
	/* Turn on the buzzer */
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	60 e0       	ldi	r22, 0x00	; 0
    1016:	41 e0       	ldi	r20, 0x01	; 1
    1018:	0e 94 16 0a 	call	0x142c	; 0x142c <GPIO_writePin>
}
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <Buzzer_off>:
/*
 * Description :
 * Function to disable the Buzzer through the GPIO.
 */
void Buzzer_off(void)
{
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
	/* Turn off the buzzer */
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	60 e0       	ldi	r22, 0x00	; 0
    102e:	40 e0       	ldi	r20, 0x00	; 0
    1030:	0e 94 16 0a 	call	0x142c	; 0x142c <GPIO_writePin>
}
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <DcMotor_Init>:
 * The Function responsible for setup the direction for the two
 * motor pins through the GPIO driver.
 * Stop at the DC-Motor at the beginning through the GPIO driver.
 */
void DcMotor_Init(void)
{
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for for the two motor pins */
	GPIO_setupPinDirection(DC_MOTOR_OUTPUT1_PORT_ID,DC_MOTOR_OUTPUT1_PIN_ID,PIN_OUTPUT);
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	60 e0       	ldi	r22, 0x00	; 0
    1046:	41 e0       	ldi	r20, 0x01	; 1
    1048:	0e 94 2b 09 	call	0x1256	; 0x1256 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_OUTPUT2_PORT_ID,DC_MOTOR_OUTPUT2_PIN_ID,PIN_OUTPUT);
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	61 e0       	ldi	r22, 0x01	; 1
    1050:	41 e0       	ldi	r20, 0x01	; 1
    1052:	0e 94 2b 09 	call	0x1256	; 0x1256 <GPIO_setupPinDirection>

	/* Motor is stop at the beginning */
	GPIO_writePin(DC_MOTOR_OUTPUT1_PORT_ID,DC_MOTOR_OUTPUT1_PIN_ID,LOGIC_LOW);
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	60 e0       	ldi	r22, 0x00	; 0
    105a:	40 e0       	ldi	r20, 0x00	; 0
    105c:	0e 94 16 0a 	call	0x142c	; 0x142c <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_OUTPUT2_PORT_ID,DC_MOTOR_OUTPUT2_PIN_ID,LOGIC_LOW);
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	61 e0       	ldi	r22, 0x01	; 1
    1064:	40 e0       	ldi	r20, 0x00	; 0
    1066:	0e 94 16 0a 	call	0x142c	; 0x142c <GPIO_writePin>
}
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <DcMotor_Rotate>:
 * stop the motor based on the state input state value.
 * Send the required duty cycle to the PWM driver based on the
 * required speed value.
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	00 d0       	rcall	.+0      	; 0x1076 <DcMotor_Rotate+0x6>
    1076:	0f 92       	push	r0
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
    107c:	8a 83       	std	Y+2, r24	; 0x02
    107e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 duty_cycle; /* Variable used to Set Compare Value */

	if(state == STOP)
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	88 23       	and	r24, r24
    1084:	59 f4       	brne	.+22     	; 0x109c <DcMotor_Rotate+0x2c>
	{
		/* Stop the motor */
		GPIO_writePin(DC_MOTOR_OUTPUT1_PORT_ID,DC_MOTOR_OUTPUT1_PIN_ID,LOGIC_LOW);
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	60 e0       	ldi	r22, 0x00	; 0
    108a:	40 e0       	ldi	r20, 0x00	; 0
    108c:	0e 94 16 0a 	call	0x142c	; 0x142c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_OUTPUT2_PORT_ID,DC_MOTOR_OUTPUT2_PIN_ID,LOGIC_LOW);
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	61 e0       	ldi	r22, 0x01	; 1
    1094:	40 e0       	ldi	r20, 0x00	; 0
    1096:	0e 94 16 0a 	call	0x142c	; 0x142c <GPIO_writePin>
    109a:	1b c0       	rjmp	.+54     	; 0x10d2 <DcMotor_Rotate+0x62>
	}

	else if(state == A_CW)
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	82 30       	cpi	r24, 0x02	; 2
    10a0:	59 f4       	brne	.+22     	; 0x10b8 <DcMotor_Rotate+0x48>
	{
		/* Rotate the motor --> Anti clock wise */
		GPIO_writePin(DC_MOTOR_OUTPUT1_PORT_ID,DC_MOTOR_OUTPUT1_PIN_ID,LOGIC_HIGH);
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	41 e0       	ldi	r20, 0x01	; 1
    10a8:	0e 94 16 0a 	call	0x142c	; 0x142c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_OUTPUT2_PORT_ID,DC_MOTOR_OUTPUT2_PIN_ID,LOGIC_LOW);
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	61 e0       	ldi	r22, 0x01	; 1
    10b0:	40 e0       	ldi	r20, 0x00	; 0
    10b2:	0e 94 16 0a 	call	0x142c	; 0x142c <GPIO_writePin>
    10b6:	0d c0       	rjmp	.+26     	; 0x10d2 <DcMotor_Rotate+0x62>
	}

	else if(state == CW)
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	81 30       	cpi	r24, 0x01	; 1
    10bc:	51 f4       	brne	.+20     	; 0x10d2 <DcMotor_Rotate+0x62>
	{
		/* Rotate the motor --> clock wise */
		GPIO_writePin(DC_MOTOR_OUTPUT1_PORT_ID,DC_MOTOR_OUTPUT1_PIN_ID,LOGIC_LOW);
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	40 e0       	ldi	r20, 0x00	; 0
    10c4:	0e 94 16 0a 	call	0x142c	; 0x142c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_OUTPUT2_PORT_ID,DC_MOTOR_OUTPUT2_PIN_ID,LOGIC_HIGH);
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	61 e0       	ldi	r22, 0x01	; 1
    10cc:	41 e0       	ldi	r20, 0x01	; 1
    10ce:	0e 94 16 0a 	call	0x142c	; 0x142c <GPIO_writePin>
	}

	/* Calculate the duty cycle from the required speed of motor */
	duty_cycle = (uint8)(((uint16)speed*255)/(100));
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	48 2f       	mov	r20, r24
    10d6:	50 e0       	ldi	r21, 0x00	; 0
    10d8:	ca 01       	movw	r24, r20
    10da:	9c 01       	movw	r18, r24
    10dc:	22 0f       	add	r18, r18
    10de:	33 1f       	adc	r19, r19
    10e0:	c9 01       	movw	r24, r18
    10e2:	96 95       	lsr	r25
    10e4:	98 2f       	mov	r25, r24
    10e6:	88 27       	eor	r24, r24
    10e8:	97 95       	ror	r25
    10ea:	87 95       	ror	r24
    10ec:	82 1b       	sub	r24, r18
    10ee:	93 0b       	sbc	r25, r19
    10f0:	84 0f       	add	r24, r20
    10f2:	95 1f       	adc	r25, r21
    10f4:	24 e6       	ldi	r18, 0x64	; 100
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	b9 01       	movw	r22, r18
    10fa:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__udivmodhi4>
    10fe:	cb 01       	movw	r24, r22
    1100:	89 83       	std	Y+1, r24	; 0x01

	/* generate duty cycle to get the appropriate motor speed */
	PWM_Timer0_Start(duty_cycle);
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <PWM_Timer0_Start>

}
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	cf 91       	pop	r28
    1110:	df 91       	pop	r29
    1112:	08 95       	ret

00001114 <EEPROM_writeByte>:

#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	00 d0       	rcall	.+0      	; 0x111a <EEPROM_writeByte+0x6>
    111a:	00 d0       	rcall	.+0      	; 0x111c <EEPROM_writeByte+0x8>
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
    1120:	9a 83       	std	Y+2, r25	; 0x02
    1122:	89 83       	std	Y+1, r24	; 0x01
    1124:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1126:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    112a:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <TWI_getStatus>
    112e:	88 30       	cpi	r24, 0x08	; 8
    1130:	11 f0       	breq	.+4      	; 0x1136 <EEPROM_writeByte+0x22>
        return ERROR;
    1132:	1c 82       	std	Y+4, r1	; 0x04
    1134:	28 c0       	rjmp	.+80     	; 0x1186 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	9a 81       	ldd	r25, Y+2	; 0x02
    113a:	80 70       	andi	r24, 0x00	; 0
    113c:	97 70       	andi	r25, 0x07	; 7
    113e:	88 0f       	add	r24, r24
    1140:	89 2f       	mov	r24, r25
    1142:	88 1f       	adc	r24, r24
    1144:	99 0b       	sbc	r25, r25
    1146:	91 95       	neg	r25
    1148:	80 6a       	ori	r24, 0xA0	; 160
    114a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    114e:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <TWI_getStatus>
    1152:	88 31       	cpi	r24, 0x18	; 24
    1154:	11 f0       	breq	.+4      	; 0x115a <EEPROM_writeByte+0x46>
        return ERROR; 
    1156:	1c 82       	std	Y+4, r1	; 0x04
    1158:	16 c0       	rjmp	.+44     	; 0x1186 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1160:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <TWI_getStatus>
    1164:	88 32       	cpi	r24, 0x28	; 40
    1166:	11 f0       	breq	.+4      	; 0x116c <EEPROM_writeByte+0x58>
        return ERROR;
    1168:	1c 82       	std	Y+4, r1	; 0x04
    116a:	0d c0       	rjmp	.+26     	; 0x1186 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1172:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <TWI_getStatus>
    1176:	88 32       	cpi	r24, 0x28	; 40
    1178:	11 f0       	breq	.+4      	; 0x117e <EEPROM_writeByte+0x6a>
        return ERROR;
    117a:	1c 82       	std	Y+4, r1	; 0x04
    117c:	04 c0       	rjmp	.+8      	; 0x1186 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    117e:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <TWI_stop>
	
    return SUCCESS;
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	8c 83       	std	Y+4, r24	; 0x04
    1186:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	00 d0       	rcall	.+0      	; 0x119c <EEPROM_readByte+0x6>
    119c:	00 d0       	rcall	.+0      	; 0x119e <EEPROM_readByte+0x8>
    119e:	0f 92       	push	r0
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
    11a4:	9a 83       	std	Y+2, r25	; 0x02
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	7c 83       	std	Y+4, r23	; 0x04
    11aa:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    11ac:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    11b0:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <TWI_getStatus>
    11b4:	88 30       	cpi	r24, 0x08	; 8
    11b6:	11 f0       	breq	.+4      	; 0x11bc <EEPROM_readByte+0x26>
        return ERROR;
    11b8:	1d 82       	std	Y+5, r1	; 0x05
    11ba:	44 c0       	rjmp	.+136    	; 0x1244 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	9a 81       	ldd	r25, Y+2	; 0x02
    11c0:	80 70       	andi	r24, 0x00	; 0
    11c2:	97 70       	andi	r25, 0x07	; 7
    11c4:	88 0f       	add	r24, r24
    11c6:	89 2f       	mov	r24, r25
    11c8:	88 1f       	adc	r24, r24
    11ca:	99 0b       	sbc	r25, r25
    11cc:	91 95       	neg	r25
    11ce:	80 6a       	ori	r24, 0xA0	; 160
    11d0:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    11d4:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <TWI_getStatus>
    11d8:	88 31       	cpi	r24, 0x18	; 24
    11da:	11 f0       	breq	.+4      	; 0x11e0 <EEPROM_readByte+0x4a>
        return ERROR;
    11dc:	1d 82       	std	Y+5, r1	; 0x05
    11de:	32 c0       	rjmp	.+100    	; 0x1244 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    11e6:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <TWI_getStatus>
    11ea:	88 32       	cpi	r24, 0x28	; 40
    11ec:	11 f0       	breq	.+4      	; 0x11f2 <EEPROM_readByte+0x5c>
        return ERROR;
    11ee:	1d 82       	std	Y+5, r1	; 0x05
    11f0:	29 c0       	rjmp	.+82     	; 0x1244 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    11f2:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    11f6:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <TWI_getStatus>
    11fa:	80 31       	cpi	r24, 0x10	; 16
    11fc:	11 f0       	breq	.+4      	; 0x1202 <EEPROM_readByte+0x6c>
        return ERROR;
    11fe:	1d 82       	std	Y+5, r1	; 0x05
    1200:	21 c0       	rjmp	.+66     	; 0x1244 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	9a 81       	ldd	r25, Y+2	; 0x02
    1206:	80 70       	andi	r24, 0x00	; 0
    1208:	97 70       	andi	r25, 0x07	; 7
    120a:	88 0f       	add	r24, r24
    120c:	89 2f       	mov	r24, r25
    120e:	88 1f       	adc	r24, r24
    1210:	99 0b       	sbc	r25, r25
    1212:	91 95       	neg	r25
    1214:	81 6a       	ori	r24, 0xA1	; 161
    1216:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    121a:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <TWI_getStatus>
    121e:	80 34       	cpi	r24, 0x40	; 64
    1220:	11 f0       	breq	.+4      	; 0x1226 <EEPROM_readByte+0x90>
        return ERROR;
    1222:	1d 82       	std	Y+5, r1	; 0x05
    1224:	0f c0       	rjmp	.+30     	; 0x1244 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1226:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <TWI_readByteWithNACK>
    122a:	eb 81       	ldd	r30, Y+3	; 0x03
    122c:	fc 81       	ldd	r31, Y+4	; 0x04
    122e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1230:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <TWI_getStatus>
    1234:	88 35       	cpi	r24, 0x58	; 88
    1236:	11 f0       	breq	.+4      	; 0x123c <EEPROM_readByte+0xa6>
        return ERROR;
    1238:	1d 82       	std	Y+5, r1	; 0x05
    123a:	04 c0       	rjmp	.+8      	; 0x1244 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    123c:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <TWI_stop>

    return SUCCESS;
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	8d 83       	std	Y+5, r24	; 0x05
    1244:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	00 d0       	rcall	.+0      	; 0x125c <GPIO_setupPinDirection+0x6>
    125c:	00 d0       	rcall	.+0      	; 0x125e <GPIO_setupPinDirection+0x8>
    125e:	0f 92       	push	r0
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    1264:	89 83       	std	Y+1, r24	; 0x01
    1266:	6a 83       	std	Y+2, r22	; 0x02
    1268:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	88 30       	cpi	r24, 0x08	; 8
    126e:	08 f0       	brcs	.+2      	; 0x1272 <GPIO_setupPinDirection+0x1c>
    1270:	d5 c0       	rjmp	.+426    	; 0x141c <GPIO_setupPinDirection+0x1c6>
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	84 30       	cpi	r24, 0x04	; 4
    1276:	08 f0       	brcs	.+2      	; 0x127a <GPIO_setupPinDirection+0x24>
    1278:	d1 c0       	rjmp	.+418    	; 0x141c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	3d 83       	std	Y+5, r19	; 0x05
    1282:	2c 83       	std	Y+4, r18	; 0x04
    1284:	8c 81       	ldd	r24, Y+4	; 0x04
    1286:	9d 81       	ldd	r25, Y+5	; 0x05
    1288:	81 30       	cpi	r24, 0x01	; 1
    128a:	91 05       	cpc	r25, r1
    128c:	09 f4       	brne	.+2      	; 0x1290 <GPIO_setupPinDirection+0x3a>
    128e:	43 c0       	rjmp	.+134    	; 0x1316 <GPIO_setupPinDirection+0xc0>
    1290:	2c 81       	ldd	r18, Y+4	; 0x04
    1292:	3d 81       	ldd	r19, Y+5	; 0x05
    1294:	22 30       	cpi	r18, 0x02	; 2
    1296:	31 05       	cpc	r19, r1
    1298:	2c f4       	brge	.+10     	; 0x12a4 <GPIO_setupPinDirection+0x4e>
    129a:	8c 81       	ldd	r24, Y+4	; 0x04
    129c:	9d 81       	ldd	r25, Y+5	; 0x05
    129e:	00 97       	sbiw	r24, 0x00	; 0
    12a0:	71 f0       	breq	.+28     	; 0x12be <GPIO_setupPinDirection+0x68>
    12a2:	bc c0       	rjmp	.+376    	; 0x141c <GPIO_setupPinDirection+0x1c6>
    12a4:	2c 81       	ldd	r18, Y+4	; 0x04
    12a6:	3d 81       	ldd	r19, Y+5	; 0x05
    12a8:	22 30       	cpi	r18, 0x02	; 2
    12aa:	31 05       	cpc	r19, r1
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <GPIO_setupPinDirection+0x5a>
    12ae:	5f c0       	rjmp	.+190    	; 0x136e <GPIO_setupPinDirection+0x118>
    12b0:	8c 81       	ldd	r24, Y+4	; 0x04
    12b2:	9d 81       	ldd	r25, Y+5	; 0x05
    12b4:	83 30       	cpi	r24, 0x03	; 3
    12b6:	91 05       	cpc	r25, r1
    12b8:	09 f4       	brne	.+2      	; 0x12bc <GPIO_setupPinDirection+0x66>
    12ba:	85 c0       	rjmp	.+266    	; 0x13c6 <GPIO_setupPinDirection+0x170>
    12bc:	af c0       	rjmp	.+350    	; 0x141c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	81 30       	cpi	r24, 0x01	; 1
    12c2:	a1 f4       	brne	.+40     	; 0x12ec <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    12c4:	aa e3       	ldi	r26, 0x3A	; 58
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	ea e3       	ldi	r30, 0x3A	; 58
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	48 2f       	mov	r20, r24
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 2e       	mov	r0, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <GPIO_setupPinDirection+0x8c>
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	0a 94       	dec	r0
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <GPIO_setupPinDirection+0x88>
    12e6:	84 2b       	or	r24, r20
    12e8:	8c 93       	st	X, r24
    12ea:	98 c0       	rjmp	.+304    	; 0x141c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    12ec:	aa e3       	ldi	r26, 0x3A	; 58
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	ea e3       	ldi	r30, 0x3A	; 58
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	48 2f       	mov	r20, r24
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	28 2f       	mov	r18, r24
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	02 2e       	mov	r0, r18
    1304:	02 c0       	rjmp	.+4      	; 0x130a <GPIO_setupPinDirection+0xb4>
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	0a 94       	dec	r0
    130c:	e2 f7       	brpl	.-8      	; 0x1306 <GPIO_setupPinDirection+0xb0>
    130e:	80 95       	com	r24
    1310:	84 23       	and	r24, r20
    1312:	8c 93       	st	X, r24
    1314:	83 c0       	rjmp	.+262    	; 0x141c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	81 30       	cpi	r24, 0x01	; 1
    131a:	a1 f4       	brne	.+40     	; 0x1344 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    131c:	a7 e3       	ldi	r26, 0x37	; 55
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e7 e3       	ldi	r30, 0x37	; 55
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	48 2f       	mov	r20, r24
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	02 2e       	mov	r0, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <GPIO_setupPinDirection+0xe4>
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	0a 94       	dec	r0
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <GPIO_setupPinDirection+0xe0>
    133e:	84 2b       	or	r24, r20
    1340:	8c 93       	st	X, r24
    1342:	6c c0       	rjmp	.+216    	; 0x141c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1344:	a7 e3       	ldi	r26, 0x37	; 55
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e7 e3       	ldi	r30, 0x37	; 55
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	48 2f       	mov	r20, r24
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	02 2e       	mov	r0, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <GPIO_setupPinDirection+0x10c>
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	0a 94       	dec	r0
    1364:	e2 f7       	brpl	.-8      	; 0x135e <GPIO_setupPinDirection+0x108>
    1366:	80 95       	com	r24
    1368:	84 23       	and	r24, r20
    136a:	8c 93       	st	X, r24
    136c:	57 c0       	rjmp	.+174    	; 0x141c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	a1 f4       	brne	.+40     	; 0x139c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1374:	a4 e3       	ldi	r26, 0x34	; 52
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e4 e3       	ldi	r30, 0x34	; 52
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	48 2f       	mov	r20, r24
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 2e       	mov	r0, r18
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <GPIO_setupPinDirection+0x13c>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <GPIO_setupPinDirection+0x138>
    1396:	84 2b       	or	r24, r20
    1398:	8c 93       	st	X, r24
    139a:	40 c0       	rjmp	.+128    	; 0x141c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    139c:	a4 e3       	ldi	r26, 0x34	; 52
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e4 e3       	ldi	r30, 0x34	; 52
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	48 2f       	mov	r20, r24
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	02 2e       	mov	r0, r18
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <GPIO_setupPinDirection+0x164>
    13b6:	88 0f       	add	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	0a 94       	dec	r0
    13bc:	e2 f7       	brpl	.-8      	; 0x13b6 <GPIO_setupPinDirection+0x160>
    13be:	80 95       	com	r24
    13c0:	84 23       	and	r24, r20
    13c2:	8c 93       	st	X, r24
    13c4:	2b c0       	rjmp	.+86     	; 0x141c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	81 30       	cpi	r24, 0x01	; 1
    13ca:	a1 f4       	brne	.+40     	; 0x13f4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    13cc:	a1 e3       	ldi	r26, 0x31	; 49
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e1 e3       	ldi	r30, 0x31	; 49
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	48 2f       	mov	r20, r24
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	02 2e       	mov	r0, r18
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <GPIO_setupPinDirection+0x194>
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	0a 94       	dec	r0
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <GPIO_setupPinDirection+0x190>
    13ee:	84 2b       	or	r24, r20
    13f0:	8c 93       	st	X, r24
    13f2:	14 c0       	rjmp	.+40     	; 0x141c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    13f4:	a1 e3       	ldi	r26, 0x31	; 49
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e1 e3       	ldi	r30, 0x31	; 49
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	48 2f       	mov	r20, r24
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	02 2e       	mov	r0, r18
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <GPIO_setupPinDirection+0x1bc>
    140e:	88 0f       	add	r24, r24
    1410:	99 1f       	adc	r25, r25
    1412:	0a 94       	dec	r0
    1414:	e2 f7       	brpl	.-8      	; 0x140e <GPIO_setupPinDirection+0x1b8>
    1416:	80 95       	com	r24
    1418:	84 23       	and	r24, r20
    141a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	cf 91       	pop	r28
    1428:	df 91       	pop	r29
    142a:	08 95       	ret

0000142c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    142c:	df 93       	push	r29
    142e:	cf 93       	push	r28
    1430:	00 d0       	rcall	.+0      	; 0x1432 <GPIO_writePin+0x6>
    1432:	00 d0       	rcall	.+0      	; 0x1434 <GPIO_writePin+0x8>
    1434:	0f 92       	push	r0
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	89 83       	std	Y+1, r24	; 0x01
    143c:	6a 83       	std	Y+2, r22	; 0x02
    143e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	88 30       	cpi	r24, 0x08	; 8
    1444:	08 f0       	brcs	.+2      	; 0x1448 <GPIO_writePin+0x1c>
    1446:	d5 c0       	rjmp	.+426    	; 0x15f2 <GPIO_writePin+0x1c6>
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	84 30       	cpi	r24, 0x04	; 4
    144c:	08 f0       	brcs	.+2      	; 0x1450 <GPIO_writePin+0x24>
    144e:	d1 c0       	rjmp	.+418    	; 0x15f2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	3d 83       	std	Y+5, r19	; 0x05
    1458:	2c 83       	std	Y+4, r18	; 0x04
    145a:	8c 81       	ldd	r24, Y+4	; 0x04
    145c:	9d 81       	ldd	r25, Y+5	; 0x05
    145e:	81 30       	cpi	r24, 0x01	; 1
    1460:	91 05       	cpc	r25, r1
    1462:	09 f4       	brne	.+2      	; 0x1466 <GPIO_writePin+0x3a>
    1464:	43 c0       	rjmp	.+134    	; 0x14ec <GPIO_writePin+0xc0>
    1466:	2c 81       	ldd	r18, Y+4	; 0x04
    1468:	3d 81       	ldd	r19, Y+5	; 0x05
    146a:	22 30       	cpi	r18, 0x02	; 2
    146c:	31 05       	cpc	r19, r1
    146e:	2c f4       	brge	.+10     	; 0x147a <GPIO_writePin+0x4e>
    1470:	8c 81       	ldd	r24, Y+4	; 0x04
    1472:	9d 81       	ldd	r25, Y+5	; 0x05
    1474:	00 97       	sbiw	r24, 0x00	; 0
    1476:	71 f0       	breq	.+28     	; 0x1494 <GPIO_writePin+0x68>
    1478:	bc c0       	rjmp	.+376    	; 0x15f2 <GPIO_writePin+0x1c6>
    147a:	2c 81       	ldd	r18, Y+4	; 0x04
    147c:	3d 81       	ldd	r19, Y+5	; 0x05
    147e:	22 30       	cpi	r18, 0x02	; 2
    1480:	31 05       	cpc	r19, r1
    1482:	09 f4       	brne	.+2      	; 0x1486 <GPIO_writePin+0x5a>
    1484:	5f c0       	rjmp	.+190    	; 0x1544 <GPIO_writePin+0x118>
    1486:	8c 81       	ldd	r24, Y+4	; 0x04
    1488:	9d 81       	ldd	r25, Y+5	; 0x05
    148a:	83 30       	cpi	r24, 0x03	; 3
    148c:	91 05       	cpc	r25, r1
    148e:	09 f4       	brne	.+2      	; 0x1492 <GPIO_writePin+0x66>
    1490:	85 c0       	rjmp	.+266    	; 0x159c <GPIO_writePin+0x170>
    1492:	af c0       	rjmp	.+350    	; 0x15f2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	81 30       	cpi	r24, 0x01	; 1
    1498:	a1 f4       	brne	.+40     	; 0x14c2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    149a:	ab e3       	ldi	r26, 0x3B	; 59
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	eb e3       	ldi	r30, 0x3B	; 59
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	48 2f       	mov	r20, r24
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	02 2e       	mov	r0, r18
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <GPIO_writePin+0x8c>
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	0a 94       	dec	r0
    14ba:	e2 f7       	brpl	.-8      	; 0x14b4 <GPIO_writePin+0x88>
    14bc:	84 2b       	or	r24, r20
    14be:	8c 93       	st	X, r24
    14c0:	98 c0       	rjmp	.+304    	; 0x15f2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    14c2:	ab e3       	ldi	r26, 0x3B	; 59
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	eb e3       	ldi	r30, 0x3B	; 59
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	48 2f       	mov	r20, r24
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	02 2e       	mov	r0, r18
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <GPIO_writePin+0xb4>
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	0a 94       	dec	r0
    14e2:	e2 f7       	brpl	.-8      	; 0x14dc <GPIO_writePin+0xb0>
    14e4:	80 95       	com	r24
    14e6:	84 23       	and	r24, r20
    14e8:	8c 93       	st	X, r24
    14ea:	83 c0       	rjmp	.+262    	; 0x15f2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	a1 f4       	brne	.+40     	; 0x151a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    14f2:	a8 e3       	ldi	r26, 0x38	; 56
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e8 e3       	ldi	r30, 0x38	; 56
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	48 2f       	mov	r20, r24
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 2e       	mov	r0, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <GPIO_writePin+0xe4>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	0a 94       	dec	r0
    1512:	e2 f7       	brpl	.-8      	; 0x150c <GPIO_writePin+0xe0>
    1514:	84 2b       	or	r24, r20
    1516:	8c 93       	st	X, r24
    1518:	6c c0       	rjmp	.+216    	; 0x15f2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    151a:	a8 e3       	ldi	r26, 0x38	; 56
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e8 e3       	ldi	r30, 0x38	; 56
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	48 2f       	mov	r20, r24
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	02 2e       	mov	r0, r18
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <GPIO_writePin+0x10c>
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	0a 94       	dec	r0
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <GPIO_writePin+0x108>
    153c:	80 95       	com	r24
    153e:	84 23       	and	r24, r20
    1540:	8c 93       	st	X, r24
    1542:	57 c0       	rjmp	.+174    	; 0x15f2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	81 30       	cpi	r24, 0x01	; 1
    1548:	a1 f4       	brne	.+40     	; 0x1572 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    154a:	a5 e3       	ldi	r26, 0x35	; 53
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e5 e3       	ldi	r30, 0x35	; 53
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	48 2f       	mov	r20, r24
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	02 2e       	mov	r0, r18
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <GPIO_writePin+0x13c>
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	0a 94       	dec	r0
    156a:	e2 f7       	brpl	.-8      	; 0x1564 <GPIO_writePin+0x138>
    156c:	84 2b       	or	r24, r20
    156e:	8c 93       	st	X, r24
    1570:	40 c0       	rjmp	.+128    	; 0x15f2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1572:	a5 e3       	ldi	r26, 0x35	; 53
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	e5 e3       	ldi	r30, 0x35	; 53
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	48 2f       	mov	r20, r24
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	02 2e       	mov	r0, r18
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <GPIO_writePin+0x164>
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	0a 94       	dec	r0
    1592:	e2 f7       	brpl	.-8      	; 0x158c <GPIO_writePin+0x160>
    1594:	80 95       	com	r24
    1596:	84 23       	and	r24, r20
    1598:	8c 93       	st	X, r24
    159a:	2b c0       	rjmp	.+86     	; 0x15f2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	81 30       	cpi	r24, 0x01	; 1
    15a0:	a1 f4       	brne	.+40     	; 0x15ca <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    15a2:	a2 e3       	ldi	r26, 0x32	; 50
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e2 e3       	ldi	r30, 0x32	; 50
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	48 2f       	mov	r20, r24
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 2e       	mov	r0, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <GPIO_writePin+0x194>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <GPIO_writePin+0x190>
    15c4:	84 2b       	or	r24, r20
    15c6:	8c 93       	st	X, r24
    15c8:	14 c0       	rjmp	.+40     	; 0x15f2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    15ca:	a2 e3       	ldi	r26, 0x32	; 50
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e2 e3       	ldi	r30, 0x32	; 50
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	48 2f       	mov	r20, r24
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	02 2e       	mov	r0, r18
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <GPIO_writePin+0x1bc>
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	0a 94       	dec	r0
    15ea:	e2 f7       	brpl	.-8      	; 0x15e4 <GPIO_writePin+0x1b8>
    15ec:	80 95       	com	r24
    15ee:	84 23       	and	r24, r20
    15f0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	00 d0       	rcall	.+0      	; 0x1608 <GPIO_readPin+0x6>
    1608:	00 d0       	rcall	.+0      	; 0x160a <GPIO_readPin+0x8>
    160a:	0f 92       	push	r0
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
    1610:	8a 83       	std	Y+2, r24	; 0x02
    1612:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1614:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	88 30       	cpi	r24, 0x08	; 8
    161a:	08 f0       	brcs	.+2      	; 0x161e <GPIO_readPin+0x1c>
    161c:	84 c0       	rjmp	.+264    	; 0x1726 <GPIO_readPin+0x124>
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	84 30       	cpi	r24, 0x04	; 4
    1622:	08 f0       	brcs	.+2      	; 0x1626 <GPIO_readPin+0x24>
    1624:	80 c0       	rjmp	.+256    	; 0x1726 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	3d 83       	std	Y+5, r19	; 0x05
    162e:	2c 83       	std	Y+4, r18	; 0x04
    1630:	4c 81       	ldd	r20, Y+4	; 0x04
    1632:	5d 81       	ldd	r21, Y+5	; 0x05
    1634:	41 30       	cpi	r20, 0x01	; 1
    1636:	51 05       	cpc	r21, r1
    1638:	79 f1       	breq	.+94     	; 0x1698 <GPIO_readPin+0x96>
    163a:	8c 81       	ldd	r24, Y+4	; 0x04
    163c:	9d 81       	ldd	r25, Y+5	; 0x05
    163e:	82 30       	cpi	r24, 0x02	; 2
    1640:	91 05       	cpc	r25, r1
    1642:	34 f4       	brge	.+12     	; 0x1650 <GPIO_readPin+0x4e>
    1644:	2c 81       	ldd	r18, Y+4	; 0x04
    1646:	3d 81       	ldd	r19, Y+5	; 0x05
    1648:	21 15       	cp	r18, r1
    164a:	31 05       	cpc	r19, r1
    164c:	69 f0       	breq	.+26     	; 0x1668 <GPIO_readPin+0x66>
    164e:	6b c0       	rjmp	.+214    	; 0x1726 <GPIO_readPin+0x124>
    1650:	4c 81       	ldd	r20, Y+4	; 0x04
    1652:	5d 81       	ldd	r21, Y+5	; 0x05
    1654:	42 30       	cpi	r20, 0x02	; 2
    1656:	51 05       	cpc	r21, r1
    1658:	b9 f1       	breq	.+110    	; 0x16c8 <GPIO_readPin+0xc6>
    165a:	8c 81       	ldd	r24, Y+4	; 0x04
    165c:	9d 81       	ldd	r25, Y+5	; 0x05
    165e:	83 30       	cpi	r24, 0x03	; 3
    1660:	91 05       	cpc	r25, r1
    1662:	09 f4       	brne	.+2      	; 0x1666 <GPIO_readPin+0x64>
    1664:	49 c0       	rjmp	.+146    	; 0x16f8 <GPIO_readPin+0xf6>
    1666:	5f c0       	rjmp	.+190    	; 0x1726 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1668:	e9 e3       	ldi	r30, 0x39	; 57
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	88 2f       	mov	r24, r24
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	a9 01       	movw	r20, r18
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <GPIO_readPin+0x7e>
    167c:	55 95       	asr	r21
    167e:	47 95       	ror	r20
    1680:	8a 95       	dec	r24
    1682:	e2 f7       	brpl	.-8      	; 0x167c <GPIO_readPin+0x7a>
    1684:	ca 01       	movw	r24, r20
    1686:	81 70       	andi	r24, 0x01	; 1
    1688:	90 70       	andi	r25, 0x00	; 0
    168a:	88 23       	and	r24, r24
    168c:	19 f0       	breq	.+6      	; 0x1694 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	89 83       	std	Y+1, r24	; 0x01
    1692:	49 c0       	rjmp	.+146    	; 0x1726 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1694:	19 82       	std	Y+1, r1	; 0x01
    1696:	47 c0       	rjmp	.+142    	; 0x1726 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1698:	e6 e3       	ldi	r30, 0x36	; 54
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	88 2f       	mov	r24, r24
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	a9 01       	movw	r20, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <GPIO_readPin+0xae>
    16ac:	55 95       	asr	r21
    16ae:	47 95       	ror	r20
    16b0:	8a 95       	dec	r24
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <GPIO_readPin+0xaa>
    16b4:	ca 01       	movw	r24, r20
    16b6:	81 70       	andi	r24, 0x01	; 1
    16b8:	90 70       	andi	r25, 0x00	; 0
    16ba:	88 23       	and	r24, r24
    16bc:	19 f0       	breq	.+6      	; 0x16c4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	89 83       	std	Y+1, r24	; 0x01
    16c2:	31 c0       	rjmp	.+98     	; 0x1726 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    16c4:	19 82       	std	Y+1, r1	; 0x01
    16c6:	2f c0       	rjmp	.+94     	; 0x1726 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    16c8:	e3 e3       	ldi	r30, 0x33	; 51
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	88 2f       	mov	r24, r24
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	a9 01       	movw	r20, r18
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <GPIO_readPin+0xde>
    16dc:	55 95       	asr	r21
    16de:	47 95       	ror	r20
    16e0:	8a 95       	dec	r24
    16e2:	e2 f7       	brpl	.-8      	; 0x16dc <GPIO_readPin+0xda>
    16e4:	ca 01       	movw	r24, r20
    16e6:	81 70       	andi	r24, 0x01	; 1
    16e8:	90 70       	andi	r25, 0x00	; 0
    16ea:	88 23       	and	r24, r24
    16ec:	19 f0       	breq	.+6      	; 0x16f4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	89 83       	std	Y+1, r24	; 0x01
    16f2:	19 c0       	rjmp	.+50     	; 0x1726 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    16f4:	19 82       	std	Y+1, r1	; 0x01
    16f6:	17 c0       	rjmp	.+46     	; 0x1726 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    16f8:	e0 e3       	ldi	r30, 0x30	; 48
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	88 2f       	mov	r24, r24
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	a9 01       	movw	r20, r18
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <GPIO_readPin+0x10e>
    170c:	55 95       	asr	r21
    170e:	47 95       	ror	r20
    1710:	8a 95       	dec	r24
    1712:	e2 f7       	brpl	.-8      	; 0x170c <GPIO_readPin+0x10a>
    1714:	ca 01       	movw	r24, r20
    1716:	81 70       	andi	r24, 0x01	; 1
    1718:	90 70       	andi	r25, 0x00	; 0
    171a:	88 23       	and	r24, r24
    171c:	19 f0       	breq	.+6      	; 0x1724 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	89 83       	std	Y+1, r24	; 0x01
    1722:	01 c0       	rjmp	.+2      	; 0x1726 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1724:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1726:	89 81       	ldd	r24, Y+1	; 0x01
}
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	08 95       	ret

00001738 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	00 d0       	rcall	.+0      	; 0x173e <GPIO_setupPortDirection+0x6>
    173e:	00 d0       	rcall	.+0      	; 0x1740 <GPIO_setupPortDirection+0x8>
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
    1744:	89 83       	std	Y+1, r24	; 0x01
    1746:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1748:	89 81       	ldd	r24, Y+1	; 0x01
    174a:	84 30       	cpi	r24, 0x04	; 4
    174c:	90 f5       	brcc	.+100    	; 0x17b2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	3c 83       	std	Y+4, r19	; 0x04
    1756:	2b 83       	std	Y+3, r18	; 0x03
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	9c 81       	ldd	r25, Y+4	; 0x04
    175c:	81 30       	cpi	r24, 0x01	; 1
    175e:	91 05       	cpc	r25, r1
    1760:	d1 f0       	breq	.+52     	; 0x1796 <GPIO_setupPortDirection+0x5e>
    1762:	2b 81       	ldd	r18, Y+3	; 0x03
    1764:	3c 81       	ldd	r19, Y+4	; 0x04
    1766:	22 30       	cpi	r18, 0x02	; 2
    1768:	31 05       	cpc	r19, r1
    176a:	2c f4       	brge	.+10     	; 0x1776 <GPIO_setupPortDirection+0x3e>
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	9c 81       	ldd	r25, Y+4	; 0x04
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	61 f0       	breq	.+24     	; 0x178c <GPIO_setupPortDirection+0x54>
    1774:	1e c0       	rjmp	.+60     	; 0x17b2 <GPIO_setupPortDirection+0x7a>
    1776:	2b 81       	ldd	r18, Y+3	; 0x03
    1778:	3c 81       	ldd	r19, Y+4	; 0x04
    177a:	22 30       	cpi	r18, 0x02	; 2
    177c:	31 05       	cpc	r19, r1
    177e:	81 f0       	breq	.+32     	; 0x17a0 <GPIO_setupPortDirection+0x68>
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	9c 81       	ldd	r25, Y+4	; 0x04
    1784:	83 30       	cpi	r24, 0x03	; 3
    1786:	91 05       	cpc	r25, r1
    1788:	81 f0       	breq	.+32     	; 0x17aa <GPIO_setupPortDirection+0x72>
    178a:	13 c0       	rjmp	.+38     	; 0x17b2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    178c:	ea e3       	ldi	r30, 0x3A	; 58
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	80 83       	st	Z, r24
    1794:	0e c0       	rjmp	.+28     	; 0x17b2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1796:	e7 e3       	ldi	r30, 0x37	; 55
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	80 83       	st	Z, r24
    179e:	09 c0       	rjmp	.+18     	; 0x17b2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    17a0:	e4 e3       	ldi	r30, 0x34	; 52
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	80 83       	st	Z, r24
    17a8:	04 c0       	rjmp	.+8      	; 0x17b2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    17aa:	e1 e3       	ldi	r30, 0x31	; 49
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	80 83       	st	Z, r24
			break;
		}
	}
}
    17b2:	0f 90       	pop	r0
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	00 d0       	rcall	.+0      	; 0x17c6 <GPIO_writePort+0x6>
    17c6:	00 d0       	rcall	.+0      	; 0x17c8 <GPIO_writePort+0x8>
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	89 83       	std	Y+1, r24	; 0x01
    17ce:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	84 30       	cpi	r24, 0x04	; 4
    17d4:	90 f5       	brcc	.+100    	; 0x183a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	3c 83       	std	Y+4, r19	; 0x04
    17de:	2b 83       	std	Y+3, r18	; 0x03
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	9c 81       	ldd	r25, Y+4	; 0x04
    17e4:	81 30       	cpi	r24, 0x01	; 1
    17e6:	91 05       	cpc	r25, r1
    17e8:	d1 f0       	breq	.+52     	; 0x181e <GPIO_writePort+0x5e>
    17ea:	2b 81       	ldd	r18, Y+3	; 0x03
    17ec:	3c 81       	ldd	r19, Y+4	; 0x04
    17ee:	22 30       	cpi	r18, 0x02	; 2
    17f0:	31 05       	cpc	r19, r1
    17f2:	2c f4       	brge	.+10     	; 0x17fe <GPIO_writePort+0x3e>
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	9c 81       	ldd	r25, Y+4	; 0x04
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	61 f0       	breq	.+24     	; 0x1814 <GPIO_writePort+0x54>
    17fc:	1e c0       	rjmp	.+60     	; 0x183a <GPIO_writePort+0x7a>
    17fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1800:	3c 81       	ldd	r19, Y+4	; 0x04
    1802:	22 30       	cpi	r18, 0x02	; 2
    1804:	31 05       	cpc	r19, r1
    1806:	81 f0       	breq	.+32     	; 0x1828 <GPIO_writePort+0x68>
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	9c 81       	ldd	r25, Y+4	; 0x04
    180c:	83 30       	cpi	r24, 0x03	; 3
    180e:	91 05       	cpc	r25, r1
    1810:	81 f0       	breq	.+32     	; 0x1832 <GPIO_writePort+0x72>
    1812:	13 c0       	rjmp	.+38     	; 0x183a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1814:	eb e3       	ldi	r30, 0x3B	; 59
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	80 83       	st	Z, r24
    181c:	0e c0       	rjmp	.+28     	; 0x183a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    181e:	e8 e3       	ldi	r30, 0x38	; 56
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
    1824:	80 83       	st	Z, r24
    1826:	09 c0       	rjmp	.+18     	; 0x183a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1828:	e5 e3       	ldi	r30, 0x35	; 53
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	80 83       	st	Z, r24
    1830:	04 c0       	rjmp	.+8      	; 0x183a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1832:	e2 e3       	ldi	r30, 0x32	; 50
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	80 83       	st	Z, r24
			break;
		}
	}
}
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	0f 90       	pop	r0
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	08 95       	ret

00001848 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	00 d0       	rcall	.+0      	; 0x184e <GPIO_readPort+0x6>
    184e:	00 d0       	rcall	.+0      	; 0x1850 <GPIO_readPort+0x8>
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1856:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	84 30       	cpi	r24, 0x04	; 4
    185c:	90 f5       	brcc	.+100    	; 0x18c2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	3c 83       	std	Y+4, r19	; 0x04
    1866:	2b 83       	std	Y+3, r18	; 0x03
    1868:	8b 81       	ldd	r24, Y+3	; 0x03
    186a:	9c 81       	ldd	r25, Y+4	; 0x04
    186c:	81 30       	cpi	r24, 0x01	; 1
    186e:	91 05       	cpc	r25, r1
    1870:	d1 f0       	breq	.+52     	; 0x18a6 <GPIO_readPort+0x5e>
    1872:	2b 81       	ldd	r18, Y+3	; 0x03
    1874:	3c 81       	ldd	r19, Y+4	; 0x04
    1876:	22 30       	cpi	r18, 0x02	; 2
    1878:	31 05       	cpc	r19, r1
    187a:	2c f4       	brge	.+10     	; 0x1886 <GPIO_readPort+0x3e>
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	9c 81       	ldd	r25, Y+4	; 0x04
    1880:	00 97       	sbiw	r24, 0x00	; 0
    1882:	61 f0       	breq	.+24     	; 0x189c <GPIO_readPort+0x54>
    1884:	1e c0       	rjmp	.+60     	; 0x18c2 <GPIO_readPort+0x7a>
    1886:	2b 81       	ldd	r18, Y+3	; 0x03
    1888:	3c 81       	ldd	r19, Y+4	; 0x04
    188a:	22 30       	cpi	r18, 0x02	; 2
    188c:	31 05       	cpc	r19, r1
    188e:	81 f0       	breq	.+32     	; 0x18b0 <GPIO_readPort+0x68>
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	9c 81       	ldd	r25, Y+4	; 0x04
    1894:	83 30       	cpi	r24, 0x03	; 3
    1896:	91 05       	cpc	r25, r1
    1898:	81 f0       	breq	.+32     	; 0x18ba <GPIO_readPort+0x72>
    189a:	13 c0       	rjmp	.+38     	; 0x18c2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    189c:	e9 e3       	ldi	r30, 0x39	; 57
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	89 83       	std	Y+1, r24	; 0x01
    18a4:	0e c0       	rjmp	.+28     	; 0x18c2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    18a6:	e6 e3       	ldi	r30, 0x36	; 54
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	89 83       	std	Y+1, r24	; 0x01
    18ae:	09 c0       	rjmp	.+18     	; 0x18c2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    18b0:	e3 e3       	ldi	r30, 0x33	; 51
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	89 83       	std	Y+1, r24	; 0x01
    18b8:	04 c0       	rjmp	.+8      	; 0x18c2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    18ba:	e0 e3       	ldi	r30, 0x30	; 48
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	08 95       	ret

000018d2 <PWM_Timer0_Start>:
 * Setup the compare value based on the required input duty cycle.
 * Setup the direction for OC0 as output pin through the GPIO driver.
 * The generated PWM signal frequency will be 500Hz to control the DC Motor speed.
 */
void PWM_Timer0_Start(uint8 duty_cycle)
{
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	0f 92       	push	r0
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; /* Set Timer Initial value */
    18de:	e2 e5       	ldi	r30, 0x52	; 82
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	10 82       	st	Z, r1

	OCR0  = duty_cycle; /* Set Compare Value */
    18e4:	ec e5       	ldi	r30, 0x5C	; 92
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	80 83       	st	Z, r24

	/* set OC0 as output pin --> pin where the PWM signal is generated from microcontroller */
	GPIO_setupPinDirection(PWM_OC0_PORT_ID,PWM_OC0_PIN_ID,PIN_OUTPUT);
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	63 e0       	ldi	r22, 0x03	; 3
    18f0:	41 e0       	ldi	r20, 0x01	; 1
    18f2:	0e 94 2b 09 	call	0x1256	; 0x1256 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    18f6:	e3 e5       	ldi	r30, 0x53	; 83
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	8a e6       	ldi	r24, 0x6A	; 106
    18fc:	80 83       	st	Z, r24
}
    18fe:	0f 90       	pop	r0
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	08 95       	ret

00001906 <__vector_7>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_COMPA_vect)
{
    1906:	1f 92       	push	r1
    1908:	0f 92       	push	r0
    190a:	0f b6       	in	r0, 0x3f	; 63
    190c:	0f 92       	push	r0
    190e:	11 24       	eor	r1, r1
    1910:	2f 93       	push	r18
    1912:	3f 93       	push	r19
    1914:	4f 93       	push	r20
    1916:	5f 93       	push	r21
    1918:	6f 93       	push	r22
    191a:	7f 93       	push	r23
    191c:	8f 93       	push	r24
    191e:	9f 93       	push	r25
    1920:	af 93       	push	r26
    1922:	bf 93       	push	r27
    1924:	ef 93       	push	r30
    1926:	ff 93       	push	r31
    1928:	df 93       	push	r29
    192a:	cf 93       	push	r28
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1930:	80 91 76 00 	lds	r24, 0x0076
    1934:	90 91 77 00 	lds	r25, 0x0077
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	29 f0       	breq	.+10     	; 0x1946 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after compare value is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    193c:	e0 91 76 00 	lds	r30, 0x0076
    1940:	f0 91 77 00 	lds	r31, 0x0077
    1944:	09 95       	icall
	}
}
    1946:	cf 91       	pop	r28
    1948:	df 91       	pop	r29
    194a:	ff 91       	pop	r31
    194c:	ef 91       	pop	r30
    194e:	bf 91       	pop	r27
    1950:	af 91       	pop	r26
    1952:	9f 91       	pop	r25
    1954:	8f 91       	pop	r24
    1956:	7f 91       	pop	r23
    1958:	6f 91       	pop	r22
    195a:	5f 91       	pop	r21
    195c:	4f 91       	pop	r20
    195e:	3f 91       	pop	r19
    1960:	2f 91       	pop	r18
    1962:	0f 90       	pop	r0
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	0f 90       	pop	r0
    1968:	1f 90       	pop	r1
    196a:	18 95       	reti

0000196c <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    196c:	1f 92       	push	r1
    196e:	0f 92       	push	r0
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	0f 92       	push	r0
    1974:	11 24       	eor	r1, r1
    1976:	2f 93       	push	r18
    1978:	3f 93       	push	r19
    197a:	4f 93       	push	r20
    197c:	5f 93       	push	r21
    197e:	6f 93       	push	r22
    1980:	7f 93       	push	r23
    1982:	8f 93       	push	r24
    1984:	9f 93       	push	r25
    1986:	af 93       	push	r26
    1988:	bf 93       	push	r27
    198a:	ef 93       	push	r30
    198c:	ff 93       	push	r31
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1996:	80 91 76 00 	lds	r24, 0x0076
    199a:	90 91 77 00 	lds	r25, 0x0077
    199e:	00 97       	sbiw	r24, 0x00	; 0
    19a0:	29 f0       	breq	.+10     	; 0x19ac <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after Overflow is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    19a2:	e0 91 76 00 	lds	r30, 0x0076
    19a6:	f0 91 77 00 	lds	r31, 0x0077
    19aa:	09 95       	icall
	}
}
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	ff 91       	pop	r31
    19b2:	ef 91       	pop	r30
    19b4:	bf 91       	pop	r27
    19b6:	af 91       	pop	r26
    19b8:	9f 91       	pop	r25
    19ba:	8f 91       	pop	r24
    19bc:	7f 91       	pop	r23
    19be:	6f 91       	pop	r22
    19c0:	5f 91       	pop	r21
    19c2:	4f 91       	pop	r20
    19c4:	3f 91       	pop	r19
    19c6:	2f 91       	pop	r18
    19c8:	0f 90       	pop	r0
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	0f 90       	pop	r0
    19ce:	1f 90       	pop	r1
    19d0:	18 95       	reti

000019d2 <Timer1_init>:
/*
 * Description :
 * Function to initialize the Timer1 driver
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	00 d0       	rcall	.+0      	; 0x19d8 <Timer1_init+0x6>
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
    19dc:	9a 83       	std	Y+2, r25	; 0x02
    19de:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Config_Ptr->initial_value;		/* Set timer1 initial count to zero */
    19e0:	ac e4       	ldi	r26, 0x4C	; 76
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e9 81       	ldd	r30, Y+1	; 0x01
    19e6:	fa 81       	ldd	r31, Y+2	; 0x02
    19e8:	80 81       	ld	r24, Z
    19ea:	91 81       	ldd	r25, Z+1	; 0x01
    19ec:	11 96       	adiw	r26, 0x01	; 1
    19ee:	9c 93       	st	X, r25
    19f0:	8e 93       	st	-X, r24
if (Config_Ptr->mode == 1)
    19f2:	e9 81       	ldd	r30, Y+1	; 0x01
    19f4:	fa 81       	ldd	r31, Y+2	; 0x02
    19f6:	85 81       	ldd	r24, Z+5	; 0x05
    19f8:	81 30       	cpi	r24, 0x01	; 1
    19fa:	51 f4       	brne	.+20     	; 0x1a10 <Timer1_init+0x3e>
	{OCR1A = Config_Ptr->compare_value;}    /* Set the Compare value if compare mode */
    19fc:	ea e4       	ldi	r30, 0x4A	; 74
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	a9 81       	ldd	r26, Y+1	; 0x01
    1a02:	ba 81       	ldd	r27, Y+2	; 0x02
    1a04:	12 96       	adiw	r26, 0x02	; 2
    1a06:	8d 91       	ld	r24, X+
    1a08:	9c 91       	ld	r25, X
    1a0a:	13 97       	sbiw	r26, 0x03	; 3
    1a0c:	91 83       	std	Z+1, r25	; 0x01
    1a0e:	80 83       	st	Z, r24

if (Config_Ptr->mode == 1)
    1a10:	e9 81       	ldd	r30, Y+1	; 0x01
    1a12:	fa 81       	ldd	r31, Y+2	; 0x02
    1a14:	85 81       	ldd	r24, Z+5	; 0x05
    1a16:	81 30       	cpi	r24, 0x01	; 1
    1a18:	41 f4       	brne	.+16     	; 0x1a2a <Timer1_init+0x58>
	{TIMSK |= (1<<OCIE1A);} /* Enable Timer1 Compare A Interrupt */
    1a1a:	a9 e5       	ldi	r26, 0x59	; 89
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e9 e5       	ldi	r30, 0x59	; 89
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	80 61       	ori	r24, 0x10	; 16
    1a26:	8c 93       	st	X, r24
    1a28:	0c c0       	rjmp	.+24     	; 0x1a42 <Timer1_init+0x70>
else if (Config_Ptr->mode == 0)
    1a2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a2e:	85 81       	ldd	r24, Z+5	; 0x05
    1a30:	88 23       	and	r24, r24
    1a32:	39 f4       	brne	.+14     	; 0x1a42 <Timer1_init+0x70>
	{TIMSK |= (1<<TOIE1);} /* Enable Timer1 Overflow Interrupt */
    1a34:	a9 e5       	ldi	r26, 0x59	; 89
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	e9 e5       	ldi	r30, 0x59	; 89
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	84 60       	ori	r24, 0x04	; 4
    1a40:	8c 93       	st	X, r24
	/* Configure timer control register TCCR1A
	 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
	 * 2. FOC1A=1 FOC1B=1
	 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
	 */
	TCCR1A = (1<<FOC1A);
    1a42:	ef e4       	ldi	r30, 0x4F	; 79
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	88 e0       	ldi	r24, 0x08	; 8
    1a48:	80 83       	st	Z, r24

	/* Configure timer control register TCCR1B
	 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
	 * 2. Prescaler = F_CPU/8 CS10=0 CS11=1 CS12=0
	 */
if (Config_Ptr->mode == 1)
    1a4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a4e:	85 81       	ldd	r24, Z+5	; 0x05
    1a50:	81 30       	cpi	r24, 0x01	; 1
    1a52:	21 f4       	brne	.+8      	; 0x1a5c <Timer1_init+0x8a>
	{TCCR1B = (1<<WGM12);}
    1a54:	ee e4       	ldi	r30, 0x4E	; 78
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	88 e0       	ldi	r24, 0x08	; 8
    1a5a:	80 83       	st	Z, r24

    /* Set timer1 prescaler */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    1a5c:	ae e4       	ldi	r26, 0x4E	; 78
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	ee e4       	ldi	r30, 0x4E	; 78
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	98 2f       	mov	r25, r24
    1a68:	98 7f       	andi	r25, 0xF8	; 248
    1a6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a6e:	84 81       	ldd	r24, Z+4	; 0x04
    1a70:	89 2b       	or	r24, r25
    1a72:	8c 93       	st	X, r24

}
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	08 95       	ret

00001a7e <Timer1_deInit>:
/*
 * Description:
 * Function to disable the Timer1.
 */
void Timer1_deInit(void)
{
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    1a86:	ef e4       	ldi	r30, 0x4F	; 79
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	10 82       	st	Z, r1
	TCCR1B = 0;
    1a8c:	ee e4       	ldi	r30, 0x4E	; 78
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	10 82       	st	Z, r1
	TCNT1 = 0;
    1a92:	ec e4       	ldi	r30, 0x4C	; 76
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	11 82       	std	Z+1, r1	; 0x01
    1a98:	10 82       	st	Z, r1

	TIMSK &= ~(1<<OCIE1A); /* Disable Timer1 Compare A Interrupt */
    1a9a:	a9 e5       	ldi	r26, 0x59	; 89
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	e9 e5       	ldi	r30, 0x59	; 89
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	8f 7e       	andi	r24, 0xEF	; 239
    1aa6:	8c 93       	st	X, r24

	TIMSK &= ~(1<<TOIE1); /* Disable Timer1 Overflow Interrupt */
    1aa8:	a9 e5       	ldi	r26, 0x59	; 89
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e9 e5       	ldi	r30, 0x59	; 89
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	8b 7f       	andi	r24, 0xFB	; 251
    1ab4:	8c 93       	st	X, r24
}
    1ab6:	cf 91       	pop	r28
    1ab8:	df 91       	pop	r29
    1aba:	08 95       	ret

00001abc <Timer1_setCallBack>:
/*
 * Description:
 * Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    1abc:	df 93       	push	r29
    1abe:	cf 93       	push	r28
    1ac0:	00 d0       	rcall	.+0      	; 0x1ac2 <Timer1_setCallBack+0x6>
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	9a 83       	std	Y+2, r25	; 0x02
    1ac8:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ace:	90 93 77 00 	sts	0x0077, r25
    1ad2:	80 93 76 00 	sts	0x0076, r24
}
    1ad6:	0f 90       	pop	r0
    1ad8:	0f 90       	pop	r0
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	08 95       	ret

00001ae0 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	00 d0       	rcall	.+0      	; 0x1ae6 <TWI_init+0x6>
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	9a 83       	std	Y+2, r25	; 0x02
    1aec:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	TWSR = 0x00;
    1aee:	e1 e2       	ldi	r30, 0x21	; 33
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	10 82       	st	Z, r1
	TWBR = (Config_Ptr->bit_rate);
    1af4:	a0 e2       	ldi	r26, 0x20	; 32
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	e9 81       	ldd	r30, Y+1	; 0x01
    1afa:	fa 81       	ldd	r31, Y+2	; 0x02
    1afc:	81 81       	ldd	r24, Z+1	; 0x01
    1afe:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
	TWAR = (TWAR & 0xCF) | ((Config_Ptr->address)<<1);
    1b00:	a2 e2       	ldi	r26, 0x22	; 34
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e2 e2       	ldi	r30, 0x22	; 34
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	28 2f       	mov	r18, r24
    1b0c:	2f 7c       	andi	r18, 0xCF	; 207
    1b0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b10:	fa 81       	ldd	r31, Y+2	; 0x02
    1b12:	80 81       	ld	r24, Z
    1b14:	88 2f       	mov	r24, r24
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	88 0f       	add	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	82 2b       	or	r24, r18
    1b1e:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1b20:	e6 e5       	ldi	r30, 0x56	; 86
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	84 e0       	ldi	r24, 0x04	; 4
    1b26:	80 83       	st	Z, r24
}
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
    1b2c:	cf 91       	pop	r28
    1b2e:	df 91       	pop	r29
    1b30:	08 95       	ret

00001b32 <TWI_start>:

void TWI_start(void)
{
    1b32:	df 93       	push	r29
    1b34:	cf 93       	push	r28
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1b3a:	e6 e5       	ldi	r30, 0x56	; 86
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	84 ea       	ldi	r24, 0xA4	; 164
    1b40:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1b42:	e6 e5       	ldi	r30, 0x56	; 86
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	88 23       	and	r24, r24
    1b4a:	dc f7       	brge	.-10     	; 0x1b42 <TWI_start+0x10>
}
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	08 95       	ret

00001b52 <TWI_stop>:

void TWI_stop(void)
{
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1b5a:	e6 e5       	ldi	r30, 0x56	; 86
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	84 e9       	ldi	r24, 0x94	; 148
    1b60:	80 83       	st	Z, r24
}
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	08 95       	ret

00001b68 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1b68:	df 93       	push	r29
    1b6a:	cf 93       	push	r28
    1b6c:	0f 92       	push	r0
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
    1b72:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1b74:	e3 e2       	ldi	r30, 0x23	; 35
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1b7c:	e6 e5       	ldi	r30, 0x56	; 86
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	84 e8       	ldi	r24, 0x84	; 132
    1b82:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1b84:	e6 e5       	ldi	r30, 0x56	; 86
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	88 23       	and	r24, r24
    1b8c:	dc f7       	brge	.-10     	; 0x1b84 <TWI_writeByte+0x1c>
}
    1b8e:	0f 90       	pop	r0
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	08 95       	ret

00001b96 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1b9e:	e6 e5       	ldi	r30, 0x56	; 86
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	84 ec       	ldi	r24, 0xC4	; 196
    1ba4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1ba6:	e6 e5       	ldi	r30, 0x56	; 86
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	88 23       	and	r24, r24
    1bae:	dc f7       	brge	.-10     	; 0x1ba6 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1bb0:	e3 e2       	ldi	r30, 0x23	; 35
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
}
    1bb6:	cf 91       	pop	r28
    1bb8:	df 91       	pop	r29
    1bba:	08 95       	ret

00001bbc <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1bbc:	df 93       	push	r29
    1bbe:	cf 93       	push	r28
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1bc4:	e6 e5       	ldi	r30, 0x56	; 86
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	84 e8       	ldi	r24, 0x84	; 132
    1bca:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1bcc:	e6 e5       	ldi	r30, 0x56	; 86
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	88 23       	and	r24, r24
    1bd4:	dc f7       	brge	.-10     	; 0x1bcc <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1bd6:	e3 e2       	ldi	r30, 0x23	; 35
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
}
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	08 95       	ret

00001be2 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	0f 92       	push	r0
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1bec:	e1 e2       	ldi	r30, 0x21	; 33
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	88 7f       	andi	r24, 0xF8	; 248
    1bf4:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1bf6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bf8:	0f 90       	pop	r0
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	08 95       	ret

00001c00 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    1c00:	df 93       	push	r29
    1c02:	cf 93       	push	r28
    1c04:	00 d0       	rcall	.+0      	; 0x1c06 <UART_init+0x6>
    1c06:	00 d0       	rcall	.+0      	; 0x1c08 <UART_init+0x8>
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
    1c0c:	9c 83       	std	Y+4, r25	; 0x04
    1c0e:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1c10:	1a 82       	std	Y+2, r1	; 0x02
    1c12:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1c14:	eb e2       	ldi	r30, 0x2B	; 43
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	82 e0       	ldi	r24, 0x02	; 2
    1c1a:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1c1c:	ea e2       	ldi	r30, 0x2A	; 42
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	88 e1       	ldi	r24, 0x18	; 24
    1c22:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    1c24:	e0 e4       	ldi	r30, 0x40	; 64
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 e8       	ldi	r24, 0x80	; 128
    1c2a:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity)<<4);
    1c2c:	a0 e4       	ldi	r26, 0x40	; 64
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	e0 e4       	ldi	r30, 0x40	; 64
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	28 2f       	mov	r18, r24
    1c38:	2f 7c       	andi	r18, 0xCF	; 207
    1c3a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c3c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c3e:	81 81       	ldd	r24, Z+1	; 0x01
    1c40:	88 2f       	mov	r24, r24
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	82 95       	swap	r24
    1c46:	92 95       	swap	r25
    1c48:	90 7f       	andi	r25, 0xF0	; 240
    1c4a:	98 27       	eor	r25, r24
    1c4c:	80 7f       	andi	r24, 0xF0	; 240
    1c4e:	98 27       	eor	r25, r24
    1c50:	82 2b       	or	r24, r18
    1c52:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_bit)<<3);
    1c54:	a0 e4       	ldi	r26, 0x40	; 64
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e0 e4       	ldi	r30, 0x40	; 64
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	28 2f       	mov	r18, r24
    1c60:	27 7f       	andi	r18, 0xF7	; 247
    1c62:	eb 81       	ldd	r30, Y+3	; 0x03
    1c64:	fc 81       	ldd	r31, Y+4	; 0x04
    1c66:	82 81       	ldd	r24, Z+2	; 0x02
    1c68:	88 2f       	mov	r24, r24
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	88 0f       	add	r24, r24
    1c6e:	99 1f       	adc	r25, r25
    1c70:	88 0f       	add	r24, r24
    1c72:	99 1f       	adc	r25, r25
    1c74:	88 0f       	add	r24, r24
    1c76:	99 1f       	adc	r25, r25
    1c78:	82 2b       	or	r24, r18
    1c7a:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->bit_data)<<1);
    1c7c:	a0 e4       	ldi	r26, 0x40	; 64
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	e0 e4       	ldi	r30, 0x40	; 64
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	28 2f       	mov	r18, r24
    1c88:	29 7f       	andi	r18, 0xF9	; 249
    1c8a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c8c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c8e:	80 81       	ld	r24, Z
    1c90:	88 2f       	mov	r24, r24
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	88 0f       	add	r24, r24
    1c96:	99 1f       	adc	r25, r25
    1c98:	82 2b       	or	r24, r18
    1c9a:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    1c9c:	eb 81       	ldd	r30, Y+3	; 0x03
    1c9e:	fc 81       	ldd	r31, Y+4	; 0x04
    1ca0:	83 81       	ldd	r24, Z+3	; 0x03
    1ca2:	94 81       	ldd	r25, Z+4	; 0x04
    1ca4:	cc 01       	movw	r24, r24
    1ca6:	a0 e0       	ldi	r26, 0x00	; 0
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	88 0f       	add	r24, r24
    1cac:	99 1f       	adc	r25, r25
    1cae:	aa 1f       	adc	r26, r26
    1cb0:	bb 1f       	adc	r27, r27
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	aa 1f       	adc	r26, r26
    1cb8:	bb 1f       	adc	r27, r27
    1cba:	88 0f       	add	r24, r24
    1cbc:	99 1f       	adc	r25, r25
    1cbe:	aa 1f       	adc	r26, r26
    1cc0:	bb 1f       	adc	r27, r27
    1cc2:	9c 01       	movw	r18, r24
    1cc4:	ad 01       	movw	r20, r26
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	92 e1       	ldi	r25, 0x12	; 18
    1cca:	aa e7       	ldi	r26, 0x7A	; 122
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	bc 01       	movw	r22, r24
    1cd0:	cd 01       	movw	r24, r26
    1cd2:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__udivmodsi4>
    1cd6:	da 01       	movw	r26, r20
    1cd8:	c9 01       	movw	r24, r18
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	9a 83       	std	Y+2, r25	; 0x02
    1cde:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1ce0:	e0 e4       	ldi	r30, 0x40	; 64
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
    1ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce8:	89 2f       	mov	r24, r25
    1cea:	99 27       	eor	r25, r25
    1cec:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1cee:	e9 e2       	ldi	r30, 0x29	; 41
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
    1cf4:	80 83       	st	Z, r24
}
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	08 95       	ret

00001d04 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	0f 92       	push	r0
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
    1d0e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1d10:	eb e2       	ldi	r30, 0x2B	; 43
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	88 2f       	mov	r24, r24
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	80 72       	andi	r24, 0x20	; 32
    1d1c:	90 70       	andi	r25, 0x00	; 0
    1d1e:	00 97       	sbiw	r24, 0x00	; 0
    1d20:	b9 f3       	breq	.-18     	; 0x1d10 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1d22:	ec e2       	ldi	r30, 0x2C	; 44
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	89 81       	ldd	r24, Y+1	; 0x01
    1d28:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1d2a:	0f 90       	pop	r0
    1d2c:	cf 91       	pop	r28
    1d2e:	df 91       	pop	r29
    1d30:	08 95       	ret

00001d32 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1d32:	df 93       	push	r29
    1d34:	cf 93       	push	r28
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1d3a:	eb e2       	ldi	r30, 0x2B	; 43
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	88 23       	and	r24, r24
    1d42:	dc f7       	brge	.-10     	; 0x1d3a <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    1d44:	ec e2       	ldi	r30, 0x2C	; 44
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
}
    1d4a:	cf 91       	pop	r28
    1d4c:	df 91       	pop	r29
    1d4e:	08 95       	ret

00001d50 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1d50:	df 93       	push	r29
    1d52:	cf 93       	push	r28
    1d54:	00 d0       	rcall	.+0      	; 0x1d56 <UART_sendString+0x6>
    1d56:	0f 92       	push	r0
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
    1d5c:	9b 83       	std	Y+3, r25	; 0x03
    1d5e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1d60:	19 82       	std	Y+1, r1	; 0x01
    1d62:	0e c0       	rjmp	.+28     	; 0x1d80 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	28 2f       	mov	r18, r24
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d6e:	fc 01       	movw	r30, r24
    1d70:	e2 0f       	add	r30, r18
    1d72:	f3 1f       	adc	r31, r19
    1d74:	80 81       	ld	r24, Z
    1d76:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <UART_sendByte>
		i++;
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	8f 5f       	subi	r24, 0xFF	; 255
    1d7e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	28 2f       	mov	r18, r24
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	9b 81       	ldd	r25, Y+3	; 0x03
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	e2 0f       	add	r30, r18
    1d8e:	f3 1f       	adc	r31, r19
    1d90:	80 81       	ld	r24, Z
    1d92:	88 23       	and	r24, r24
    1d94:	39 f7       	brne	.-50     	; 0x1d64 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	0f 90       	pop	r0
    1d9c:	cf 91       	pop	r28
    1d9e:	df 91       	pop	r29
    1da0:	08 95       	ret

00001da2 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1da2:	0f 93       	push	r16
    1da4:	1f 93       	push	r17
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	00 d0       	rcall	.+0      	; 0x1dac <UART_receiveString+0xa>
    1dac:	0f 92       	push	r0
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
    1db2:	9b 83       	std	Y+3, r25	; 0x03
    1db4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1db6:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	28 2f       	mov	r18, r24
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc2:	8c 01       	movw	r16, r24
    1dc4:	02 0f       	add	r16, r18
    1dc6:	13 1f       	adc	r17, r19
    1dc8:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <UART_recieveByte>
    1dcc:	f8 01       	movw	r30, r16
    1dce:	80 83       	st	Z, r24
    1dd0:	0f c0       	rjmp	.+30     	; 0x1df0 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	8f 5f       	subi	r24, 0xFF	; 255
    1dd6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	28 2f       	mov	r18, r24
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	9b 81       	ldd	r25, Y+3	; 0x03
    1de2:	8c 01       	movw	r16, r24
    1de4:	02 0f       	add	r16, r18
    1de6:	13 1f       	adc	r17, r19
    1de8:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <UART_recieveByte>
    1dec:	f8 01       	movw	r30, r16
    1dee:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	28 2f       	mov	r18, r24
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	8a 81       	ldd	r24, Y+2	; 0x02
    1df8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	e2 0f       	add	r30, r18
    1dfe:	f3 1f       	adc	r31, r19
    1e00:	80 81       	ld	r24, Z
    1e02:	83 32       	cpi	r24, 0x23	; 35
    1e04:	31 f7       	brne	.-52     	; 0x1dd2 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	28 2f       	mov	r18, r24
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e10:	fc 01       	movw	r30, r24
    1e12:	e2 0f       	add	r30, r18
    1e14:	f3 1f       	adc	r31, r19
    1e16:	10 82       	st	Z, r1
}
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	cf 91       	pop	r28
    1e20:	df 91       	pop	r29
    1e22:	1f 91       	pop	r17
    1e24:	0f 91       	pop	r16
    1e26:	08 95       	ret

00001e28 <__udivmodhi4>:
    1e28:	aa 1b       	sub	r26, r26
    1e2a:	bb 1b       	sub	r27, r27
    1e2c:	51 e1       	ldi	r21, 0x11	; 17
    1e2e:	07 c0       	rjmp	.+14     	; 0x1e3e <__udivmodhi4_ep>

00001e30 <__udivmodhi4_loop>:
    1e30:	aa 1f       	adc	r26, r26
    1e32:	bb 1f       	adc	r27, r27
    1e34:	a6 17       	cp	r26, r22
    1e36:	b7 07       	cpc	r27, r23
    1e38:	10 f0       	brcs	.+4      	; 0x1e3e <__udivmodhi4_ep>
    1e3a:	a6 1b       	sub	r26, r22
    1e3c:	b7 0b       	sbc	r27, r23

00001e3e <__udivmodhi4_ep>:
    1e3e:	88 1f       	adc	r24, r24
    1e40:	99 1f       	adc	r25, r25
    1e42:	5a 95       	dec	r21
    1e44:	a9 f7       	brne	.-22     	; 0x1e30 <__udivmodhi4_loop>
    1e46:	80 95       	com	r24
    1e48:	90 95       	com	r25
    1e4a:	bc 01       	movw	r22, r24
    1e4c:	cd 01       	movw	r24, r26
    1e4e:	08 95       	ret

00001e50 <__udivmodsi4>:
    1e50:	a1 e2       	ldi	r26, 0x21	; 33
    1e52:	1a 2e       	mov	r1, r26
    1e54:	aa 1b       	sub	r26, r26
    1e56:	bb 1b       	sub	r27, r27
    1e58:	fd 01       	movw	r30, r26
    1e5a:	0d c0       	rjmp	.+26     	; 0x1e76 <__udivmodsi4_ep>

00001e5c <__udivmodsi4_loop>:
    1e5c:	aa 1f       	adc	r26, r26
    1e5e:	bb 1f       	adc	r27, r27
    1e60:	ee 1f       	adc	r30, r30
    1e62:	ff 1f       	adc	r31, r31
    1e64:	a2 17       	cp	r26, r18
    1e66:	b3 07       	cpc	r27, r19
    1e68:	e4 07       	cpc	r30, r20
    1e6a:	f5 07       	cpc	r31, r21
    1e6c:	20 f0       	brcs	.+8      	; 0x1e76 <__udivmodsi4_ep>
    1e6e:	a2 1b       	sub	r26, r18
    1e70:	b3 0b       	sbc	r27, r19
    1e72:	e4 0b       	sbc	r30, r20
    1e74:	f5 0b       	sbc	r31, r21

00001e76 <__udivmodsi4_ep>:
    1e76:	66 1f       	adc	r22, r22
    1e78:	77 1f       	adc	r23, r23
    1e7a:	88 1f       	adc	r24, r24
    1e7c:	99 1f       	adc	r25, r25
    1e7e:	1a 94       	dec	r1
    1e80:	69 f7       	brne	.-38     	; 0x1e5c <__udivmodsi4_loop>
    1e82:	60 95       	com	r22
    1e84:	70 95       	com	r23
    1e86:	80 95       	com	r24
    1e88:	90 95       	com	r25
    1e8a:	9b 01       	movw	r18, r22
    1e8c:	ac 01       	movw	r20, r24
    1e8e:	bd 01       	movw	r22, r26
    1e90:	cf 01       	movw	r24, r30
    1e92:	08 95       	ret

00001e94 <__prologue_saves__>:
    1e94:	2f 92       	push	r2
    1e96:	3f 92       	push	r3
    1e98:	4f 92       	push	r4
    1e9a:	5f 92       	push	r5
    1e9c:	6f 92       	push	r6
    1e9e:	7f 92       	push	r7
    1ea0:	8f 92       	push	r8
    1ea2:	9f 92       	push	r9
    1ea4:	af 92       	push	r10
    1ea6:	bf 92       	push	r11
    1ea8:	cf 92       	push	r12
    1eaa:	df 92       	push	r13
    1eac:	ef 92       	push	r14
    1eae:	ff 92       	push	r15
    1eb0:	0f 93       	push	r16
    1eb2:	1f 93       	push	r17
    1eb4:	cf 93       	push	r28
    1eb6:	df 93       	push	r29
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	ca 1b       	sub	r28, r26
    1ebe:	db 0b       	sbc	r29, r27
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	f8 94       	cli
    1ec4:	de bf       	out	0x3e, r29	; 62
    1ec6:	0f be       	out	0x3f, r0	; 63
    1ec8:	cd bf       	out	0x3d, r28	; 61
    1eca:	09 94       	ijmp

00001ecc <__epilogue_restores__>:
    1ecc:	2a 88       	ldd	r2, Y+18	; 0x12
    1ece:	39 88       	ldd	r3, Y+17	; 0x11
    1ed0:	48 88       	ldd	r4, Y+16	; 0x10
    1ed2:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ed4:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ed6:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ed8:	8c 84       	ldd	r8, Y+12	; 0x0c
    1eda:	9b 84       	ldd	r9, Y+11	; 0x0b
    1edc:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ede:	b9 84       	ldd	r11, Y+9	; 0x09
    1ee0:	c8 84       	ldd	r12, Y+8	; 0x08
    1ee2:	df 80       	ldd	r13, Y+7	; 0x07
    1ee4:	ee 80       	ldd	r14, Y+6	; 0x06
    1ee6:	fd 80       	ldd	r15, Y+5	; 0x05
    1ee8:	0c 81       	ldd	r16, Y+4	; 0x04
    1eea:	1b 81       	ldd	r17, Y+3	; 0x03
    1eec:	aa 81       	ldd	r26, Y+2	; 0x02
    1eee:	b9 81       	ldd	r27, Y+1	; 0x01
    1ef0:	ce 0f       	add	r28, r30
    1ef2:	d1 1d       	adc	r29, r1
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	f8 94       	cli
    1ef8:	de bf       	out	0x3e, r29	; 62
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	cd bf       	out	0x3d, r28	; 61
    1efe:	ed 01       	movw	r28, r26
    1f00:	08 95       	ret

00001f02 <_exit>:
    1f02:	f8 94       	cli

00001f04 <__stop_program>:
    1f04:	ff cf       	rjmp	.-2      	; 0x1f04 <__stop_program>
